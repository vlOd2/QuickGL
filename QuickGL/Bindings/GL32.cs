// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:00:37.7131403Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings;

public static unsafe class GL32
{
    #region Constants
    public const int GL_MAX_INTEGER_SAMPLES = 0x00009110;
    public const int GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x0000910F;
    public const int GL_MAX_COLOR_TEXTURE_SAMPLES = 0x0000910E;
    public const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910D;
    public const int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910C;
    public const int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910B;
    public const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x0000910A;
    public const int GL_INT_SAMPLER_2D_MULTISAMPLE = 0x00009109;
    public const int GL_SAMPLER_2D_MULTISAMPLE = 0x00009108;
    public const int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x00009107;
    public const int GL_TEXTURE_SAMPLES = 0x00009106;
    public const int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x00009105;
    public const int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x00009104;
    public const int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009103;
    public const int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009102;
    public const int GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x00009101;
    public const int GL_TEXTURE_2D_MULTISAMPLE = 0x00009100;
    public const int GL_MAX_SAMPLE_MASK_WORDS = 0x00008E59;
    public const int GL_SAMPLE_MASK_VALUE = 0x00008E52;
    public const int GL_SAMPLE_MASK = 0x00008E51;
    public const int GL_SAMPLE_POSITION = 0x00008E50;
    public const int GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
    public const ulong GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
    public const int GL_WAIT_FAILED = 0x0000911D;
    public const int GL_CONDITION_SATISFIED = 0x0000911C;
    public const int GL_TIMEOUT_EXPIRED = 0x0000911B;
    public const int GL_ALREADY_SIGNALED = 0x0000911A;
    public const int GL_SIGNALED = 0x00009119;
    public const int GL_UNSIGNALED = 0x00009118;
    public const int GL_SYNC_GPU_COMMANDS_COMPLETE = 0x00009117;
    public const int GL_SYNC_FENCE = 0x00009116;
    public const int GL_SYNC_FLAGS = 0x00009115;
    public const int GL_SYNC_STATUS = 0x00009114;
    public const int GL_SYNC_CONDITION = 0x00009113;
    public const int GL_OBJECT_TYPE = 0x00009112;
    public const int GL_MAX_SERVER_WAIT_TIMEOUT = 0x00009111;
    public const int GL_PROVOKING_VERTEX = 0x00008E4F;
    public const int GL_LAST_VERTEX_CONVENTION = 0x00008E4E;
    public const int GL_FIRST_VERTEX_CONVENTION = 0x00008E4D;
    public const int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x00008E4C;
    public const int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x00008DDF;
    public const int GL_GEOMETRY_VERTICES_OUT = 0x00008916;
    public const int GL_GEOMETRY_SHADER = 0x00008DD9;
    public const int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x00008DA7;
    public const int GL_PROGRAM_POINT_SIZE = 0x00008642;
    public const int GL_TRIANGLE_STRIP_ADJACENCY = 0x0000000D;
    public const int GL_DEPTH_CLAMP = 0x0000864F;
    public const int GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x0000884F;
    public const int GL_CONTEXT_PROFILE_MASK = 0x00009126;
    public const int GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x00009125;
    public const int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x00009124;
    public const int GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x00009123;
    public const int GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x00009122;
    public const int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x00008DE1;
    public const int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x00008DE0;
    public const int GL_GEOMETRY_OUTPUT_TYPE = 0x00008918;
    public const int GL_GEOMETRY_INPUT_TYPE = 0x00008917;
    public const int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x00008DA8;
    public const int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x00008C29;
    public const int GL_TRIANGLES_ADJACENCY = 0x0000000C;
    public const int GL_LINE_STRIP_ADJACENCY = 0x0000000B;
    public const int GL_LINES_ADJACENCY = 0x0000000A;
    public const int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
    public const int GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<nint, uint, int, int*, int*, void> _glGetSynciv = null;
    internal static delegate* unmanaged<uint, long*, void> _glGetInteger64v = null;
    internal static delegate* unmanaged<nint, uint, ulong, void> _glWaitSync = null;
    internal static delegate* unmanaged<nint, uint, ulong, uint> _glClientWaitSync = null;
    internal static delegate* unmanaged<nint, void> _glDeleteSync = null;
    internal static delegate* unmanaged<nint, bool> _glIsSync = null;
    internal static delegate* unmanaged<uint, uint, nint> _glFenceSync = null;
    internal static delegate* unmanaged<uint, void> _glProvokingVertex = null;
    internal static delegate* unmanaged<uint, uint, void> _glSampleMaski = null;
    internal static delegate* unmanaged<uint, uint, float*, void> _glGetMultisamplefv = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, bool, void> _glTexImage3DMultisample = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, bool, void> _glTexImage2DMultisample = null;
    internal static delegate* unmanaged<uint, uint, uint, int, void> _glFramebufferTexture = null;
    internal static delegate* unmanaged<uint, uint, long*, void> _glGetBufferParameteri64v = null;
    internal static delegate* unmanaged<uint, uint, long*, void> _glGetInteger64i_v = null;
    internal static delegate* unmanaged<uint, int*, uint, nint, int, int*, void> _glMultiDrawElementsBaseVertex = null;
    internal static delegate* unmanaged<uint, int, uint, void*, int, int, void> _glDrawElementsInstancedBaseVertex = null;
    internal static delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void> _glDrawRangeElementsBaseVertex = null;
    internal static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsBaseVertex = null;

    internal static void Load()
    {
        _glGetSynciv = (delegate* unmanaged<nint, uint, int, int*, int*, void>)QuickGL.GetGLProcAddress("glGetSynciv");
        _glGetInteger64v = (delegate* unmanaged<uint, long*, void>)QuickGL.GetGLProcAddress("glGetInteger64v");
        _glWaitSync = (delegate* unmanaged<nint, uint, ulong, void>)QuickGL.GetGLProcAddress("glWaitSync");
        _glClientWaitSync = (delegate* unmanaged<nint, uint, ulong, uint>)QuickGL.GetGLProcAddress("glClientWaitSync");
        _glDeleteSync = (delegate* unmanaged<nint, void>)QuickGL.GetGLProcAddress("glDeleteSync");
        _glIsSync = (delegate* unmanaged<nint, bool>)QuickGL.GetGLProcAddress("glIsSync");
        _glFenceSync = (delegate* unmanaged<uint, uint, nint>)QuickGL.GetGLProcAddress("glFenceSync");
        _glProvokingVertex = (delegate* unmanaged<uint, void>)QuickGL.GetGLProcAddress("glProvokingVertex");
        _glSampleMaski = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glSampleMaski");
        _glGetMultisamplefv = (delegate* unmanaged<uint, uint, float*, void>)QuickGL.GetGLProcAddress("glGetMultisamplefv");
        _glTexImage3DMultisample = (delegate* unmanaged<uint, int, uint, int, int, int, bool, void>)QuickGL.GetGLProcAddress("glTexImage3DMultisample");
        _glTexImage2DMultisample = (delegate* unmanaged<uint, int, uint, int, int, bool, void>)QuickGL.GetGLProcAddress("glTexImage2DMultisample");
        _glFramebufferTexture = (delegate* unmanaged<uint, uint, uint, int, void>)QuickGL.GetGLProcAddress("glFramebufferTexture");
        _glGetBufferParameteri64v = (delegate* unmanaged<uint, uint, long*, void>)QuickGL.GetGLProcAddress("glGetBufferParameteri64v");
        _glGetInteger64i_v = (delegate* unmanaged<uint, uint, long*, void>)QuickGL.GetGLProcAddress("glGetInteger64i_v");
        _glMultiDrawElementsBaseVertex = (delegate* unmanaged<uint, int*, uint, nint, int, int*, void>)QuickGL.GetGLProcAddress("glMultiDrawElementsBaseVertex");
        _glDrawElementsInstancedBaseVertex = (delegate* unmanaged<uint, int, uint, void*, int, int, void>)QuickGL.GetGLProcAddress("glDrawElementsInstancedBaseVertex");
        _glDrawRangeElementsBaseVertex = (delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void>)QuickGL.GetGLProcAddress("glDrawRangeElementsBaseVertex");
        _glDrawElementsBaseVertex = (delegate* unmanaged<uint, int, uint, void*, int, void>)QuickGL.GetGLProcAddress("glDrawElementsBaseVertex");
    }

    internal static void Unload()
    {
        _glGetSynciv = null;
        _glGetInteger64v = null;
        _glWaitSync = null;
        _glClientWaitSync = null;
        _glDeleteSync = null;
        _glIsSync = null;
        _glFenceSync = null;
        _glProvokingVertex = null;
        _glSampleMaski = null;
        _glGetMultisamplefv = null;
        _glTexImage3DMultisample = null;
        _glTexImage2DMultisample = null;
        _glFramebufferTexture = null;
        _glGetBufferParameteri64v = null;
        _glGetInteger64i_v = null;
        _glMultiDrawElementsBaseVertex = null;
        _glDrawElementsInstancedBaseVertex = null;
        _glDrawRangeElementsBaseVertex = null;
        _glDrawElementsBaseVertex = null;
    }
    #endregion

    #region Function wrappers
    public static void glGetSynciv(nint sync, uint pname, int count, int* length, int* values) { QGLFeature.VerifyFunc((nint)_glGetSynciv); _glGetSynciv(sync, pname, count, length, values); }
    public static void glGetInteger64v(uint pname, long* data) { QGLFeature.VerifyFunc((nint)_glGetInteger64v); _glGetInteger64v(pname, data); }
    public static void glWaitSync(nint sync, uint flags, ulong timeout) { QGLFeature.VerifyFunc((nint)_glWaitSync); _glWaitSync(sync, flags, timeout); }
    public static uint glClientWaitSync(nint sync, uint flags, ulong timeout) { QGLFeature.VerifyFunc((nint)_glClientWaitSync); return _glClientWaitSync(sync, flags, timeout); }
    public static void glDeleteSync(nint sync) { QGLFeature.VerifyFunc((nint)_glDeleteSync); _glDeleteSync(sync); }
    public static bool glIsSync(nint sync) { QGLFeature.VerifyFunc((nint)_glIsSync); return _glIsSync(sync); }
    public static nint glFenceSync(uint condition, uint flags) { QGLFeature.VerifyFunc((nint)_glFenceSync); return _glFenceSync(condition, flags); }
    public static void glProvokingVertex(uint mode) { QGLFeature.VerifyFunc((nint)_glProvokingVertex); _glProvokingVertex(mode); }
    public static void glSampleMaski(uint maskNumber, uint mask) { QGLFeature.VerifyFunc((nint)_glSampleMaski); _glSampleMaski(maskNumber, mask); }
    public static void glGetMultisamplefv(uint pname, uint index, float* val) { QGLFeature.VerifyFunc((nint)_glGetMultisamplefv); _glGetMultisamplefv(pname, index, val); }
    public static void glTexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations) { QGLFeature.VerifyFunc((nint)_glTexImage3DMultisample); _glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
    public static void glTexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations) { QGLFeature.VerifyFunc((nint)_glTexImage2DMultisample); _glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
    public static void glFramebufferTexture(uint target, uint attachment, uint texture, int level) { QGLFeature.VerifyFunc((nint)_glFramebufferTexture); _glFramebufferTexture(target, attachment, texture, level); }
    public static void glGetBufferParameteri64v(uint target, uint pname, long* @params) { QGLFeature.VerifyFunc((nint)_glGetBufferParameteri64v); _glGetBufferParameteri64v(target, pname, @params); }
    public static void glGetInteger64i_v(uint target, uint index, long* data) { QGLFeature.VerifyFunc((nint)_glGetInteger64i_v); _glGetInteger64i_v(target, index, data); }
    public static void glMultiDrawElementsBaseVertex(uint mode, int* count, uint type, nint indices, int drawcount, int* basevertex) { QGLFeature.VerifyFunc((nint)_glMultiDrawElementsBaseVertex); _glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex); }
    public static void glDrawElementsInstancedBaseVertex(uint mode, int count, uint type, void* indices, int instancecount, int basevertex) { QGLFeature.VerifyFunc((nint)_glDrawElementsInstancedBaseVertex); _glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
    public static void glDrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex) { QGLFeature.VerifyFunc((nint)_glDrawRangeElementsBaseVertex); _glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
    public static void glDrawElementsBaseVertex(uint mode, int count, uint type, void* indices, int basevertex) { QGLFeature.VerifyFunc((nint)_glDrawElementsBaseVertex); _glDrawElementsBaseVertex(mode, count, type, indices, basevertex); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_VERSION_3_2", false, false);
}
