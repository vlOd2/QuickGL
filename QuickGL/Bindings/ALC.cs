// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T18:55:41.5126918Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings;

#region Other types
public struct ALCdevice { }

public struct ALCcontext { }

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate ALCdevice* LPALCCAPTUREOPENDEVICE(byte* devicename, uint frequency, int format, int buffersize);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void LPALCCAPTURESAMPLES(ALCdevice* device, void* buffer, int samples);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate byte LPALCMAKECONTEXTCURRENT(ALCcontext* context);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void LPALCSUSPENDCONTEXT(ALCcontext* context);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void LPALCCAPTURESTART(ALCdevice* device);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void LPALCCAPTURESTOP(ALCdevice* device);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void LPALCPROCESSCONTEXT(ALCcontext* context);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void LPALCDESTROYCONTEXT(ALCcontext* context);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate ALCcontext* LPALCGETCURRENTCONTEXT();

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate ALCdevice* LPALCGETCONTEXTSDEVICE(ALCcontext* context);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate byte LPALCCLOSEDEVICE(ALCdevice* device);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate byte LPALCISEXTENSIONPRESENT(ALCdevice* device, byte* extname);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate int LPALCGETENUMVALUE(ALCdevice* device, byte* enumname);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate byte* LPALCGETSTRING(ALCdevice* device, int param);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void LPALCGETINTEGERV(ALCdevice* device, int param, int size, int* values);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate byte LPALCCAPTURECLOSEDEVICE(ALCdevice* device);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate ALCcontext* LPALCCREATECONTEXT(ALCdevice* device, int* attrlist);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate ALCdevice* LPALCOPENDEVICE(byte* devicename);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate int LPALCGETERROR(ALCdevice* device);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void* LPALCGETPROCADDRESS(ALCdevice* device, byte* funcname);

#endregion

public static unsafe class ALC
{
    #region Constants
    public const int ALC_INVALID = 0x00000000;
    public const int ALC_ALL_DEVICES_SPECIFIER = 0x00001013;
    public const int ALC_DEFAULT_ALL_DEVICES_SPECIFIER = 0x00001012;
    public const int ALC_ENUMERATE_ALL_EXT = 0x00000001;
    public const int ALC_CAPTURE_SAMPLES = 0x00000312;
    public const int ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER = 0x00000311;
    public const int ALC_CAPTURE_DEVICE_SPECIFIER = 0x00000310;
    public const int ALC_EXT_CAPTURE = 0x00000001;
    public const int ALC_EXTENSIONS = 0x00001006;
    public const int ALC_DEVICE_SPECIFIER = 0x00001005;
    public const int ALC_DEFAULT_DEVICE_SPECIFIER = 0x00001004;
    public const int ALC_ALL_ATTRIBUTES = 0x00001003;
    public const int ALC_ATTRIBUTES_SIZE = 0x00001002;
    public const int ALC_MINOR_VERSION = 0x00001001;
    public const int ALC_MAJOR_VERSION = 0x00001000;
    public const int ALC_OUT_OF_MEMORY = 0x0000A005;
    public const int ALC_INVALID_VALUE = 0x0000A004;
    public const int ALC_INVALID_ENUM = 0x0000A003;
    public const int ALC_INVALID_CONTEXT = 0x0000A002;
    public const int ALC_INVALID_DEVICE = 0x0000A001;
    public const int ALC_NO_ERROR = 0x00000000;
    public const int ALC_STEREO_SOURCES = 0x00001011;
    public const int ALC_MONO_SOURCES = 0x00001010;
    public const int ALC_SYNC = 0x00001009;
    public const int ALC_REFRESH = 0x00001008;
    public const int ALC_TRUE = 0x00000001;
    public const int ALC_FALSE = 0x00000000;
    public const int ALC_VERSION_0_1 = 0x00000001;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<ALCdevice*, byte> _alcCaptureCloseDevice = null;
    internal static delegate* unmanaged<ALCdevice*, int, byte*> _alcGetString = null;
    internal static delegate* unmanaged<ALCdevice*, byte> _alcCloseDevice = null;
    internal static delegate* unmanaged<ALCcontext*> _alcGetCurrentContext = null;
    internal static delegate* unmanaged<ALCdevice*, void> _alcCaptureStop = null;
    internal static delegate* unmanaged<ALCdevice*, void> _alcCaptureStart = null;
    internal static delegate* unmanaged<ALCdevice*, int, int, int*, void> _alcGetIntegerv = null;
    internal static delegate* unmanaged<byte*, ALCdevice*> _alcOpenDevice = null;
    internal static delegate* unmanaged<ALCcontext*, byte> _alcMakeContextCurrent = null;
    internal static delegate* unmanaged<ALCdevice*, void*, int, void> _alcCaptureSamples = null;
    internal static delegate* unmanaged<ALCdevice*, int> _alcGetError = null;
    internal static delegate* unmanaged<ALCcontext*, void> _alcDestroyContext = null;
    internal static delegate* unmanaged<ALCcontext*, void> _alcProcessContext = null;
    internal static delegate* unmanaged<byte*, uint, int, int, ALCdevice*> _alcCaptureOpenDevice = null;
    internal static delegate* unmanaged<ALCdevice*, byte*, int> _alcGetEnumValue = null;
    internal static delegate* unmanaged<ALCdevice*, byte*, byte> _alcIsExtensionPresent = null;
    internal static delegate* unmanaged<ALCcontext*, void> _alcSuspendContext = null;
    internal static delegate* unmanaged<ALCdevice*, int*, ALCcontext*> _alcCreateContext = null;

    internal static void Load()
    {
        _alcCaptureCloseDevice = (delegate* unmanaged<ALCdevice*, byte>)QuickGL.GetALProcAddress("alcCaptureCloseDevice");
        _alcGetString = (delegate* unmanaged<ALCdevice*, int, byte*>)QuickGL.GetALProcAddress("alcGetString");
        _alcCloseDevice = (delegate* unmanaged<ALCdevice*, byte>)QuickGL.GetALProcAddress("alcCloseDevice");
        _alcGetCurrentContext = (delegate* unmanaged<ALCcontext*>)QuickGL.GetALProcAddress("alcGetCurrentContext");
        _alcCaptureStop = (delegate* unmanaged<ALCdevice*, void>)QuickGL.GetALProcAddress("alcCaptureStop");
        _alcCaptureStart = (delegate* unmanaged<ALCdevice*, void>)QuickGL.GetALProcAddress("alcCaptureStart");
        _alcGetIntegerv = (delegate* unmanaged<ALCdevice*, int, int, int*, void>)QuickGL.GetALProcAddress("alcGetIntegerv");
        _alcOpenDevice = (delegate* unmanaged<byte*, ALCdevice*>)QuickGL.GetALProcAddress("alcOpenDevice");
        _alcMakeContextCurrent = (delegate* unmanaged<ALCcontext*, byte>)QuickGL.GetALProcAddress("alcMakeContextCurrent");
        _alcCaptureSamples = (delegate* unmanaged<ALCdevice*, void*, int, void>)QuickGL.GetALProcAddress("alcCaptureSamples");
        _alcGetError = (delegate* unmanaged<ALCdevice*, int>)QuickGL.GetALProcAddress("alcGetError");
        _alcDestroyContext = (delegate* unmanaged<ALCcontext*, void>)QuickGL.GetALProcAddress("alcDestroyContext");
        _alcProcessContext = (delegate* unmanaged<ALCcontext*, void>)QuickGL.GetALProcAddress("alcProcessContext");
        _alcCaptureOpenDevice = (delegate* unmanaged<byte*, uint, int, int, ALCdevice*>)QuickGL.GetALProcAddress("alcCaptureOpenDevice");
        _alcGetEnumValue = (delegate* unmanaged<ALCdevice*, byte*, int>)QuickGL.GetALProcAddress("alcGetEnumValue");
        _alcIsExtensionPresent = (delegate* unmanaged<ALCdevice*, byte*, byte>)QuickGL.GetALProcAddress("alcIsExtensionPresent");
        _alcSuspendContext = (delegate* unmanaged<ALCcontext*, void>)QuickGL.GetALProcAddress("alcSuspendContext");
        _alcCreateContext = (delegate* unmanaged<ALCdevice*, int*, ALCcontext*>)QuickGL.GetALProcAddress("alcCreateContext");
    }

    internal static void Unload()
    {
        _alcCaptureCloseDevice = null;
        _alcGetString = null;
        _alcCloseDevice = null;
        _alcGetCurrentContext = null;
        _alcCaptureStop = null;
        _alcCaptureStart = null;
        _alcGetIntegerv = null;
        _alcOpenDevice = null;
        _alcMakeContextCurrent = null;
        _alcCaptureSamples = null;
        _alcGetError = null;
        _alcDestroyContext = null;
        _alcProcessContext = null;
        _alcCaptureOpenDevice = null;
        _alcGetEnumValue = null;
        _alcIsExtensionPresent = null;
        _alcSuspendContext = null;
        _alcCreateContext = null;
    }
    #endregion

    #region Function wrappers
    public static byte alcCaptureCloseDevice(ALCdevice* device) { QGLFeature.VerifyFunc((nint)_alcCaptureCloseDevice); return _alcCaptureCloseDevice(device); }
    public static byte* alcGetString(ALCdevice* device, int param) { QGLFeature.VerifyFunc((nint)_alcGetString); return _alcGetString(device, param); }
    public static byte alcCloseDevice(ALCdevice* device) { QGLFeature.VerifyFunc((nint)_alcCloseDevice); return _alcCloseDevice(device); }
    public static ALCcontext* alcGetCurrentContext() { QGLFeature.VerifyFunc((nint)_alcGetCurrentContext); return _alcGetCurrentContext(); }
    public static void alcCaptureStop(ALCdevice* device) { QGLFeature.VerifyFunc((nint)_alcCaptureStop); _alcCaptureStop(device); }
    public static void alcCaptureStart(ALCdevice* device) { QGLFeature.VerifyFunc((nint)_alcCaptureStart); _alcCaptureStart(device); }
    public static void alcGetIntegerv(ALCdevice* device, int param, int size, int* values) { QGLFeature.VerifyFunc((nint)_alcGetIntegerv); _alcGetIntegerv(device, param, size, values); }
    public static ALCdevice* alcOpenDevice(byte* devicename) { QGLFeature.VerifyFunc((nint)_alcOpenDevice); return _alcOpenDevice(devicename); }
    public static byte alcMakeContextCurrent(ALCcontext* context) { QGLFeature.VerifyFunc((nint)_alcMakeContextCurrent); return _alcMakeContextCurrent(context); }
    public static void alcCaptureSamples(ALCdevice* device, void* buffer, int samples) { QGLFeature.VerifyFunc((nint)_alcCaptureSamples); _alcCaptureSamples(device, buffer, samples); }
    public static int alcGetError(ALCdevice* device) { QGLFeature.VerifyFunc((nint)_alcGetError); return _alcGetError(device); }
    public static void alcDestroyContext(ALCcontext* context) { QGLFeature.VerifyFunc((nint)_alcDestroyContext); _alcDestroyContext(context); }
    public static void alcProcessContext(ALCcontext* context) { QGLFeature.VerifyFunc((nint)_alcProcessContext); _alcProcessContext(context); }
    public static ALCdevice* alcCaptureOpenDevice(byte* devicename, uint frequency, int format, int buffersize) { QGLFeature.VerifyFunc((nint)_alcCaptureOpenDevice); return _alcCaptureOpenDevice(devicename, frequency, format, buffersize); }
    public static int alcGetEnumValue(ALCdevice* device, byte* enumname) { QGLFeature.VerifyFunc((nint)_alcGetEnumValue); return _alcGetEnumValue(device, enumname); }
    public static byte alcIsExtensionPresent(ALCdevice* device, byte* extname) { QGLFeature.VerifyFunc((nint)_alcIsExtensionPresent); return _alcIsExtensionPresent(device, extname); }
    public static void alcSuspendContext(ALCcontext* context) { QGLFeature.VerifyFunc((nint)_alcSuspendContext); _alcSuspendContext(context); }
    public static ALCcontext* alcCreateContext(ALCdevice* device, int* attrlist) { QGLFeature.VerifyFunc((nint)_alcCreateContext); return _alcCreateContext(device, attrlist); }
    #endregion
}
