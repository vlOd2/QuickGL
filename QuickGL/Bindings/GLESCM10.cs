// MIT License
// 
// Copyright (c) 2025 vlOd
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using QuickGLNS.Internal;

// Bindings generated at 2025-01-04 01:08:51.547386
namespace QuickGLNS.Bindings
{
    [GLFeature]
    public static unsafe class GLESCM10
    {
        #region Enums
        public const int GL_VERSION_ES_CL_1_0 = 0x1;
        public const int GL_VERSION_ES_CM_1_1 = 0x1;
        public const int GL_VERSION_ES_CL_1_1 = 0x1;
        public const int GL_DEPTH_BUFFER_BIT = 0x100;
        public const int GL_STENCIL_BUFFER_BIT = 0x400;
        public const int GL_COLOR_BUFFER_BIT = 0x4000;
        public const int GL_FALSE = 0x0;
        public const int GL_TRUE = 0x1;
        public const int GL_POINTS = 0x0;
        public const int GL_LINES = 0x1;
        public const int GL_LINE_LOOP = 0x2;
        public const int GL_LINE_STRIP = 0x3;
        public const int GL_TRIANGLES = 0x4;
        public const int GL_TRIANGLE_STRIP = 0x5;
        public const int GL_TRIANGLE_FAN = 0x6;
        public const int GL_NEVER = 0x200;
        public const int GL_LESS = 0x201;
        public const int GL_EQUAL = 0x202;
        public const int GL_LEQUAL = 0x203;
        public const int GL_GREATER = 0x204;
        public const int GL_NOTEQUAL = 0x205;
        public const int GL_GEQUAL = 0x206;
        public const int GL_ALWAYS = 0x207;
        public const int GL_ZERO = 0x0;
        public const int GL_ONE = 0x1;
        public const int GL_SRC_COLOR = 0x300;
        public const int GL_ONE_MINUS_SRC_COLOR = 0x301;
        public const int GL_SRC_ALPHA = 0x302;
        public const int GL_ONE_MINUS_SRC_ALPHA = 0x303;
        public const int GL_DST_ALPHA = 0x304;
        public const int GL_ONE_MINUS_DST_ALPHA = 0x305;
        public const int GL_DST_COLOR = 0x306;
        public const int GL_ONE_MINUS_DST_COLOR = 0x307;
        public const int GL_SRC_ALPHA_SATURATE = 0x308;
        public const int GL_CLIP_PLANE0 = 0x3000;
        public const int GL_CLIP_PLANE1 = 0x3001;
        public const int GL_CLIP_PLANE2 = 0x3002;
        public const int GL_CLIP_PLANE3 = 0x3003;
        public const int GL_CLIP_PLANE4 = 0x3004;
        public const int GL_CLIP_PLANE5 = 0x3005;
        public const int GL_FRONT = 0x404;
        public const int GL_BACK = 0x405;
        public const int GL_FRONT_AND_BACK = 0x408;
        public const int GL_FOG = 0xB60;
        public const int GL_LIGHTING = 0xB50;
        public const int GL_TEXTURE_2D = 0xDE1;
        public const int GL_CULL_FACE = 0xB44;
        public const int GL_ALPHA_TEST = 0xBC0;
        public const int GL_BLEND = 0xBE2;
        public const int GL_COLOR_LOGIC_OP = 0xBF2;
        public const int GL_DITHER = 0xBD0;
        public const int GL_STENCIL_TEST = 0xB90;
        public const int GL_DEPTH_TEST = 0xB71;
        public const int GL_POINT_SMOOTH = 0xB10;
        public const int GL_LINE_SMOOTH = 0xB20;
        public const int GL_SCISSOR_TEST = 0xC11;
        public const int GL_COLOR_MATERIAL = 0xB57;
        public const int GL_NORMALIZE = 0xBA1;
        public const int GL_RESCALE_NORMAL = 0x803A;
        public const int GL_VERTEX_ARRAY = 0x8074;
        public const int GL_NORMAL_ARRAY = 0x8075;
        public const int GL_COLOR_ARRAY = 0x8076;
        public const int GL_TEXTURE_COORD_ARRAY = 0x8078;
        public const int GL_MULTISAMPLE = 0x809D;
        public const int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public const int GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        public const int GL_SAMPLE_COVERAGE = 0x80A0;
        public const int GL_NO_ERROR = 0x0;
        public const int GL_INVALID_ENUM = 0x500;
        public const int GL_INVALID_VALUE = 0x501;
        public const int GL_INVALID_OPERATION = 0x502;
        public const int GL_STACK_OVERFLOW = 0x503;
        public const int GL_STACK_UNDERFLOW = 0x504;
        public const int GL_OUT_OF_MEMORY = 0x505;
        public const int GL_EXP = 0x800;
        public const int GL_EXP2 = 0x801;
        public const int GL_FOG_DENSITY = 0xB62;
        public const int GL_FOG_START = 0xB63;
        public const int GL_FOG_END = 0xB64;
        public const int GL_FOG_MODE = 0xB65;
        public const int GL_FOG_COLOR = 0xB66;
        public const int GL_CW = 0x900;
        public const int GL_CCW = 0x901;
        public const int GL_CURRENT_COLOR = 0xB00;
        public const int GL_CURRENT_NORMAL = 0xB02;
        public const int GL_CURRENT_TEXTURE_COORDS = 0xB03;
        public const int GL_POINT_SIZE = 0xB11;
        public const int GL_POINT_SIZE_MIN = 0x8126;
        public const int GL_POINT_SIZE_MAX = 0x8127;
        public const int GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public const int GL_POINT_DISTANCE_ATTENUATION = 0x8129;
        public const int GL_SMOOTH_POINT_SIZE_RANGE = 0xB12;
        public const int GL_LINE_WIDTH = 0xB21;
        public const int GL_SMOOTH_LINE_WIDTH_RANGE = 0xB22;
        public const int GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        public const int GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public const int GL_CULL_FACE_MODE = 0xB45;
        public const int GL_FRONT_FACE = 0xB46;
        public const int GL_SHADE_MODEL = 0xB54;
        public const int GL_DEPTH_RANGE = 0xB70;
        public const int GL_DEPTH_WRITEMASK = 0xB72;
        public const int GL_DEPTH_CLEAR_VALUE = 0xB73;
        public const int GL_DEPTH_FUNC = 0xB74;
        public const int GL_STENCIL_CLEAR_VALUE = 0xB91;
        public const int GL_STENCIL_FUNC = 0xB92;
        public const int GL_STENCIL_VALUE_MASK = 0xB93;
        public const int GL_STENCIL_FAIL = 0xB94;
        public const int GL_STENCIL_PASS_DEPTH_FAIL = 0xB95;
        public const int GL_STENCIL_PASS_DEPTH_PASS = 0xB96;
        public const int GL_STENCIL_REF = 0xB97;
        public const int GL_STENCIL_WRITEMASK = 0xB98;
        public const int GL_MATRIX_MODE = 0xBA0;
        public const int GL_VIEWPORT = 0xBA2;
        public const int GL_MODELVIEW_STACK_DEPTH = 0xBA3;
        public const int GL_PROJECTION_STACK_DEPTH = 0xBA4;
        public const int GL_TEXTURE_STACK_DEPTH = 0xBA5;
        public const int GL_MODELVIEW_MATRIX = 0xBA6;
        public const int GL_PROJECTION_MATRIX = 0xBA7;
        public const int GL_TEXTURE_MATRIX = 0xBA8;
        public const int GL_ALPHA_TEST_FUNC = 0xBC1;
        public const int GL_ALPHA_TEST_REF = 0xBC2;
        public const int GL_BLEND_DST = 0xBE0;
        public const int GL_BLEND_SRC = 0xBE1;
        public const int GL_LOGIC_OP_MODE = 0xBF0;
        public const int GL_SCISSOR_BOX = 0xC10;
        public const int GL_COLOR_CLEAR_VALUE = 0xC22;
        public const int GL_COLOR_WRITEMASK = 0xC23;
        public const int GL_MAX_LIGHTS = 0xD31;
        public const int GL_MAX_CLIP_PLANES = 0xD32;
        public const int GL_MAX_TEXTURE_SIZE = 0xD33;
        public const int GL_MAX_MODELVIEW_STACK_DEPTH = 0xD36;
        public const int GL_MAX_PROJECTION_STACK_DEPTH = 0xD38;
        public const int GL_MAX_TEXTURE_STACK_DEPTH = 0xD39;
        public const int GL_MAX_VIEWPORT_DIMS = 0xD3A;
        public const int GL_MAX_TEXTURE_UNITS = 0x84E2;
        public const int GL_SUBPIXEL_BITS = 0xD50;
        public const int GL_RED_BITS = 0xD52;
        public const int GL_GREEN_BITS = 0xD53;
        public const int GL_BLUE_BITS = 0xD54;
        public const int GL_ALPHA_BITS = 0xD55;
        public const int GL_DEPTH_BITS = 0xD56;
        public const int GL_STENCIL_BITS = 0xD57;
        public const int GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public const int GL_POLYGON_OFFSET_FILL = 0x8037;
        public const int GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public const int GL_TEXTURE_BINDING_2D = 0x8069;
        public const int GL_VERTEX_ARRAY_SIZE = 0x807A;
        public const int GL_VERTEX_ARRAY_TYPE = 0x807B;
        public const int GL_VERTEX_ARRAY_STRIDE = 0x807C;
        public const int GL_NORMAL_ARRAY_TYPE = 0x807E;
        public const int GL_NORMAL_ARRAY_STRIDE = 0x807F;
        public const int GL_COLOR_ARRAY_SIZE = 0x8081;
        public const int GL_COLOR_ARRAY_TYPE = 0x8082;
        public const int GL_COLOR_ARRAY_STRIDE = 0x8083;
        public const int GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        public const int GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        public const int GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        public const int GL_VERTEX_ARRAY_POINTER = 0x808E;
        public const int GL_NORMAL_ARRAY_POINTER = 0x808F;
        public const int GL_COLOR_ARRAY_POINTER = 0x8090;
        public const int GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        public const int GL_SAMPLE_BUFFERS = 0x80A8;
        public const int GL_SAMPLES = 0x80A9;
        public const int GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public const int GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public const int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public const int GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public const int GL_DONT_CARE = 0x1100;
        public const int GL_FASTEST = 0x1101;
        public const int GL_NICEST = 0x1102;
        public const int GL_PERSPECTIVE_CORRECTION_HINT = 0xC50;
        public const int GL_POINT_SMOOTH_HINT = 0xC51;
        public const int GL_LINE_SMOOTH_HINT = 0xC52;
        public const int GL_FOG_HINT = 0xC54;
        public const int GL_GENERATE_MIPMAP_HINT = 0x8192;
        public const int GL_LIGHT_MODEL_AMBIENT = 0xB53;
        public const int GL_LIGHT_MODEL_TWO_SIDE = 0xB52;
        public const int GL_AMBIENT = 0x1200;
        public const int GL_DIFFUSE = 0x1201;
        public const int GL_SPECULAR = 0x1202;
        public const int GL_POSITION = 0x1203;
        public const int GL_SPOT_DIRECTION = 0x1204;
        public const int GL_SPOT_EXPONENT = 0x1205;
        public const int GL_SPOT_CUTOFF = 0x1206;
        public const int GL_CONSTANT_ATTENUATION = 0x1207;
        public const int GL_LINEAR_ATTENUATION = 0x1208;
        public const int GL_QUADRATIC_ATTENUATION = 0x1209;
        public const int GL_BYTE = 0x1400;
        public const int GL_UNSIGNED_BYTE = 0x1401;
        public const int GL_SHORT = 0x1402;
        public const int GL_UNSIGNED_SHORT = 0x1403;
        public const int GL_FLOAT = 0x1406;
        public const int GL_FIXED = 0x140C;
        public const int GL_CLEAR = 0x1500;
        public const int GL_AND = 0x1501;
        public const int GL_AND_REVERSE = 0x1502;
        public const int GL_COPY = 0x1503;
        public const int GL_AND_INVERTED = 0x1504;
        public const int GL_NOOP = 0x1505;
        public const int GL_XOR = 0x1506;
        public const int GL_OR = 0x1507;
        public const int GL_NOR = 0x1508;
        public const int GL_EQUIV = 0x1509;
        public const int GL_INVERT = 0x150A;
        public const int GL_OR_REVERSE = 0x150B;
        public const int GL_COPY_INVERTED = 0x150C;
        public const int GL_OR_INVERTED = 0x150D;
        public const int GL_NAND = 0x150E;
        public const int GL_SET = 0x150F;
        public const int GL_EMISSION = 0x1600;
        public const int GL_SHININESS = 0x1601;
        public const int GL_AMBIENT_AND_DIFFUSE = 0x1602;
        public const int GL_MODELVIEW = 0x1700;
        public const int GL_PROJECTION = 0x1701;
        public const int GL_TEXTURE = 0x1702;
        public const int GL_ALPHA = 0x1906;
        public const int GL_RGB = 0x1907;
        public const int GL_RGBA = 0x1908;
        public const int GL_LUMINANCE = 0x1909;
        public const int GL_LUMINANCE_ALPHA = 0x190A;
        public const int GL_UNPACK_ALIGNMENT = 0xCF5;
        public const int GL_PACK_ALIGNMENT = 0xD05;
        public const int GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public const int GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public const int GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public const int GL_FLAT = 0x1D00;
        public const int GL_SMOOTH = 0x1D01;
        public const int GL_KEEP = 0x1E00;
        public const int GL_REPLACE = 0x1E01;
        public const int GL_INCR = 0x1E02;
        public const int GL_DECR = 0x1E03;
        public const int GL_VENDOR = 0x1F00;
        public const int GL_RENDERER = 0x1F01;
        public const int GL_VERSION = 0x1F02;
        public const int GL_EXTENSIONS = 0x1F03;
        public const int GL_MODULATE = 0x2100;
        public const int GL_DECAL = 0x2101;
        public const int GL_ADD = 0x104;
        public const int GL_TEXTURE_ENV_MODE = 0x2200;
        public const int GL_TEXTURE_ENV_COLOR = 0x2201;
        public const int GL_TEXTURE_ENV = 0x2300;
        public const int GL_NEAREST = 0x2600;
        public const int GL_LINEAR = 0x2601;
        public const int GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public const int GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public const int GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public const int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public const int GL_TEXTURE_MAG_FILTER = 0x2800;
        public const int GL_TEXTURE_MIN_FILTER = 0x2801;
        public const int GL_TEXTURE_WRAP_S = 0x2802;
        public const int GL_TEXTURE_WRAP_T = 0x2803;
        public const int GL_GENERATE_MIPMAP = 0x8191;
        public const int GL_TEXTURE0 = 0x84C0;
        public const int GL_TEXTURE1 = 0x84C1;
        public const int GL_TEXTURE2 = 0x84C2;
        public const int GL_TEXTURE3 = 0x84C3;
        public const int GL_TEXTURE4 = 0x84C4;
        public const int GL_TEXTURE5 = 0x84C5;
        public const int GL_TEXTURE6 = 0x84C6;
        public const int GL_TEXTURE7 = 0x84C7;
        public const int GL_TEXTURE8 = 0x84C8;
        public const int GL_TEXTURE9 = 0x84C9;
        public const int GL_TEXTURE10 = 0x84CA;
        public const int GL_TEXTURE11 = 0x84CB;
        public const int GL_TEXTURE12 = 0x84CC;
        public const int GL_TEXTURE13 = 0x84CD;
        public const int GL_TEXTURE14 = 0x84CE;
        public const int GL_TEXTURE15 = 0x84CF;
        public const int GL_TEXTURE16 = 0x84D0;
        public const int GL_TEXTURE17 = 0x84D1;
        public const int GL_TEXTURE18 = 0x84D2;
        public const int GL_TEXTURE19 = 0x84D3;
        public const int GL_TEXTURE20 = 0x84D4;
        public const int GL_TEXTURE21 = 0x84D5;
        public const int GL_TEXTURE22 = 0x84D6;
        public const int GL_TEXTURE23 = 0x84D7;
        public const int GL_TEXTURE24 = 0x84D8;
        public const int GL_TEXTURE25 = 0x84D9;
        public const int GL_TEXTURE26 = 0x84DA;
        public const int GL_TEXTURE27 = 0x84DB;
        public const int GL_TEXTURE28 = 0x84DC;
        public const int GL_TEXTURE29 = 0x84DD;
        public const int GL_TEXTURE30 = 0x84DE;
        public const int GL_TEXTURE31 = 0x84DF;
        public const int GL_ACTIVE_TEXTURE = 0x84E0;
        public const int GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
        public const int GL_REPEAT = 0x2901;
        public const int GL_CLAMP_TO_EDGE = 0x812F;
        public const int GL_LIGHT0 = 0x4000;
        public const int GL_LIGHT1 = 0x4001;
        public const int GL_LIGHT2 = 0x4002;
        public const int GL_LIGHT3 = 0x4003;
        public const int GL_LIGHT4 = 0x4004;
        public const int GL_LIGHT5 = 0x4005;
        public const int GL_LIGHT6 = 0x4006;
        public const int GL_LIGHT7 = 0x4007;
        public const int GL_ARRAY_BUFFER = 0x8892;
        public const int GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public const int GL_ARRAY_BUFFER_BINDING = 0x8894;
        public const int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public const int GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
        public const int GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
        public const int GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
        public const int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
        public const int GL_STATIC_DRAW = 0x88E4;
        public const int GL_DYNAMIC_DRAW = 0x88E8;
        public const int GL_BUFFER_SIZE = 0x8764;
        public const int GL_BUFFER_USAGE = 0x8765;
        public const int GL_SUBTRACT = 0x84E7;
        public const int GL_COMBINE = 0x8570;
        public const int GL_COMBINE_RGB = 0x8571;
        public const int GL_COMBINE_ALPHA = 0x8572;
        public const int GL_RGB_SCALE = 0x8573;
        public const int GL_ADD_SIGNED = 0x8574;
        public const int GL_INTERPOLATE = 0x8575;
        public const int GL_CONSTANT = 0x8576;
        public const int GL_PRIMARY_COLOR = 0x8577;
        public const int GL_PREVIOUS = 0x8578;
        public const int GL_OPERAND0_RGB = 0x8590;
        public const int GL_OPERAND1_RGB = 0x8591;
        public const int GL_OPERAND2_RGB = 0x8592;
        public const int GL_OPERAND0_ALPHA = 0x8598;
        public const int GL_OPERAND1_ALPHA = 0x8599;
        public const int GL_OPERAND2_ALPHA = 0x859A;
        public const int GL_ALPHA_SCALE = 0xD1C;
        public const int GL_SRC0_RGB = 0x8580;
        public const int GL_SRC1_RGB = 0x8581;
        public const int GL_SRC2_RGB = 0x8582;
        public const int GL_SRC0_ALPHA = 0x8588;
        public const int GL_SRC1_ALPHA = 0x8589;
        public const int GL_SRC2_ALPHA = 0x858A;
        public const int GL_DOT3_RGB = 0x86AE;
        public const int GL_DOT3_RGBA = 0x86AF;
        #endregion
        
        #region Commands
        [QGLNativeAPI("glAlphaFunc")] public static delegate* unmanaged<uint, float, void> glAlphaFunc;
        [QGLNativeAPI("glClearColor")] public static delegate* unmanaged<float, float, float, float, void> glClearColor;
        [QGLNativeAPI("glClearDepthf")] public static delegate* unmanaged<float, void> glClearDepthf;
        [QGLNativeAPI("glClipPlanef")] public static delegate* unmanaged<uint, float*, void> glClipPlanef;
        [QGLNativeAPI("glColor4f")] public static delegate* unmanaged<float, float, float, float, void> glColor4f;
        [QGLNativeAPI("glDepthRangef")] public static delegate* unmanaged<float, float, void> glDepthRangef;
        [QGLNativeAPI("glFogf")] public static delegate* unmanaged<uint, float, void> glFogf;
        [QGLNativeAPI("glFogfv")] public static delegate* unmanaged<uint, float*, void> glFogfv;
        [QGLNativeAPI("glFrustumf")] public static delegate* unmanaged<float, float, float, float, float, float, void> glFrustumf;
        [QGLNativeAPI("glGetClipPlanef")] public static delegate* unmanaged<uint, float*, void> glGetClipPlanef;
        [QGLNativeAPI("glGetFloatv")] public static delegate* unmanaged<uint, float*, void> glGetFloatv;
        [QGLNativeAPI("glGetLightfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetLightfv;
        [QGLNativeAPI("glGetMaterialfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetMaterialfv;
        [QGLNativeAPI("glGetTexEnvfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetTexEnvfv;
        [QGLNativeAPI("glGetTexParameterfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetTexParameterfv;
        [QGLNativeAPI("glLightModelf")] public static delegate* unmanaged<uint, float, void> glLightModelf;
        [QGLNativeAPI("glLightModelfv")] public static delegate* unmanaged<uint, float*, void> glLightModelfv;
        [QGLNativeAPI("glLightf")] public static delegate* unmanaged<uint, uint, float, void> glLightf;
        [QGLNativeAPI("glLightfv")] public static delegate* unmanaged<uint, uint, float*, void> glLightfv;
        [QGLNativeAPI("glLineWidth")] public static delegate* unmanaged<float, void> glLineWidth;
        [QGLNativeAPI("glLoadMatrixf")] public static delegate* unmanaged<float*, void> glLoadMatrixf;
        [QGLNativeAPI("glMaterialf")] public static delegate* unmanaged<uint, uint, float, void> glMaterialf;
        [QGLNativeAPI("glMaterialfv")] public static delegate* unmanaged<uint, uint, float*, void> glMaterialfv;
        [QGLNativeAPI("glMultMatrixf")] public static delegate* unmanaged<float*, void> glMultMatrixf;
        [QGLNativeAPI("glMultiTexCoord4f")] public static delegate* unmanaged<uint, float, float, float, float, void> glMultiTexCoord4f;
        [QGLNativeAPI("glNormal3f")] public static delegate* unmanaged<float, float, float, void> glNormal3f;
        [QGLNativeAPI("glOrthof")] public static delegate* unmanaged<float, float, float, float, float, float, void> glOrthof;
        [QGLNativeAPI("glPointParameterf")] public static delegate* unmanaged<uint, float, void> glPointParameterf;
        [QGLNativeAPI("glPointParameterfv")] public static delegate* unmanaged<uint, float*, void> glPointParameterfv;
        [QGLNativeAPI("glPointSize")] public static delegate* unmanaged<float, void> glPointSize;
        [QGLNativeAPI("glPolygonOffset")] public static delegate* unmanaged<float, float, void> glPolygonOffset;
        [QGLNativeAPI("glRotatef")] public static delegate* unmanaged<float, float, float, float, void> glRotatef;
        [QGLNativeAPI("glScalef")] public static delegate* unmanaged<float, float, float, void> glScalef;
        [QGLNativeAPI("glTexEnvf")] public static delegate* unmanaged<uint, uint, float, void> glTexEnvf;
        [QGLNativeAPI("glTexEnvfv")] public static delegate* unmanaged<uint, uint, float*, void> glTexEnvfv;
        [QGLNativeAPI("glTexParameterf")] public static delegate* unmanaged<uint, uint, float, void> glTexParameterf;
        [QGLNativeAPI("glTexParameterfv")] public static delegate* unmanaged<uint, uint, float*, void> glTexParameterfv;
        [QGLNativeAPI("glTranslatef")] public static delegate* unmanaged<float, float, float, void> glTranslatef;
        [QGLNativeAPI("glActiveTexture")] public static delegate* unmanaged<uint, void> glActiveTexture;
        [QGLNativeAPI("glAlphaFuncx")] public static delegate* unmanaged<uint, int, void> glAlphaFuncx;
        [QGLNativeAPI("glBindBuffer")] public static delegate* unmanaged<uint, uint, void> glBindBuffer;
        [QGLNativeAPI("glBindTexture")] public static delegate* unmanaged<uint, uint, void> glBindTexture;
        [QGLNativeAPI("glBlendFunc")] public static delegate* unmanaged<uint, uint, void> glBlendFunc;
        [QGLNativeAPI("glBufferData")] public static delegate* unmanaged<uint, nint, void*, uint, void> glBufferData;
        [QGLNativeAPI("glBufferSubData")] public static delegate* unmanaged<uint, nint, nint, void*, void> glBufferSubData;
        [QGLNativeAPI("glClear")] public static delegate* unmanaged<uint, void> glClear;
        [QGLNativeAPI("glClearColorx")] public static delegate* unmanaged<int, int, int, int, void> glClearColorx;
        [QGLNativeAPI("glClearDepthx")] public static delegate* unmanaged<int, void> glClearDepthx;
        [QGLNativeAPI("glClearStencil")] public static delegate* unmanaged<int, void> glClearStencil;
        [QGLNativeAPI("glClientActiveTexture")] public static delegate* unmanaged<uint, void> glClientActiveTexture;
        [QGLNativeAPI("glClipPlanex")] public static delegate* unmanaged<uint, int*, void> glClipPlanex;
        [QGLNativeAPI("glColor4ub")] public static delegate* unmanaged<byte, byte, byte, byte, void> glColor4ub;
        [QGLNativeAPI("glColor4x")] public static delegate* unmanaged<int, int, int, int, void> glColor4x;
        [QGLNativeAPI("glColorMask")] public static delegate* unmanaged<bool, bool, bool, bool, void> glColorMask;
        [QGLNativeAPI("glColorPointer")] public static delegate* unmanaged<int, uint, int, void*, void> glColorPointer;
        [QGLNativeAPI("glCompressedTexImage2D")] public static delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void> glCompressedTexImage2D;
        [QGLNativeAPI("glCompressedTexSubImage2D")] public static delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void> glCompressedTexSubImage2D;
        [QGLNativeAPI("glCopyTexImage2D")] public static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void> glCopyTexImage2D;
        [QGLNativeAPI("glCopyTexSubImage2D")] public static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> glCopyTexSubImage2D;
        [QGLNativeAPI("glCullFace")] public static delegate* unmanaged<uint, void> glCullFace;
        [QGLNativeAPI("glDeleteBuffers")] public static delegate* unmanaged<int, uint*, void> glDeleteBuffers;
        [QGLNativeAPI("glDeleteTextures")] public static delegate* unmanaged<int, uint*, void> glDeleteTextures;
        [QGLNativeAPI("glDepthFunc")] public static delegate* unmanaged<uint, void> glDepthFunc;
        [QGLNativeAPI("glDepthMask")] public static delegate* unmanaged<bool, void> glDepthMask;
        [QGLNativeAPI("glDepthRangex")] public static delegate* unmanaged<int, int, void> glDepthRangex;
        [QGLNativeAPI("glDisable")] public static delegate* unmanaged<uint, void> glDisable;
        [QGLNativeAPI("glDisableClientState")] public static delegate* unmanaged<uint, void> glDisableClientState;
        [QGLNativeAPI("glDrawArrays")] public static delegate* unmanaged<uint, int, int, void> glDrawArrays;
        [QGLNativeAPI("glDrawElements")] public static delegate* unmanaged<uint, int, uint, void*, void> glDrawElements;
        [QGLNativeAPI("glEnable")] public static delegate* unmanaged<uint, void> glEnable;
        [QGLNativeAPI("glEnableClientState")] public static delegate* unmanaged<uint, void> glEnableClientState;
        [QGLNativeAPI("glFinish")] public static delegate* unmanaged<void> glFinish;
        [QGLNativeAPI("glFlush")] public static delegate* unmanaged<void> glFlush;
        [QGLNativeAPI("glFogx")] public static delegate* unmanaged<uint, int, void> glFogx;
        [QGLNativeAPI("glFogxv")] public static delegate* unmanaged<uint, int*, void> glFogxv;
        [QGLNativeAPI("glFrontFace")] public static delegate* unmanaged<uint, void> glFrontFace;
        [QGLNativeAPI("glFrustumx")] public static delegate* unmanaged<int, int, int, int, int, int, void> glFrustumx;
        [QGLNativeAPI("glGetBooleanv")] public static delegate* unmanaged<uint, bool*, void> glGetBooleanv;
        [QGLNativeAPI("glGetBufferParameteriv")] public static delegate* unmanaged<uint, uint, int*, void> glGetBufferParameteriv;
        [QGLNativeAPI("glGetClipPlanex")] public static delegate* unmanaged<uint, int*, void> glGetClipPlanex;
        [QGLNativeAPI("glGenBuffers")] public static delegate* unmanaged<int, uint*, void> glGenBuffers;
        [QGLNativeAPI("glGenTextures")] public static delegate* unmanaged<int, uint*, void> glGenTextures;
        [QGLNativeAPI("glGetError")] public static delegate* unmanaged<uint> glGetError;
        [QGLNativeAPI("glGetFixedv")] public static delegate* unmanaged<uint, int*, void> glGetFixedv;
        [QGLNativeAPI("glGetIntegerv")] public static delegate* unmanaged<uint, int*, void> glGetIntegerv;
        [QGLNativeAPI("glGetLightxv")] public static delegate* unmanaged<uint, uint, int*, void> glGetLightxv;
        [QGLNativeAPI("glGetMaterialxv")] public static delegate* unmanaged<uint, uint, int*, void> glGetMaterialxv;
        [QGLNativeAPI("glGetPointerv")] public static delegate* unmanaged<uint, void**, void> glGetPointerv;
        [QGLNativeAPI("glGetString")] public static delegate* unmanaged<uint, byte*> glGetString;
        [QGLNativeAPI("glGetTexEnviv")] public static delegate* unmanaged<uint, uint, int*, void> glGetTexEnviv;
        [QGLNativeAPI("glGetTexEnvxv")] public static delegate* unmanaged<uint, uint, int*, void> glGetTexEnvxv;
        [QGLNativeAPI("glGetTexParameteriv")] public static delegate* unmanaged<uint, uint, int*, void> glGetTexParameteriv;
        [QGLNativeAPI("glGetTexParameterxv")] public static delegate* unmanaged<uint, uint, int*, void> glGetTexParameterxv;
        [QGLNativeAPI("glHint")] public static delegate* unmanaged<uint, uint, void> glHint;
        [QGLNativeAPI("glIsBuffer")] public static delegate* unmanaged<uint, bool> glIsBuffer;
        [QGLNativeAPI("glIsEnabled")] public static delegate* unmanaged<uint, bool> glIsEnabled;
        [QGLNativeAPI("glIsTexture")] public static delegate* unmanaged<uint, bool> glIsTexture;
        [QGLNativeAPI("glLightModelx")] public static delegate* unmanaged<uint, int, void> glLightModelx;
        [QGLNativeAPI("glLightModelxv")] public static delegate* unmanaged<uint, int*, void> glLightModelxv;
        [QGLNativeAPI("glLightx")] public static delegate* unmanaged<uint, uint, int, void> glLightx;
        [QGLNativeAPI("glLightxv")] public static delegate* unmanaged<uint, uint, int*, void> glLightxv;
        [QGLNativeAPI("glLineWidthx")] public static delegate* unmanaged<int, void> glLineWidthx;
        [QGLNativeAPI("glLoadIdentity")] public static delegate* unmanaged<void> glLoadIdentity;
        [QGLNativeAPI("glLoadMatrixx")] public static delegate* unmanaged<int*, void> glLoadMatrixx;
        [QGLNativeAPI("glLogicOp")] public static delegate* unmanaged<uint, void> glLogicOp;
        [QGLNativeAPI("glMaterialx")] public static delegate* unmanaged<uint, uint, int, void> glMaterialx;
        [QGLNativeAPI("glMaterialxv")] public static delegate* unmanaged<uint, uint, int*, void> glMaterialxv;
        [QGLNativeAPI("glMatrixMode")] public static delegate* unmanaged<uint, void> glMatrixMode;
        [QGLNativeAPI("glMultMatrixx")] public static delegate* unmanaged<int*, void> glMultMatrixx;
        [QGLNativeAPI("glMultiTexCoord4x")] public static delegate* unmanaged<uint, int, int, int, int, void> glMultiTexCoord4x;
        [QGLNativeAPI("glNormal3x")] public static delegate* unmanaged<int, int, int, void> glNormal3x;
        [QGLNativeAPI("glNormalPointer")] public static delegate* unmanaged<uint, int, void*, void> glNormalPointer;
        [QGLNativeAPI("glOrthox")] public static delegate* unmanaged<int, int, int, int, int, int, void> glOrthox;
        [QGLNativeAPI("glPixelStorei")] public static delegate* unmanaged<uint, int, void> glPixelStorei;
        [QGLNativeAPI("glPointParameterx")] public static delegate* unmanaged<uint, int, void> glPointParameterx;
        [QGLNativeAPI("glPointParameterxv")] public static delegate* unmanaged<uint, int*, void> glPointParameterxv;
        [QGLNativeAPI("glPointSizex")] public static delegate* unmanaged<int, void> glPointSizex;
        [QGLNativeAPI("glPolygonOffsetx")] public static delegate* unmanaged<int, int, void> glPolygonOffsetx;
        [QGLNativeAPI("glPopMatrix")] public static delegate* unmanaged<void> glPopMatrix;
        [QGLNativeAPI("glPushMatrix")] public static delegate* unmanaged<void> glPushMatrix;
        [QGLNativeAPI("glReadPixels")] public static delegate* unmanaged<int, int, int, int, uint, uint, void*, void> glReadPixels;
        [QGLNativeAPI("glRotatex")] public static delegate* unmanaged<int, int, int, int, void> glRotatex;
        [QGLNativeAPI("glSampleCoverage")] public static delegate* unmanaged<float, bool, void> glSampleCoverage;
        [QGLNativeAPI("glSampleCoveragex")] public static delegate* unmanaged<int, bool, void> glSampleCoveragex;
        [QGLNativeAPI("glScalex")] public static delegate* unmanaged<int, int, int, void> glScalex;
        [QGLNativeAPI("glScissor")] public static delegate* unmanaged<int, int, int, int, void> glScissor;
        [QGLNativeAPI("glShadeModel")] public static delegate* unmanaged<uint, void> glShadeModel;
        [QGLNativeAPI("glStencilFunc")] public static delegate* unmanaged<uint, int, uint, void> glStencilFunc;
        [QGLNativeAPI("glStencilMask")] public static delegate* unmanaged<uint, void> glStencilMask;
        [QGLNativeAPI("glStencilOp")] public static delegate* unmanaged<uint, uint, uint, void> glStencilOp;
        [QGLNativeAPI("glTexCoordPointer")] public static delegate* unmanaged<int, uint, int, void*, void> glTexCoordPointer;
        [QGLNativeAPI("glTexEnvi")] public static delegate* unmanaged<uint, uint, int, void> glTexEnvi;
        [QGLNativeAPI("glTexEnvx")] public static delegate* unmanaged<uint, uint, int, void> glTexEnvx;
        [QGLNativeAPI("glTexEnviv")] public static delegate* unmanaged<uint, uint, int*, void> glTexEnviv;
        [QGLNativeAPI("glTexEnvxv")] public static delegate* unmanaged<uint, uint, int*, void> glTexEnvxv;
        [QGLNativeAPI("glTexImage2D")] public static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> glTexImage2D;
        [QGLNativeAPI("glTexParameteri")] public static delegate* unmanaged<uint, uint, int, void> glTexParameteri;
        [QGLNativeAPI("glTexParameterx")] public static delegate* unmanaged<uint, uint, int, void> glTexParameterx;
        [QGLNativeAPI("glTexParameteriv")] public static delegate* unmanaged<uint, uint, int*, void> glTexParameteriv;
        [QGLNativeAPI("glTexParameterxv")] public static delegate* unmanaged<uint, uint, int*, void> glTexParameterxv;
        [QGLNativeAPI("glTexSubImage2D")] public static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> glTexSubImage2D;
        [QGLNativeAPI("glTranslatex")] public static delegate* unmanaged<int, int, int, void> glTranslatex;
        [QGLNativeAPI("glVertexPointer")] public static delegate* unmanaged<int, uint, int, void*, void> glVertexPointer;
        [QGLNativeAPI("glViewport")] public static delegate* unmanaged<int, int, int, int, void> glViewport;
        #endregion
    }
}
