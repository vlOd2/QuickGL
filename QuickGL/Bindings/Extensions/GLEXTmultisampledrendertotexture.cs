// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T20:04:55.8490422Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLEXTmultisampledrendertotexture
{
    #region Constants
    public const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x00008D6C;
    public const int GL_RENDERBUFFER_SAMPLES_EXT = 0x00008CAB;
    public const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x00008D56;
    public const int GL_MAX_SAMPLES_EXT = 0x00008D57;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, int, uint, int, int, void> _glRenderbufferStorageMultisampleEXT = null;
    internal static delegate* unmanaged<uint, uint, uint, uint, int, int, void> _glFramebufferTexture2DMultisampleEXT = null;

    internal static void Load()
    {
        _glRenderbufferStorageMultisampleEXT = (delegate* unmanaged<uint, int, uint, int, int, void>)QuickGL.GetGLProcAddress("glRenderbufferStorageMultisampleEXT");
        _glFramebufferTexture2DMultisampleEXT = (delegate* unmanaged<uint, uint, uint, uint, int, int, void>)QuickGL.GetGLProcAddress("glFramebufferTexture2DMultisampleEXT");
    }

    internal static void Unload()
    {
        _glRenderbufferStorageMultisampleEXT = null;
        _glFramebufferTexture2DMultisampleEXT = null;
    }
    #endregion

    #region Function wrappers
    public static void glRenderbufferStorageMultisampleEXT(uint target, int samples, uint internalformat, int width, int height) { QGLFeature.VerifyFunc((nint)_glRenderbufferStorageMultisampleEXT); _glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height); }
    public static void glFramebufferTexture2DMultisampleEXT(uint target, uint attachment, uint textarget, uint texture, int level, int samples) { QGLFeature.VerifyFunc((nint)_glFramebufferTexture2DMultisampleEXT); _glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_EXT_multisampled_render_to_texture", true, true);
}
