// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:00:37.8264070Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBmapbufferrange
{
    #region Constants
    public const int GL_MAP_UNSYNCHRONIZED_BIT = 0x00000020;
    public const int GL_MAP_FLUSH_EXPLICIT_BIT = 0x00000010;
    public const int GL_MAP_INVALIDATE_BUFFER_BIT = 0x00000008;
    public const int GL_MAP_INVALIDATE_RANGE_BIT = 0x00000004;
    public const int GL_MAP_WRITE_BIT = 0x00000002;
    public const int GL_MAP_READ_BIT = 0x00000001;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, nint, nint, void> _glFlushMappedBufferRange = null;
    internal static delegate* unmanaged<uint, nint, nint, uint, void*> _glMapBufferRange = null;

    internal static void Load()
    {
        _glFlushMappedBufferRange = (delegate* unmanaged<uint, nint, nint, void>)QuickGL.GetGLProcAddress("glFlushMappedBufferRange");
        _glMapBufferRange = (delegate* unmanaged<uint, nint, nint, uint, void*>)QuickGL.GetGLProcAddress("glMapBufferRange");
    }

    internal static void Unload()
    {
        _glFlushMappedBufferRange = null;
        _glMapBufferRange = null;
    }
    #endregion

    #region Function wrappers
    public static void glFlushMappedBufferRange(uint target, nint offset, nint length) { QGLFeature.VerifyFunc((nint)_glFlushMappedBufferRange); _glFlushMappedBufferRange(target, offset, length); }
    public static void* glMapBufferRange(uint target, nint offset, nint length, uint access) { QGLFeature.VerifyFunc((nint)_glMapBufferRange); return _glMapBufferRange(target, offset, length, access); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_map_buffer_range", true, false);
}
