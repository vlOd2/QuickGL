// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:00:37.9277041Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBtransformfeedback2
{
    #region Constants
    public const int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x00008E24;
    public const int GL_TRANSFORM_FEEDBACK_BINDING = 0x00008E25;
    public const int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x00008E23;
    public const int GL_TRANSFORM_FEEDBACK = 0x00008E22;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, uint, void> _glDrawTransformFeedback = null;
    internal static delegate* unmanaged<void> _glResumeTransformFeedback = null;
    internal static delegate* unmanaged<uint, bool> _glIsTransformFeedback = null;
    internal static delegate* unmanaged<int, uint*, void> _glDeleteTransformFeedbacks = null;
    internal static delegate* unmanaged<void> _glPauseTransformFeedback = null;
    internal static delegate* unmanaged<int, uint*, void> _glGenTransformFeedbacks = null;
    internal static delegate* unmanaged<uint, uint, void> _glBindTransformFeedback = null;

    internal static void Load()
    {
        _glDrawTransformFeedback = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glDrawTransformFeedback");
        _glResumeTransformFeedback = (delegate* unmanaged<void>)QuickGL.GetGLProcAddress("glResumeTransformFeedback");
        _glIsTransformFeedback = (delegate* unmanaged<uint, bool>)QuickGL.GetGLProcAddress("glIsTransformFeedback");
        _glDeleteTransformFeedbacks = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glDeleteTransformFeedbacks");
        _glPauseTransformFeedback = (delegate* unmanaged<void>)QuickGL.GetGLProcAddress("glPauseTransformFeedback");
        _glGenTransformFeedbacks = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glGenTransformFeedbacks");
        _glBindTransformFeedback = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glBindTransformFeedback");
    }

    internal static void Unload()
    {
        _glDrawTransformFeedback = null;
        _glResumeTransformFeedback = null;
        _glIsTransformFeedback = null;
        _glDeleteTransformFeedbacks = null;
        _glPauseTransformFeedback = null;
        _glGenTransformFeedbacks = null;
        _glBindTransformFeedback = null;
    }
    #endregion

    #region Function wrappers
    public static void glDrawTransformFeedback(uint mode, uint id) { QGLFeature.VerifyFunc((nint)_glDrawTransformFeedback); _glDrawTransformFeedback(mode, id); }
    public static void glResumeTransformFeedback() { QGLFeature.VerifyFunc((nint)_glResumeTransformFeedback); _glResumeTransformFeedback(); }
    public static bool glIsTransformFeedback(uint id) { QGLFeature.VerifyFunc((nint)_glIsTransformFeedback); return _glIsTransformFeedback(id); }
    public static void glDeleteTransformFeedbacks(int n, uint* ids) { QGLFeature.VerifyFunc((nint)_glDeleteTransformFeedbacks); _glDeleteTransformFeedbacks(n, ids); }
    public static void glPauseTransformFeedback() { QGLFeature.VerifyFunc((nint)_glPauseTransformFeedback); _glPauseTransformFeedback(); }
    public static void glGenTransformFeedbacks(int n, uint* ids) { QGLFeature.VerifyFunc((nint)_glGenTransformFeedbacks); _glGenTransformFeedbacks(n, ids); }
    public static void glBindTransformFeedback(uint target, uint id) { QGLFeature.VerifyFunc((nint)_glBindTransformFeedback); _glBindTransformFeedback(target, id); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_transform_feedback2", true, false);
}
