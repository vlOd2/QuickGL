// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:43:43.7931067Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBparallelshadercompile
{
    #region Constants
    public const int GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x000091B0;
    public const int GL_COMPLETION_STATUS_ARB = 0x000091B1;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, void> _glMaxShaderCompilerThreadsARB = null;

    internal static void Load()
    {
        _glMaxShaderCompilerThreadsARB = (delegate* unmanaged<uint, void>)QuickGL.GetGLProcAddress("glMaxShaderCompilerThreadsARB");
    }

    internal static void Unload()
    {
        _glMaxShaderCompilerThreadsARB = null;
    }
    #endregion

    #region Function wrappers
    public static void glMaxShaderCompilerThreadsARB(uint count) { QGLFeature.VerifyFunc((nint)_glMaxShaderCompilerThreadsARB); _glMaxShaderCompilerThreadsARB(count); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_parallel_shader_compile", true, false);
}
