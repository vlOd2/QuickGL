// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:00:38.1757128Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLEXTwin32keyedmutex
{
    #region Constants
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, ulong, bool> _glReleaseKeyedMutexWin32EXT = null;
    internal static delegate* unmanaged<uint, ulong, uint, bool> _glAcquireKeyedMutexWin32EXT = null;

    internal static void Load()
    {
        _glReleaseKeyedMutexWin32EXT = (delegate* unmanaged<uint, ulong, bool>)QuickGL.GetGLProcAddress("glReleaseKeyedMutexWin32EXT");
        _glAcquireKeyedMutexWin32EXT = (delegate* unmanaged<uint, ulong, uint, bool>)QuickGL.GetGLProcAddress("glAcquireKeyedMutexWin32EXT");
    }

    internal static void Unload()
    {
        _glReleaseKeyedMutexWin32EXT = null;
        _glAcquireKeyedMutexWin32EXT = null;
    }
    #endregion

    #region Function wrappers
    public static bool glReleaseKeyedMutexWin32EXT(uint memory, ulong key) { QGLFeature.VerifyFunc((nint)_glReleaseKeyedMutexWin32EXT); return _glReleaseKeyedMutexWin32EXT(memory, key); }
    public static bool glAcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout) { QGLFeature.VerifyFunc((nint)_glAcquireKeyedMutexWin32EXT); return _glAcquireKeyedMutexWin32EXT(memory, key, timeout); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_EXT_win32_keyed_mutex", true, false);
}
