// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T20:04:55.6817981Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBblendfuncextended
{
    #region Constants
    public const int GL_SRC1_COLOR = 0x000088F9;
    public const int GL_SRC1_ALPHA = 0x00008589;
    public const int GL_ONE_MINUS_SRC1_COLOR = 0x000088FA;
    public const int GL_ONE_MINUS_SRC1_ALPHA = 0x000088FB;
    public const int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x000088FC;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, uint, uint, byte*, void> _glBindFragDataLocationIndexed = null;
    internal static delegate* unmanaged<uint, byte*, int> _glGetFragDataIndex = null;

    internal static void Load()
    {
        _glBindFragDataLocationIndexed = (delegate* unmanaged<uint, uint, uint, byte*, void>)QuickGL.GetGLProcAddress("glBindFragDataLocationIndexed");
        _glGetFragDataIndex = (delegate* unmanaged<uint, byte*, int>)QuickGL.GetGLProcAddress("glGetFragDataIndex");
    }

    internal static void Unload()
    {
        _glBindFragDataLocationIndexed = null;
        _glGetFragDataIndex = null;
    }
    #endregion

    #region Function wrappers
    public static void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, byte* name) { QGLFeature.VerifyFunc((nint)_glBindFragDataLocationIndexed); _glBindFragDataLocationIndexed(program, colorNumber, index, name); }
    public static int glGetFragDataIndex(uint program, byte* name) { QGLFeature.VerifyFunc((nint)_glGetFragDataIndex); return _glGetFragDataIndex(program, name); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_blend_func_extended", true, false);
}
