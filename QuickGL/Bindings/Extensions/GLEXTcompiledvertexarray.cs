// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:00:37.9685136Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLEXTcompiledvertexarray
{
    #region Constants
    public const int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x000081A9;
    public const int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x000081A8;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<void> _glUnlockArraysEXT = null;
    internal static delegate* unmanaged<int, int, void> _glLockArraysEXT = null;

    internal static void Load()
    {
        _glUnlockArraysEXT = (delegate* unmanaged<void>)QuickGL.GetGLProcAddress("glUnlockArraysEXT");
        _glLockArraysEXT = (delegate* unmanaged<int, int, void>)QuickGL.GetGLProcAddress("glLockArraysEXT");
    }

    internal static void Unload()
    {
        _glUnlockArraysEXT = null;
        _glLockArraysEXT = null;
    }
    #endregion

    #region Function wrappers
    public static void glUnlockArraysEXT() { QGLFeature.VerifyFunc((nint)_glUnlockArraysEXT); _glUnlockArraysEXT(); }
    public static void glLockArraysEXT(int first, int count) { QGLFeature.VerifyFunc((nint)_glLockArraysEXT); _glLockArraysEXT(first, count); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_EXT_compiled_vertex_array", true, false);
}
