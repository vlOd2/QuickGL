// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBtexturemultisample
{
    #region Constants
    public const int GL_SAMPLE_POSITION = 0x00008E50;
    public const int GL_SAMPLE_MASK = 0x00008E51;
    public const int GL_SAMPLE_MASK_VALUE = 0x00008E52;
    public const int GL_MAX_SAMPLE_MASK_WORDS = 0x00008E59;
    public const int GL_TEXTURE_2D_MULTISAMPLE = 0x00009100;
    public const int GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x00009101;
    public const int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009102;
    public const int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009103;
    public const int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x00009104;
    public const int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x00009105;
    public const int GL_TEXTURE_SAMPLES = 0x00009106;
    public const int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x00009107;
    public const int GL_SAMPLER_2D_MULTISAMPLE = 0x00009108;
    public const int GL_INT_SAMPLER_2D_MULTISAMPLE = 0x00009109;
    public const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x0000910A;
    public const int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910B;
    public const int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910C;
    public const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910D;
    public const int GL_MAX_COLOR_TEXTURE_SAMPLES = 0x0000910E;
    public const int GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x0000910F;
    public const int GL_MAX_INTEGER_SAMPLES = 0x00009110;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, int, uint, int, int, bool, void> _glTexImage2DMultisample = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, bool, void> _glTexImage3DMultisample = null;
    internal static delegate* unmanaged<uint, uint, float*, void> _glGetMultisamplefv = null;
    internal static delegate* unmanaged<uint, uint, void> _glSampleMaski = null;

    internal static void Load()
    {
        _glTexImage2DMultisample = (delegate* unmanaged<uint, int, uint, int, int, bool, void>)QuickGL.GetGLProcAddress("glTexImage2DMultisample");
        _glTexImage3DMultisample = (delegate* unmanaged<uint, int, uint, int, int, int, bool, void>)QuickGL.GetGLProcAddress("glTexImage3DMultisample");
        _glGetMultisamplefv = (delegate* unmanaged<uint, uint, float*, void>)QuickGL.GetGLProcAddress("glGetMultisamplefv");
        _glSampleMaski = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glSampleMaski");
    }

    internal static void Unload()
    {
        _glTexImage2DMultisample = null;
        _glTexImage3DMultisample = null;
        _glGetMultisamplefv = null;
        _glSampleMaski = null;
    }
    #endregion

    #region Function wrappers
    public static void glTexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations) { QGLFeature.VerifyFunc((nint)_glTexImage2DMultisample); _glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
    public static void glTexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations) { QGLFeature.VerifyFunc((nint)_glTexImage3DMultisample); _glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
    public static void glGetMultisamplefv(uint pname, uint index, float* val) { QGLFeature.VerifyFunc((nint)_glGetMultisamplefv); _glGetMultisamplefv(pname, index, val); }
    public static void glSampleMaski(uint maskNumber, uint mask) { QGLFeature.VerifyFunc((nint)_glSampleMaski); _glSampleMaski(maskNumber, mask); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_texture_multisample", true, false);
}
