// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:43:43.8118005Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBshaderatomiccounters
{
    #region Constants
    public const int GL_ATOMIC_COUNTER_BUFFER = 0x000092C0;
    public const int GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x000092C1;
    public const int GL_ATOMIC_COUNTER_BUFFER_START = 0x000092C2;
    public const int GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x000092C3;
    public const int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x000092C4;
    public const int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x000092C5;
    public const int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x000092C6;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x000092C7;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x000092C8;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x000092C9;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x000092CA;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x000092CB;
    public const int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x000092CC;
    public const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x000092CD;
    public const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x000092CE;
    public const int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x000092CF;
    public const int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x000092D0;
    public const int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x000092D1;
    public const int GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x000092D2;
    public const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x000092D3;
    public const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x000092D4;
    public const int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x000092D5;
    public const int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x000092D6;
    public const int GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x000092D7;
    public const int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x000092D8;
    public const int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x000092DC;
    public const int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x000092D9;
    public const int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x000092DA;
    public const int GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x000092DB;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, uint, uint, int*, void> _glGetActiveAtomicCounterBufferiv = null;

    internal static void Load()
    {
        _glGetActiveAtomicCounterBufferiv = (delegate* unmanaged<uint, uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetActiveAtomicCounterBufferiv");
    }

    internal static void Unload()
    {
        _glGetActiveAtomicCounterBufferiv = null;
    }
    #endregion

    #region Function wrappers
    public static void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetActiveAtomicCounterBufferiv); _glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, @params); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_shader_atomic_counters", true, false);
}
