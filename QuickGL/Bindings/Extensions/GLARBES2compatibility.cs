// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:41:02.9976030Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBES2compatibility
{
    #region Constants
    public const int GL_FIXED = 0x0000140C;
    public const int GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x00008B9A;
    public const int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x00008B9B;
    public const int GL_LOW_FLOAT = 0x00008DF0;
    public const int GL_MEDIUM_FLOAT = 0x00008DF1;
    public const int GL_HIGH_FLOAT = 0x00008DF2;
    public const int GL_LOW_INT = 0x00008DF3;
    public const int GL_MEDIUM_INT = 0x00008DF4;
    public const int GL_HIGH_INT = 0x00008DF5;
    public const int GL_SHADER_COMPILER = 0x00008DFA;
    public const int GL_SHADER_BINARY_FORMATS = 0x00008DF8;
    public const int GL_NUM_SHADER_BINARY_FORMATS = 0x00008DF9;
    public const int GL_MAX_VERTEX_UNIFORM_VECTORS = 0x00008DFB;
    public const int GL_MAX_VARYING_VECTORS = 0x00008DFC;
    public const int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x00008DFD;
    public const int GL_RGB565 = 0x00008D62;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<void> _glReleaseShaderCompiler = null;
    internal static delegate* unmanaged<int, uint*, uint, void*, int, void> _glShaderBinary = null;
    internal static delegate* unmanaged<uint, uint, int*, int*, void> _glGetShaderPrecisionFormat = null;
    internal static delegate* unmanaged<float, float, void> _glDepthRangef = null;
    internal static delegate* unmanaged<float, void> _glClearDepthf = null;

    internal static void Load()
    {
        _glReleaseShaderCompiler = (delegate* unmanaged<void>)QuickGL.GetGLProcAddress("glReleaseShaderCompiler");
        _glShaderBinary = (delegate* unmanaged<int, uint*, uint, void*, int, void>)QuickGL.GetGLProcAddress("glShaderBinary");
        _glGetShaderPrecisionFormat = (delegate* unmanaged<uint, uint, int*, int*, void>)QuickGL.GetGLProcAddress("glGetShaderPrecisionFormat");
        _glDepthRangef = (delegate* unmanaged<float, float, void>)QuickGL.GetGLProcAddress("glDepthRangef");
        _glClearDepthf = (delegate* unmanaged<float, void>)QuickGL.GetGLProcAddress("glClearDepthf");
    }

    internal static void Unload()
    {
        _glReleaseShaderCompiler = null;
        _glShaderBinary = null;
        _glGetShaderPrecisionFormat = null;
        _glDepthRangef = null;
        _glClearDepthf = null;
    }
    #endregion

    #region Function wrappers
    public static void glReleaseShaderCompiler() { QGLFeature.VerifyFunc((nint)_glReleaseShaderCompiler); _glReleaseShaderCompiler(); }
    public static void glShaderBinary(int count, uint* shaders, uint binaryFormat, void* binary, int length) { QGLFeature.VerifyFunc((nint)_glShaderBinary); _glShaderBinary(count, shaders, binaryFormat, binary, length); }
    public static void glGetShaderPrecisionFormat(uint shadertype, uint precisiontype, int* range, int* precision) { QGLFeature.VerifyFunc((nint)_glGetShaderPrecisionFormat); _glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision); }
    public static void glDepthRangef(float n, float f) { QGLFeature.VerifyFunc((nint)_glDepthRangef); _glDepthRangef(n, f); }
    public static void glClearDepthf(float d) { QGLFeature.VerifyFunc((nint)_glClearDepthf); _glClearDepthf(d); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_ES2_compatibility", true, false);
}
