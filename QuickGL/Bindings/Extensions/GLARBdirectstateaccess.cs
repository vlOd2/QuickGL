// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBdirectstateaccess
{
    #region Constants
    public const int GL_TEXTURE_TARGET = 0x00001006;
    public const int GL_QUERY_TARGET = 0x000082EA;
    public const int GL_TEXTURE_BINDING_1D = 0x00008068;
    public const int GL_TEXTURE_BINDING_1D_ARRAY = 0x00008C1C;
    public const int GL_TEXTURE_BINDING_2D = 0x00008069;
    public const int GL_TEXTURE_BINDING_2D_ARRAY = 0x00008C1D;
    public const int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x00009104;
    public const int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x00009105;
    public const int GL_TEXTURE_BINDING_3D = 0x0000806A;
    public const int GL_TEXTURE_BINDING_BUFFER = 0x00008C2C;
    public const int GL_TEXTURE_BINDING_CUBE_MAP = 0x00008514;
    public const int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x0000900A;
    public const int GL_TEXTURE_BINDING_RECTANGLE = 0x000084F6;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<int, uint*, void> _glCreateTransformFeedbacks = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glTransformFeedbackBufferBase = null;
    internal static delegate* unmanaged<uint, uint, uint, nint, nint, void> _glTransformFeedbackBufferRange = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetTransformFeedbackiv = null;
    internal static delegate* unmanaged<uint, uint, uint, int*, void> _glGetTransformFeedbacki_v = null;
    internal static delegate* unmanaged<uint, uint, uint, long*, void> _glGetTransformFeedbacki64_v = null;
    internal static delegate* unmanaged<int, uint*, void> _glCreateBuffers = null;
    internal static delegate* unmanaged<uint, nint, void*, uint, void> _glNamedBufferStorage = null;
    internal static delegate* unmanaged<uint, nint, void*, uint, void> _glNamedBufferData = null;
    internal static delegate* unmanaged<uint, nint, nint, void*, void> _glNamedBufferSubData = null;
    internal static delegate* unmanaged<uint, uint, nint, nint, nint, void> _glCopyNamedBufferSubData = null;
    internal static delegate* unmanaged<uint, uint, uint, uint, void*, void> _glClearNamedBufferData = null;
    internal static delegate* unmanaged<uint, uint, nint, nint, uint, uint, void*, void> _glClearNamedBufferSubData = null;
    internal static delegate* unmanaged<uint, uint, void*> _glMapNamedBuffer = null;
    internal static delegate* unmanaged<uint, nint, nint, uint, void*> _glMapNamedBufferRange = null;
    internal static delegate* unmanaged<uint, bool> _glUnmapNamedBuffer = null;
    internal static delegate* unmanaged<uint, nint, nint, void> _glFlushMappedNamedBufferRange = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetNamedBufferParameteriv = null;
    internal static delegate* unmanaged<uint, uint, long*, void> _glGetNamedBufferParameteri64v = null;
    internal static delegate* unmanaged<uint, uint, void**, void> _glGetNamedBufferPointerv = null;
    internal static delegate* unmanaged<uint, nint, nint, void*, void> _glGetNamedBufferSubData = null;
    internal static delegate* unmanaged<int, uint*, void> _glCreateFramebuffers = null;
    internal static delegate* unmanaged<uint, uint, uint, uint, void> _glNamedFramebufferRenderbuffer = null;
    internal static delegate* unmanaged<uint, uint, int, void> _glNamedFramebufferParameteri = null;
    internal static delegate* unmanaged<uint, uint, uint, int, void> _glNamedFramebufferTexture = null;
    internal static delegate* unmanaged<uint, uint, uint, int, int, void> _glNamedFramebufferTextureLayer = null;
    internal static delegate* unmanaged<uint, uint, void> _glNamedFramebufferDrawBuffer = null;
    internal static delegate* unmanaged<uint, int, uint*, void> _glNamedFramebufferDrawBuffers = null;
    internal static delegate* unmanaged<uint, uint, void> _glNamedFramebufferReadBuffer = null;
    internal static delegate* unmanaged<uint, int, uint*, void> _glInvalidateNamedFramebufferData = null;
    internal static delegate* unmanaged<uint, int, uint*, int, int, int, int, void> _glInvalidateNamedFramebufferSubData = null;
    internal static delegate* unmanaged<uint, uint, int, int*, void> _glClearNamedFramebufferiv = null;
    internal static delegate* unmanaged<uint, uint, int, uint*, void> _glClearNamedFramebufferuiv = null;
    internal static delegate* unmanaged<uint, uint, int, float*, void> _glClearNamedFramebufferfv = null;
    internal static delegate* unmanaged<uint, uint, int, float, int, void> _glClearNamedFramebufferfi = null;
    internal static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, uint, void> _glBlitNamedFramebuffer = null;
    internal static delegate* unmanaged<uint, uint, uint> _glCheckNamedFramebufferStatus = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetNamedFramebufferParameteriv = null;
    internal static delegate* unmanaged<uint, uint, uint, int*, void> _glGetNamedFramebufferAttachmentParameteriv = null;
    internal static delegate* unmanaged<int, uint*, void> _glCreateRenderbuffers = null;
    internal static delegate* unmanaged<uint, uint, int, int, void> _glNamedRenderbufferStorage = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, void> _glNamedRenderbufferStorageMultisample = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetNamedRenderbufferParameteriv = null;
    internal static delegate* unmanaged<uint, int, uint*, void> _glCreateTextures = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glTextureBuffer = null;
    internal static delegate* unmanaged<uint, uint, uint, nint, nint, void> _glTextureBufferRange = null;
    internal static delegate* unmanaged<uint, int, uint, int, void> _glTextureStorage1D = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, void> _glTextureStorage2D = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, void> _glTextureStorage3D = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, bool, void> _glTextureStorage2DMultisample = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, bool, void> _glTextureStorage3DMultisample = null;
    internal static delegate* unmanaged<uint, int, int, int, uint, uint, void*, void> _glTextureSubImage1D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> _glTextureSubImage2D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void> _glTextureSubImage3D = null;
    internal static delegate* unmanaged<uint, int, int, int, uint, int, void*, void> _glCompressedTextureSubImage1D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void> _glCompressedTextureSubImage2D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void> _glCompressedTextureSubImage3D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, void> _glCopyTextureSubImage1D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> _glCopyTextureSubImage2D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> _glCopyTextureSubImage3D = null;
    internal static delegate* unmanaged<uint, uint, float, void> _glTextureParameterf = null;
    internal static delegate* unmanaged<uint, uint, float*, void> _glTextureParameterfv = null;
    internal static delegate* unmanaged<uint, uint, int, void> _glTextureParameteri = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glTextureParameterIiv = null;
    internal static delegate* unmanaged<uint, uint, uint*, void> _glTextureParameterIuiv = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glTextureParameteriv = null;
    internal static delegate* unmanaged<uint, void> _glGenerateTextureMipmap = null;
    internal static delegate* unmanaged<uint, uint, void> _glBindTextureUnit = null;
    internal static delegate* unmanaged<uint, int, uint, uint, int, void*, void> _glGetTextureImage = null;
    internal static delegate* unmanaged<uint, int, int, void*, void> _glGetCompressedTextureImage = null;
    internal static delegate* unmanaged<uint, int, uint, float*, void> _glGetTextureLevelParameterfv = null;
    internal static delegate* unmanaged<uint, int, uint, int*, void> _glGetTextureLevelParameteriv = null;
    internal static delegate* unmanaged<uint, uint, float*, void> _glGetTextureParameterfv = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetTextureParameterIiv = null;
    internal static delegate* unmanaged<uint, uint, uint*, void> _glGetTextureParameterIuiv = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetTextureParameteriv = null;
    internal static delegate* unmanaged<int, uint*, void> _glCreateVertexArrays = null;
    internal static delegate* unmanaged<uint, uint, void> _glDisableVertexArrayAttrib = null;
    internal static delegate* unmanaged<uint, uint, void> _glEnableVertexArrayAttrib = null;
    internal static delegate* unmanaged<uint, uint, void> _glVertexArrayElementBuffer = null;
    internal static delegate* unmanaged<uint, uint, uint, nint, int, void> _glVertexArrayVertexBuffer = null;
    internal static delegate* unmanaged<uint, uint, int, uint*, nint*, int*, void> _glVertexArrayVertexBuffers = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glVertexArrayAttribBinding = null;
    internal static delegate* unmanaged<uint, uint, int, uint, bool, uint, void> _glVertexArrayAttribFormat = null;
    internal static delegate* unmanaged<uint, uint, int, uint, uint, void> _glVertexArrayAttribIFormat = null;
    internal static delegate* unmanaged<uint, uint, int, uint, uint, void> _glVertexArrayAttribLFormat = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glVertexArrayBindingDivisor = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetVertexArrayiv = null;
    internal static delegate* unmanaged<uint, uint, uint, int*, void> _glGetVertexArrayIndexediv = null;
    internal static delegate* unmanaged<uint, uint, uint, long*, void> _glGetVertexArrayIndexed64iv = null;
    internal static delegate* unmanaged<int, uint*, void> _glCreateSamplers = null;
    internal static delegate* unmanaged<int, uint*, void> _glCreateProgramPipelines = null;
    internal static delegate* unmanaged<uint, int, uint*, void> _glCreateQueries = null;
    internal static delegate* unmanaged<uint, uint, uint, nint, void> _glGetQueryBufferObjecti64v = null;
    internal static delegate* unmanaged<uint, uint, uint, nint, void> _glGetQueryBufferObjectiv = null;
    internal static delegate* unmanaged<uint, uint, uint, nint, void> _glGetQueryBufferObjectui64v = null;
    internal static delegate* unmanaged<uint, uint, uint, nint, void> _glGetQueryBufferObjectuiv = null;

    internal static void Load()
    {
        _glCreateTransformFeedbacks = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glCreateTransformFeedbacks");
        _glTransformFeedbackBufferBase = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glTransformFeedbackBufferBase");
        _glTransformFeedbackBufferRange = (delegate* unmanaged<uint, uint, uint, nint, nint, void>)QuickGL.GetGLProcAddress("glTransformFeedbackBufferRange");
        _glGetTransformFeedbackiv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetTransformFeedbackiv");
        _glGetTransformFeedbacki_v = (delegate* unmanaged<uint, uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetTransformFeedbacki_v");
        _glGetTransformFeedbacki64_v = (delegate* unmanaged<uint, uint, uint, long*, void>)QuickGL.GetGLProcAddress("glGetTransformFeedbacki64_v");
        _glCreateBuffers = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glCreateBuffers");
        _glNamedBufferStorage = (delegate* unmanaged<uint, nint, void*, uint, void>)QuickGL.GetGLProcAddress("glNamedBufferStorage");
        _glNamedBufferData = (delegate* unmanaged<uint, nint, void*, uint, void>)QuickGL.GetGLProcAddress("glNamedBufferData");
        _glNamedBufferSubData = (delegate* unmanaged<uint, nint, nint, void*, void>)QuickGL.GetGLProcAddress("glNamedBufferSubData");
        _glCopyNamedBufferSubData = (delegate* unmanaged<uint, uint, nint, nint, nint, void>)QuickGL.GetGLProcAddress("glCopyNamedBufferSubData");
        _glClearNamedBufferData = (delegate* unmanaged<uint, uint, uint, uint, void*, void>)QuickGL.GetGLProcAddress("glClearNamedBufferData");
        _glClearNamedBufferSubData = (delegate* unmanaged<uint, uint, nint, nint, uint, uint, void*, void>)QuickGL.GetGLProcAddress("glClearNamedBufferSubData");
        _glMapNamedBuffer = (delegate* unmanaged<uint, uint, void*>)QuickGL.GetGLProcAddress("glMapNamedBuffer");
        _glMapNamedBufferRange = (delegate* unmanaged<uint, nint, nint, uint, void*>)QuickGL.GetGLProcAddress("glMapNamedBufferRange");
        _glUnmapNamedBuffer = (delegate* unmanaged<uint, bool>)QuickGL.GetGLProcAddress("glUnmapNamedBuffer");
        _glFlushMappedNamedBufferRange = (delegate* unmanaged<uint, nint, nint, void>)QuickGL.GetGLProcAddress("glFlushMappedNamedBufferRange");
        _glGetNamedBufferParameteriv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetNamedBufferParameteriv");
        _glGetNamedBufferParameteri64v = (delegate* unmanaged<uint, uint, long*, void>)QuickGL.GetGLProcAddress("glGetNamedBufferParameteri64v");
        _glGetNamedBufferPointerv = (delegate* unmanaged<uint, uint, void**, void>)QuickGL.GetGLProcAddress("glGetNamedBufferPointerv");
        _glGetNamedBufferSubData = (delegate* unmanaged<uint, nint, nint, void*, void>)QuickGL.GetGLProcAddress("glGetNamedBufferSubData");
        _glCreateFramebuffers = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glCreateFramebuffers");
        _glNamedFramebufferRenderbuffer = (delegate* unmanaged<uint, uint, uint, uint, void>)QuickGL.GetGLProcAddress("glNamedFramebufferRenderbuffer");
        _glNamedFramebufferParameteri = (delegate* unmanaged<uint, uint, int, void>)QuickGL.GetGLProcAddress("glNamedFramebufferParameteri");
        _glNamedFramebufferTexture = (delegate* unmanaged<uint, uint, uint, int, void>)QuickGL.GetGLProcAddress("glNamedFramebufferTexture");
        _glNamedFramebufferTextureLayer = (delegate* unmanaged<uint, uint, uint, int, int, void>)QuickGL.GetGLProcAddress("glNamedFramebufferTextureLayer");
        _glNamedFramebufferDrawBuffer = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glNamedFramebufferDrawBuffer");
        _glNamedFramebufferDrawBuffers = (delegate* unmanaged<uint, int, uint*, void>)QuickGL.GetGLProcAddress("glNamedFramebufferDrawBuffers");
        _glNamedFramebufferReadBuffer = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glNamedFramebufferReadBuffer");
        _glInvalidateNamedFramebufferData = (delegate* unmanaged<uint, int, uint*, void>)QuickGL.GetGLProcAddress("glInvalidateNamedFramebufferData");
        _glInvalidateNamedFramebufferSubData = (delegate* unmanaged<uint, int, uint*, int, int, int, int, void>)QuickGL.GetGLProcAddress("glInvalidateNamedFramebufferSubData");
        _glClearNamedFramebufferiv = (delegate* unmanaged<uint, uint, int, int*, void>)QuickGL.GetGLProcAddress("glClearNamedFramebufferiv");
        _glClearNamedFramebufferuiv = (delegate* unmanaged<uint, uint, int, uint*, void>)QuickGL.GetGLProcAddress("glClearNamedFramebufferuiv");
        _glClearNamedFramebufferfv = (delegate* unmanaged<uint, uint, int, float*, void>)QuickGL.GetGLProcAddress("glClearNamedFramebufferfv");
        _glClearNamedFramebufferfi = (delegate* unmanaged<uint, uint, int, float, int, void>)QuickGL.GetGLProcAddress("glClearNamedFramebufferfi");
        _glBlitNamedFramebuffer = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, uint, void>)QuickGL.GetGLProcAddress("glBlitNamedFramebuffer");
        _glCheckNamedFramebufferStatus = (delegate* unmanaged<uint, uint, uint>)QuickGL.GetGLProcAddress("glCheckNamedFramebufferStatus");
        _glGetNamedFramebufferParameteriv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetNamedFramebufferParameteriv");
        _glGetNamedFramebufferAttachmentParameteriv = (delegate* unmanaged<uint, uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetNamedFramebufferAttachmentParameteriv");
        _glCreateRenderbuffers = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glCreateRenderbuffers");
        _glNamedRenderbufferStorage = (delegate* unmanaged<uint, uint, int, int, void>)QuickGL.GetGLProcAddress("glNamedRenderbufferStorage");
        _glNamedRenderbufferStorageMultisample = (delegate* unmanaged<uint, int, uint, int, int, void>)QuickGL.GetGLProcAddress("glNamedRenderbufferStorageMultisample");
        _glGetNamedRenderbufferParameteriv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetNamedRenderbufferParameteriv");
        _glCreateTextures = (delegate* unmanaged<uint, int, uint*, void>)QuickGL.GetGLProcAddress("glCreateTextures");
        _glTextureBuffer = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glTextureBuffer");
        _glTextureBufferRange = (delegate* unmanaged<uint, uint, uint, nint, nint, void>)QuickGL.GetGLProcAddress("glTextureBufferRange");
        _glTextureStorage1D = (delegate* unmanaged<uint, int, uint, int, void>)QuickGL.GetGLProcAddress("glTextureStorage1D");
        _glTextureStorage2D = (delegate* unmanaged<uint, int, uint, int, int, void>)QuickGL.GetGLProcAddress("glTextureStorage2D");
        _glTextureStorage3D = (delegate* unmanaged<uint, int, uint, int, int, int, void>)QuickGL.GetGLProcAddress("glTextureStorage3D");
        _glTextureStorage2DMultisample = (delegate* unmanaged<uint, int, uint, int, int, bool, void>)QuickGL.GetGLProcAddress("glTextureStorage2DMultisample");
        _glTextureStorage3DMultisample = (delegate* unmanaged<uint, int, uint, int, int, int, bool, void>)QuickGL.GetGLProcAddress("glTextureStorage3DMultisample");
        _glTextureSubImage1D = (delegate* unmanaged<uint, int, int, int, uint, uint, void*, void>)QuickGL.GetGLProcAddress("glTextureSubImage1D");
        _glTextureSubImage2D = (delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void>)QuickGL.GetGLProcAddress("glTextureSubImage2D");
        _glTextureSubImage3D = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)QuickGL.GetGLProcAddress("glTextureSubImage3D");
        _glCompressedTextureSubImage1D = (delegate* unmanaged<uint, int, int, int, uint, int, void*, void>)QuickGL.GetGLProcAddress("glCompressedTextureSubImage1D");
        _glCompressedTextureSubImage2D = (delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void>)QuickGL.GetGLProcAddress("glCompressedTextureSubImage2D");
        _glCompressedTextureSubImage3D = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void>)QuickGL.GetGLProcAddress("glCompressedTextureSubImage3D");
        _glCopyTextureSubImage1D = (delegate* unmanaged<uint, int, int, int, int, int, void>)QuickGL.GetGLProcAddress("glCopyTextureSubImage1D");
        _glCopyTextureSubImage2D = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)QuickGL.GetGLProcAddress("glCopyTextureSubImage2D");
        _glCopyTextureSubImage3D = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)QuickGL.GetGLProcAddress("glCopyTextureSubImage3D");
        _glTextureParameterf = (delegate* unmanaged<uint, uint, float, void>)QuickGL.GetGLProcAddress("glTextureParameterf");
        _glTextureParameterfv = (delegate* unmanaged<uint, uint, float*, void>)QuickGL.GetGLProcAddress("glTextureParameterfv");
        _glTextureParameteri = (delegate* unmanaged<uint, uint, int, void>)QuickGL.GetGLProcAddress("glTextureParameteri");
        _glTextureParameterIiv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glTextureParameterIiv");
        _glTextureParameterIuiv = (delegate* unmanaged<uint, uint, uint*, void>)QuickGL.GetGLProcAddress("glTextureParameterIuiv");
        _glTextureParameteriv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glTextureParameteriv");
        _glGenerateTextureMipmap = (delegate* unmanaged<uint, void>)QuickGL.GetGLProcAddress("glGenerateTextureMipmap");
        _glBindTextureUnit = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glBindTextureUnit");
        _glGetTextureImage = (delegate* unmanaged<uint, int, uint, uint, int, void*, void>)QuickGL.GetGLProcAddress("glGetTextureImage");
        _glGetCompressedTextureImage = (delegate* unmanaged<uint, int, int, void*, void>)QuickGL.GetGLProcAddress("glGetCompressedTextureImage");
        _glGetTextureLevelParameterfv = (delegate* unmanaged<uint, int, uint, float*, void>)QuickGL.GetGLProcAddress("glGetTextureLevelParameterfv");
        _glGetTextureLevelParameteriv = (delegate* unmanaged<uint, int, uint, int*, void>)QuickGL.GetGLProcAddress("glGetTextureLevelParameteriv");
        _glGetTextureParameterfv = (delegate* unmanaged<uint, uint, float*, void>)QuickGL.GetGLProcAddress("glGetTextureParameterfv");
        _glGetTextureParameterIiv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetTextureParameterIiv");
        _glGetTextureParameterIuiv = (delegate* unmanaged<uint, uint, uint*, void>)QuickGL.GetGLProcAddress("glGetTextureParameterIuiv");
        _glGetTextureParameteriv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetTextureParameteriv");
        _glCreateVertexArrays = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glCreateVertexArrays");
        _glDisableVertexArrayAttrib = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glDisableVertexArrayAttrib");
        _glEnableVertexArrayAttrib = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glEnableVertexArrayAttrib");
        _glVertexArrayElementBuffer = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glVertexArrayElementBuffer");
        _glVertexArrayVertexBuffer = (delegate* unmanaged<uint, uint, uint, nint, int, void>)QuickGL.GetGLProcAddress("glVertexArrayVertexBuffer");
        _glVertexArrayVertexBuffers = (delegate* unmanaged<uint, uint, int, uint*, nint*, int*, void>)QuickGL.GetGLProcAddress("glVertexArrayVertexBuffers");
        _glVertexArrayAttribBinding = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glVertexArrayAttribBinding");
        _glVertexArrayAttribFormat = (delegate* unmanaged<uint, uint, int, uint, bool, uint, void>)QuickGL.GetGLProcAddress("glVertexArrayAttribFormat");
        _glVertexArrayAttribIFormat = (delegate* unmanaged<uint, uint, int, uint, uint, void>)QuickGL.GetGLProcAddress("glVertexArrayAttribIFormat");
        _glVertexArrayAttribLFormat = (delegate* unmanaged<uint, uint, int, uint, uint, void>)QuickGL.GetGLProcAddress("glVertexArrayAttribLFormat");
        _glVertexArrayBindingDivisor = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glVertexArrayBindingDivisor");
        _glGetVertexArrayiv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetVertexArrayiv");
        _glGetVertexArrayIndexediv = (delegate* unmanaged<uint, uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetVertexArrayIndexediv");
        _glGetVertexArrayIndexed64iv = (delegate* unmanaged<uint, uint, uint, long*, void>)QuickGL.GetGLProcAddress("glGetVertexArrayIndexed64iv");
        _glCreateSamplers = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glCreateSamplers");
        _glCreateProgramPipelines = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glCreateProgramPipelines");
        _glCreateQueries = (delegate* unmanaged<uint, int, uint*, void>)QuickGL.GetGLProcAddress("glCreateQueries");
        _glGetQueryBufferObjecti64v = (delegate* unmanaged<uint, uint, uint, nint, void>)QuickGL.GetGLProcAddress("glGetQueryBufferObjecti64v");
        _glGetQueryBufferObjectiv = (delegate* unmanaged<uint, uint, uint, nint, void>)QuickGL.GetGLProcAddress("glGetQueryBufferObjectiv");
        _glGetQueryBufferObjectui64v = (delegate* unmanaged<uint, uint, uint, nint, void>)QuickGL.GetGLProcAddress("glGetQueryBufferObjectui64v");
        _glGetQueryBufferObjectuiv = (delegate* unmanaged<uint, uint, uint, nint, void>)QuickGL.GetGLProcAddress("glGetQueryBufferObjectuiv");
    }

    internal static void Unload()
    {
        _glCreateTransformFeedbacks = null;
        _glTransformFeedbackBufferBase = null;
        _glTransformFeedbackBufferRange = null;
        _glGetTransformFeedbackiv = null;
        _glGetTransformFeedbacki_v = null;
        _glGetTransformFeedbacki64_v = null;
        _glCreateBuffers = null;
        _glNamedBufferStorage = null;
        _glNamedBufferData = null;
        _glNamedBufferSubData = null;
        _glCopyNamedBufferSubData = null;
        _glClearNamedBufferData = null;
        _glClearNamedBufferSubData = null;
        _glMapNamedBuffer = null;
        _glMapNamedBufferRange = null;
        _glUnmapNamedBuffer = null;
        _glFlushMappedNamedBufferRange = null;
        _glGetNamedBufferParameteriv = null;
        _glGetNamedBufferParameteri64v = null;
        _glGetNamedBufferPointerv = null;
        _glGetNamedBufferSubData = null;
        _glCreateFramebuffers = null;
        _glNamedFramebufferRenderbuffer = null;
        _glNamedFramebufferParameteri = null;
        _glNamedFramebufferTexture = null;
        _glNamedFramebufferTextureLayer = null;
        _glNamedFramebufferDrawBuffer = null;
        _glNamedFramebufferDrawBuffers = null;
        _glNamedFramebufferReadBuffer = null;
        _glInvalidateNamedFramebufferData = null;
        _glInvalidateNamedFramebufferSubData = null;
        _glClearNamedFramebufferiv = null;
        _glClearNamedFramebufferuiv = null;
        _glClearNamedFramebufferfv = null;
        _glClearNamedFramebufferfi = null;
        _glBlitNamedFramebuffer = null;
        _glCheckNamedFramebufferStatus = null;
        _glGetNamedFramebufferParameteriv = null;
        _glGetNamedFramebufferAttachmentParameteriv = null;
        _glCreateRenderbuffers = null;
        _glNamedRenderbufferStorage = null;
        _glNamedRenderbufferStorageMultisample = null;
        _glGetNamedRenderbufferParameteriv = null;
        _glCreateTextures = null;
        _glTextureBuffer = null;
        _glTextureBufferRange = null;
        _glTextureStorage1D = null;
        _glTextureStorage2D = null;
        _glTextureStorage3D = null;
        _glTextureStorage2DMultisample = null;
        _glTextureStorage3DMultisample = null;
        _glTextureSubImage1D = null;
        _glTextureSubImage2D = null;
        _glTextureSubImage3D = null;
        _glCompressedTextureSubImage1D = null;
        _glCompressedTextureSubImage2D = null;
        _glCompressedTextureSubImage3D = null;
        _glCopyTextureSubImage1D = null;
        _glCopyTextureSubImage2D = null;
        _glCopyTextureSubImage3D = null;
        _glTextureParameterf = null;
        _glTextureParameterfv = null;
        _glTextureParameteri = null;
        _glTextureParameterIiv = null;
        _glTextureParameterIuiv = null;
        _glTextureParameteriv = null;
        _glGenerateTextureMipmap = null;
        _glBindTextureUnit = null;
        _glGetTextureImage = null;
        _glGetCompressedTextureImage = null;
        _glGetTextureLevelParameterfv = null;
        _glGetTextureLevelParameteriv = null;
        _glGetTextureParameterfv = null;
        _glGetTextureParameterIiv = null;
        _glGetTextureParameterIuiv = null;
        _glGetTextureParameteriv = null;
        _glCreateVertexArrays = null;
        _glDisableVertexArrayAttrib = null;
        _glEnableVertexArrayAttrib = null;
        _glVertexArrayElementBuffer = null;
        _glVertexArrayVertexBuffer = null;
        _glVertexArrayVertexBuffers = null;
        _glVertexArrayAttribBinding = null;
        _glVertexArrayAttribFormat = null;
        _glVertexArrayAttribIFormat = null;
        _glVertexArrayAttribLFormat = null;
        _glVertexArrayBindingDivisor = null;
        _glGetVertexArrayiv = null;
        _glGetVertexArrayIndexediv = null;
        _glGetVertexArrayIndexed64iv = null;
        _glCreateSamplers = null;
        _glCreateProgramPipelines = null;
        _glCreateQueries = null;
        _glGetQueryBufferObjecti64v = null;
        _glGetQueryBufferObjectiv = null;
        _glGetQueryBufferObjectui64v = null;
        _glGetQueryBufferObjectuiv = null;
    }
    #endregion

    #region Function wrappers
    public static void glCreateTransformFeedbacks(int n, uint* ids) { QGLFeature.VerifyFunc((nint)_glCreateTransformFeedbacks); _glCreateTransformFeedbacks(n, ids); }
    public static void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer) { QGLFeature.VerifyFunc((nint)_glTransformFeedbackBufferBase); _glTransformFeedbackBufferBase(xfb, index, buffer); }
    public static void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, nint offset, nint size) { QGLFeature.VerifyFunc((nint)_glTransformFeedbackBufferRange); _glTransformFeedbackBufferRange(xfb, index, buffer, offset, size); }
    public static void glGetTransformFeedbackiv(uint xfb, uint pname, int* param) { QGLFeature.VerifyFunc((nint)_glGetTransformFeedbackiv); _glGetTransformFeedbackiv(xfb, pname, param); }
    public static void glGetTransformFeedbacki_v(uint xfb, uint pname, uint index, int* param) { QGLFeature.VerifyFunc((nint)_glGetTransformFeedbacki_v); _glGetTransformFeedbacki_v(xfb, pname, index, param); }
    public static void glGetTransformFeedbacki64_v(uint xfb, uint pname, uint index, long* param) { QGLFeature.VerifyFunc((nint)_glGetTransformFeedbacki64_v); _glGetTransformFeedbacki64_v(xfb, pname, index, param); }
    public static void glCreateBuffers(int n, uint* buffers) { QGLFeature.VerifyFunc((nint)_glCreateBuffers); _glCreateBuffers(n, buffers); }
    public static void glNamedBufferStorage(uint buffer, nint size, void* data, uint flags) { QGLFeature.VerifyFunc((nint)_glNamedBufferStorage); _glNamedBufferStorage(buffer, size, data, flags); }
    public static void glNamedBufferData(uint buffer, nint size, void* data, uint usage) { QGLFeature.VerifyFunc((nint)_glNamedBufferData); _glNamedBufferData(buffer, size, data, usage); }
    public static void glNamedBufferSubData(uint buffer, nint offset, nint size, void* data) { QGLFeature.VerifyFunc((nint)_glNamedBufferSubData); _glNamedBufferSubData(buffer, offset, size, data); }
    public static void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size) { QGLFeature.VerifyFunc((nint)_glCopyNamedBufferSubData); _glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); }
    public static void glClearNamedBufferData(uint buffer, uint internalformat, uint format, uint type, void* data) { QGLFeature.VerifyFunc((nint)_glClearNamedBufferData); _glClearNamedBufferData(buffer, internalformat, format, type, data); }
    public static void glClearNamedBufferSubData(uint buffer, uint internalformat, nint offset, nint size, uint format, uint type, void* data) { QGLFeature.VerifyFunc((nint)_glClearNamedBufferSubData); _glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data); }
    public static void* glMapNamedBuffer(uint buffer, uint access) { QGLFeature.VerifyFunc((nint)_glMapNamedBuffer); return _glMapNamedBuffer(buffer, access); }
    public static void* glMapNamedBufferRange(uint buffer, nint offset, nint length, uint access) { QGLFeature.VerifyFunc((nint)_glMapNamedBufferRange); return _glMapNamedBufferRange(buffer, offset, length, access); }
    public static bool glUnmapNamedBuffer(uint buffer) { QGLFeature.VerifyFunc((nint)_glUnmapNamedBuffer); return _glUnmapNamedBuffer(buffer); }
    public static void glFlushMappedNamedBufferRange(uint buffer, nint offset, nint length) { QGLFeature.VerifyFunc((nint)_glFlushMappedNamedBufferRange); _glFlushMappedNamedBufferRange(buffer, offset, length); }
    public static void glGetNamedBufferParameteriv(uint buffer, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetNamedBufferParameteriv); _glGetNamedBufferParameteriv(buffer, pname, @params); }
    public static void glGetNamedBufferParameteri64v(uint buffer, uint pname, long* @params) { QGLFeature.VerifyFunc((nint)_glGetNamedBufferParameteri64v); _glGetNamedBufferParameteri64v(buffer, pname, @params); }
    public static void glGetNamedBufferPointerv(uint buffer, uint pname, void** @params) { QGLFeature.VerifyFunc((nint)_glGetNamedBufferPointerv); _glGetNamedBufferPointerv(buffer, pname, @params); }
    public static void glGetNamedBufferSubData(uint buffer, nint offset, nint size, void* data) { QGLFeature.VerifyFunc((nint)_glGetNamedBufferSubData); _glGetNamedBufferSubData(buffer, offset, size, data); }
    public static void glCreateFramebuffers(int n, uint* framebuffers) { QGLFeature.VerifyFunc((nint)_glCreateFramebuffers); _glCreateFramebuffers(n, framebuffers); }
    public static void glNamedFramebufferRenderbuffer(uint framebuffer, uint attachment, uint renderbuffertarget, uint renderbuffer) { QGLFeature.VerifyFunc((nint)_glNamedFramebufferRenderbuffer); _glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer); }
    public static void glNamedFramebufferParameteri(uint framebuffer, uint pname, int param) { QGLFeature.VerifyFunc((nint)_glNamedFramebufferParameteri); _glNamedFramebufferParameteri(framebuffer, pname, param); }
    public static void glNamedFramebufferTexture(uint framebuffer, uint attachment, uint texture, int level) { QGLFeature.VerifyFunc((nint)_glNamedFramebufferTexture); _glNamedFramebufferTexture(framebuffer, attachment, texture, level); }
    public static void glNamedFramebufferTextureLayer(uint framebuffer, uint attachment, uint texture, int level, int layer) { QGLFeature.VerifyFunc((nint)_glNamedFramebufferTextureLayer); _glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer); }
    public static void glNamedFramebufferDrawBuffer(uint framebuffer, uint buf) { QGLFeature.VerifyFunc((nint)_glNamedFramebufferDrawBuffer); _glNamedFramebufferDrawBuffer(framebuffer, buf); }
    public static void glNamedFramebufferDrawBuffers(uint framebuffer, int n, uint* bufs) { QGLFeature.VerifyFunc((nint)_glNamedFramebufferDrawBuffers); _glNamedFramebufferDrawBuffers(framebuffer, n, bufs); }
    public static void glNamedFramebufferReadBuffer(uint framebuffer, uint src) { QGLFeature.VerifyFunc((nint)_glNamedFramebufferReadBuffer); _glNamedFramebufferReadBuffer(framebuffer, src); }
    public static void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, uint* attachments) { QGLFeature.VerifyFunc((nint)_glInvalidateNamedFramebufferData); _glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments); }
    public static void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height) { QGLFeature.VerifyFunc((nint)_glInvalidateNamedFramebufferSubData); _glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height); }
    public static void glClearNamedFramebufferiv(uint framebuffer, uint buffer, int drawbuffer, int* value) { QGLFeature.VerifyFunc((nint)_glClearNamedFramebufferiv); _glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value); }
    public static void glClearNamedFramebufferuiv(uint framebuffer, uint buffer, int drawbuffer, uint* value) { QGLFeature.VerifyFunc((nint)_glClearNamedFramebufferuiv); _glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value); }
    public static void glClearNamedFramebufferfv(uint framebuffer, uint buffer, int drawbuffer, float* value) { QGLFeature.VerifyFunc((nint)_glClearNamedFramebufferfv); _glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value); }
    public static void glClearNamedFramebufferfi(uint framebuffer, uint buffer, int drawbuffer, float depth, int stencil) { QGLFeature.VerifyFunc((nint)_glClearNamedFramebufferfi); _glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil); }
    public static void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter) { QGLFeature.VerifyFunc((nint)_glBlitNamedFramebuffer); _glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
    public static uint glCheckNamedFramebufferStatus(uint framebuffer, uint target) { QGLFeature.VerifyFunc((nint)_glCheckNamedFramebufferStatus); return _glCheckNamedFramebufferStatus(framebuffer, target); }
    public static void glGetNamedFramebufferParameteriv(uint framebuffer, uint pname, int* param) { QGLFeature.VerifyFunc((nint)_glGetNamedFramebufferParameteriv); _glGetNamedFramebufferParameteriv(framebuffer, pname, param); }
    public static void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, uint attachment, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetNamedFramebufferAttachmentParameteriv); _glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, @params); }
    public static void glCreateRenderbuffers(int n, uint* renderbuffers) { QGLFeature.VerifyFunc((nint)_glCreateRenderbuffers); _glCreateRenderbuffers(n, renderbuffers); }
    public static void glNamedRenderbufferStorage(uint renderbuffer, uint internalformat, int width, int height) { QGLFeature.VerifyFunc((nint)_glNamedRenderbufferStorage); _glNamedRenderbufferStorage(renderbuffer, internalformat, width, height); }
    public static void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, uint internalformat, int width, int height) { QGLFeature.VerifyFunc((nint)_glNamedRenderbufferStorageMultisample); _glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height); }
    public static void glGetNamedRenderbufferParameteriv(uint renderbuffer, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetNamedRenderbufferParameteriv); _glGetNamedRenderbufferParameteriv(renderbuffer, pname, @params); }
    public static void glCreateTextures(uint target, int n, uint* textures) { QGLFeature.VerifyFunc((nint)_glCreateTextures); _glCreateTextures(target, n, textures); }
    public static void glTextureBuffer(uint texture, uint internalformat, uint buffer) { QGLFeature.VerifyFunc((nint)_glTextureBuffer); _glTextureBuffer(texture, internalformat, buffer); }
    public static void glTextureBufferRange(uint texture, uint internalformat, uint buffer, nint offset, nint size) { QGLFeature.VerifyFunc((nint)_glTextureBufferRange); _glTextureBufferRange(texture, internalformat, buffer, offset, size); }
    public static void glTextureStorage1D(uint texture, int levels, uint internalformat, int width) { QGLFeature.VerifyFunc((nint)_glTextureStorage1D); _glTextureStorage1D(texture, levels, internalformat, width); }
    public static void glTextureStorage2D(uint texture, int levels, uint internalformat, int width, int height) { QGLFeature.VerifyFunc((nint)_glTextureStorage2D); _glTextureStorage2D(texture, levels, internalformat, width, height); }
    public static void glTextureStorage3D(uint texture, int levels, uint internalformat, int width, int height, int depth) { QGLFeature.VerifyFunc((nint)_glTextureStorage3D); _glTextureStorage3D(texture, levels, internalformat, width, height, depth); }
    public static void glTextureStorage2DMultisample(uint texture, int samples, uint internalformat, int width, int height, bool fixedsamplelocations) { QGLFeature.VerifyFunc((nint)_glTextureStorage2DMultisample); _glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations); }
    public static void glTextureStorage3DMultisample(uint texture, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations) { QGLFeature.VerifyFunc((nint)_glTextureStorage3DMultisample); _glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations); }
    public static void glTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, uint type, void* pixels) { QGLFeature.VerifyFunc((nint)_glTextureSubImage1D); _glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels); }
    public static void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels) { QGLFeature.VerifyFunc((nint)_glTextureSubImage2D); _glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels); }
    public static void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels) { QGLFeature.VerifyFunc((nint)_glTextureSubImage3D); _glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
    public static void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, int imageSize, void* data) { QGLFeature.VerifyFunc((nint)_glCompressedTextureSubImage1D); _glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data); }
    public static void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data) { QGLFeature.VerifyFunc((nint)_glCompressedTextureSubImage2D); _glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data); }
    public static void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data) { QGLFeature.VerifyFunc((nint)_glCompressedTextureSubImage3D); _glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
    public static void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width) { QGLFeature.VerifyFunc((nint)_glCopyTextureSubImage1D); _glCopyTextureSubImage1D(texture, level, xoffset, x, y, width); }
    public static void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height) { QGLFeature.VerifyFunc((nint)_glCopyTextureSubImage2D); _glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); }
    public static void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) { QGLFeature.VerifyFunc((nint)_glCopyTextureSubImage3D); _glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); }
    public static void glTextureParameterf(uint texture, uint pname, float param) { QGLFeature.VerifyFunc((nint)_glTextureParameterf); _glTextureParameterf(texture, pname, param); }
    public static void glTextureParameterfv(uint texture, uint pname, float* param) { QGLFeature.VerifyFunc((nint)_glTextureParameterfv); _glTextureParameterfv(texture, pname, param); }
    public static void glTextureParameteri(uint texture, uint pname, int param) { QGLFeature.VerifyFunc((nint)_glTextureParameteri); _glTextureParameteri(texture, pname, param); }
    public static void glTextureParameterIiv(uint texture, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glTextureParameterIiv); _glTextureParameterIiv(texture, pname, @params); }
    public static void glTextureParameterIuiv(uint texture, uint pname, uint* @params) { QGLFeature.VerifyFunc((nint)_glTextureParameterIuiv); _glTextureParameterIuiv(texture, pname, @params); }
    public static void glTextureParameteriv(uint texture, uint pname, int* param) { QGLFeature.VerifyFunc((nint)_glTextureParameteriv); _glTextureParameteriv(texture, pname, param); }
    public static void glGenerateTextureMipmap(uint texture) { QGLFeature.VerifyFunc((nint)_glGenerateTextureMipmap); _glGenerateTextureMipmap(texture); }
    public static void glBindTextureUnit(uint unit, uint texture) { QGLFeature.VerifyFunc((nint)_glBindTextureUnit); _glBindTextureUnit(unit, texture); }
    public static void glGetTextureImage(uint texture, int level, uint format, uint type, int bufSize, void* pixels) { QGLFeature.VerifyFunc((nint)_glGetTextureImage); _glGetTextureImage(texture, level, format, type, bufSize, pixels); }
    public static void glGetCompressedTextureImage(uint texture, int level, int bufSize, void* pixels) { QGLFeature.VerifyFunc((nint)_glGetCompressedTextureImage); _glGetCompressedTextureImage(texture, level, bufSize, pixels); }
    public static void glGetTextureLevelParameterfv(uint texture, int level, uint pname, float* @params) { QGLFeature.VerifyFunc((nint)_glGetTextureLevelParameterfv); _glGetTextureLevelParameterfv(texture, level, pname, @params); }
    public static void glGetTextureLevelParameteriv(uint texture, int level, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetTextureLevelParameteriv); _glGetTextureLevelParameteriv(texture, level, pname, @params); }
    public static void glGetTextureParameterfv(uint texture, uint pname, float* @params) { QGLFeature.VerifyFunc((nint)_glGetTextureParameterfv); _glGetTextureParameterfv(texture, pname, @params); }
    public static void glGetTextureParameterIiv(uint texture, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetTextureParameterIiv); _glGetTextureParameterIiv(texture, pname, @params); }
    public static void glGetTextureParameterIuiv(uint texture, uint pname, uint* @params) { QGLFeature.VerifyFunc((nint)_glGetTextureParameterIuiv); _glGetTextureParameterIuiv(texture, pname, @params); }
    public static void glGetTextureParameteriv(uint texture, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetTextureParameteriv); _glGetTextureParameteriv(texture, pname, @params); }
    public static void glCreateVertexArrays(int n, uint* arrays) { QGLFeature.VerifyFunc((nint)_glCreateVertexArrays); _glCreateVertexArrays(n, arrays); }
    public static void glDisableVertexArrayAttrib(uint vaobj, uint index) { QGLFeature.VerifyFunc((nint)_glDisableVertexArrayAttrib); _glDisableVertexArrayAttrib(vaobj, index); }
    public static void glEnableVertexArrayAttrib(uint vaobj, uint index) { QGLFeature.VerifyFunc((nint)_glEnableVertexArrayAttrib); _glEnableVertexArrayAttrib(vaobj, index); }
    public static void glVertexArrayElementBuffer(uint vaobj, uint buffer) { QGLFeature.VerifyFunc((nint)_glVertexArrayElementBuffer); _glVertexArrayElementBuffer(vaobj, buffer); }
    public static void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride) { QGLFeature.VerifyFunc((nint)_glVertexArrayVertexBuffer); _glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); }
    public static void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, nint* offsets, int* strides) { QGLFeature.VerifyFunc((nint)_glVertexArrayVertexBuffers); _glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); }
    public static void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex) { QGLFeature.VerifyFunc((nint)_glVertexArrayAttribBinding); _glVertexArrayAttribBinding(vaobj, attribindex, bindingindex); }
    public static void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, uint type, bool normalized, uint relativeoffset) { QGLFeature.VerifyFunc((nint)_glVertexArrayAttribFormat); _glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset); }
    public static void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset) { QGLFeature.VerifyFunc((nint)_glVertexArrayAttribIFormat); _glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset); }
    public static void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, uint type, uint relativeoffset) { QGLFeature.VerifyFunc((nint)_glVertexArrayAttribLFormat); _glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset); }
    public static void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor) { QGLFeature.VerifyFunc((nint)_glVertexArrayBindingDivisor); _glVertexArrayBindingDivisor(vaobj, bindingindex, divisor); }
    public static void glGetVertexArrayiv(uint vaobj, uint pname, int* param) { QGLFeature.VerifyFunc((nint)_glGetVertexArrayiv); _glGetVertexArrayiv(vaobj, pname, param); }
    public static void glGetVertexArrayIndexediv(uint vaobj, uint index, uint pname, int* param) { QGLFeature.VerifyFunc((nint)_glGetVertexArrayIndexediv); _glGetVertexArrayIndexediv(vaobj, index, pname, param); }
    public static void glGetVertexArrayIndexed64iv(uint vaobj, uint index, uint pname, long* param) { QGLFeature.VerifyFunc((nint)_glGetVertexArrayIndexed64iv); _glGetVertexArrayIndexed64iv(vaobj, index, pname, param); }
    public static void glCreateSamplers(int n, uint* samplers) { QGLFeature.VerifyFunc((nint)_glCreateSamplers); _glCreateSamplers(n, samplers); }
    public static void glCreateProgramPipelines(int n, uint* pipelines) { QGLFeature.VerifyFunc((nint)_glCreateProgramPipelines); _glCreateProgramPipelines(n, pipelines); }
    public static void glCreateQueries(uint target, int n, uint* ids) { QGLFeature.VerifyFunc((nint)_glCreateQueries); _glCreateQueries(target, n, ids); }
    public static void glGetQueryBufferObjecti64v(uint id, uint buffer, uint pname, nint offset) { QGLFeature.VerifyFunc((nint)_glGetQueryBufferObjecti64v); _glGetQueryBufferObjecti64v(id, buffer, pname, offset); }
    public static void glGetQueryBufferObjectiv(uint id, uint buffer, uint pname, nint offset) { QGLFeature.VerifyFunc((nint)_glGetQueryBufferObjectiv); _glGetQueryBufferObjectiv(id, buffer, pname, offset); }
    public static void glGetQueryBufferObjectui64v(uint id, uint buffer, uint pname, nint offset) { QGLFeature.VerifyFunc((nint)_glGetQueryBufferObjectui64v); _glGetQueryBufferObjectui64v(id, buffer, pname, offset); }
    public static void glGetQueryBufferObjectuiv(uint id, uint buffer, uint pname, nint offset) { QGLFeature.VerifyFunc((nint)_glGetQueryBufferObjectuiv); _glGetQueryBufferObjectuiv(id, buffer, pname, offset); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_direct_state_access", true, false);
}
