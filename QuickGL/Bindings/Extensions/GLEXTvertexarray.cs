// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:41:03.3868022Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLEXTvertexarray
{
    #region Constants
    public const int GL_VERTEX_ARRAY_EXT = 0x00008074;
    public const int GL_NORMAL_ARRAY_EXT = 0x00008075;
    public const int GL_COLOR_ARRAY_EXT = 0x00008076;
    public const int GL_INDEX_ARRAY_EXT = 0x00008077;
    public const int GL_TEXTURE_COORD_ARRAY_EXT = 0x00008078;
    public const int GL_EDGE_FLAG_ARRAY_EXT = 0x00008079;
    public const int GL_VERTEX_ARRAY_SIZE_EXT = 0x0000807A;
    public const int GL_VERTEX_ARRAY_TYPE_EXT = 0x0000807B;
    public const int GL_VERTEX_ARRAY_STRIDE_EXT = 0x0000807C;
    public const int GL_VERTEX_ARRAY_COUNT_EXT = 0x0000807D;
    public const int GL_NORMAL_ARRAY_TYPE_EXT = 0x0000807E;
    public const int GL_NORMAL_ARRAY_STRIDE_EXT = 0x0000807F;
    public const int GL_NORMAL_ARRAY_COUNT_EXT = 0x00008080;
    public const int GL_COLOR_ARRAY_SIZE_EXT = 0x00008081;
    public const int GL_COLOR_ARRAY_TYPE_EXT = 0x00008082;
    public const int GL_COLOR_ARRAY_STRIDE_EXT = 0x00008083;
    public const int GL_COLOR_ARRAY_COUNT_EXT = 0x00008084;
    public const int GL_INDEX_ARRAY_TYPE_EXT = 0x00008085;
    public const int GL_INDEX_ARRAY_STRIDE_EXT = 0x00008086;
    public const int GL_INDEX_ARRAY_COUNT_EXT = 0x00008087;
    public const int GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x00008088;
    public const int GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x00008089;
    public const int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x0000808A;
    public const int GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x0000808B;
    public const int GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x0000808C;
    public const int GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x0000808D;
    public const int GL_VERTEX_ARRAY_POINTER_EXT = 0x0000808E;
    public const int GL_NORMAL_ARRAY_POINTER_EXT = 0x0000808F;
    public const int GL_COLOR_ARRAY_POINTER_EXT = 0x00008090;
    public const int GL_INDEX_ARRAY_POINTER_EXT = 0x00008091;
    public const int GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x00008092;
    public const int GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x00008093;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<int, void> _glArrayElementEXT = null;
    internal static delegate* unmanaged<int, uint, int, int, void*, void> _glColorPointerEXT = null;
    internal static delegate* unmanaged<uint, int, int, void> _glDrawArraysEXT = null;
    internal static delegate* unmanaged<int, int, bool*, void> _glEdgeFlagPointerEXT = null;
    internal static delegate* unmanaged<uint, void**, void> _glGetPointervEXT = null;
    internal static delegate* unmanaged<uint, int, int, void*, void> _glIndexPointerEXT = null;
    internal static delegate* unmanaged<uint, int, int, void*, void> _glNormalPointerEXT = null;
    internal static delegate* unmanaged<int, uint, int, int, void*, void> _glTexCoordPointerEXT = null;
    internal static delegate* unmanaged<int, uint, int, int, void*, void> _glVertexPointerEXT = null;

    internal static void Load()
    {
        _glArrayElementEXT = (delegate* unmanaged<int, void>)QuickGL.GetGLProcAddress("glArrayElementEXT");
        _glColorPointerEXT = (delegate* unmanaged<int, uint, int, int, void*, void>)QuickGL.GetGLProcAddress("glColorPointerEXT");
        _glDrawArraysEXT = (delegate* unmanaged<uint, int, int, void>)QuickGL.GetGLProcAddress("glDrawArraysEXT");
        _glEdgeFlagPointerEXT = (delegate* unmanaged<int, int, bool*, void>)QuickGL.GetGLProcAddress("glEdgeFlagPointerEXT");
        _glGetPointervEXT = (delegate* unmanaged<uint, void**, void>)QuickGL.GetGLProcAddress("glGetPointervEXT");
        _glIndexPointerEXT = (delegate* unmanaged<uint, int, int, void*, void>)QuickGL.GetGLProcAddress("glIndexPointerEXT");
        _glNormalPointerEXT = (delegate* unmanaged<uint, int, int, void*, void>)QuickGL.GetGLProcAddress("glNormalPointerEXT");
        _glTexCoordPointerEXT = (delegate* unmanaged<int, uint, int, int, void*, void>)QuickGL.GetGLProcAddress("glTexCoordPointerEXT");
        _glVertexPointerEXT = (delegate* unmanaged<int, uint, int, int, void*, void>)QuickGL.GetGLProcAddress("glVertexPointerEXT");
    }

    internal static void Unload()
    {
        _glArrayElementEXT = null;
        _glColorPointerEXT = null;
        _glDrawArraysEXT = null;
        _glEdgeFlagPointerEXT = null;
        _glGetPointervEXT = null;
        _glIndexPointerEXT = null;
        _glNormalPointerEXT = null;
        _glTexCoordPointerEXT = null;
        _glVertexPointerEXT = null;
    }
    #endregion

    #region Function wrappers
    public static void glArrayElementEXT(int i) { QGLFeature.VerifyFunc((nint)_glArrayElementEXT); _glArrayElementEXT(i); }
    public static void glColorPointerEXT(int size, uint type, int stride, int count, void* pointer) { QGLFeature.VerifyFunc((nint)_glColorPointerEXT); _glColorPointerEXT(size, type, stride, count, pointer); }
    public static void glDrawArraysEXT(uint mode, int first, int count) { QGLFeature.VerifyFunc((nint)_glDrawArraysEXT); _glDrawArraysEXT(mode, first, count); }
    public static void glEdgeFlagPointerEXT(int stride, int count, bool* pointer) { QGLFeature.VerifyFunc((nint)_glEdgeFlagPointerEXT); _glEdgeFlagPointerEXT(stride, count, pointer); }
    public static void glGetPointervEXT(uint pname, void** @params) { QGLFeature.VerifyFunc((nint)_glGetPointervEXT); _glGetPointervEXT(pname, @params); }
    public static void glIndexPointerEXT(uint type, int stride, int count, void* pointer) { QGLFeature.VerifyFunc((nint)_glIndexPointerEXT); _glIndexPointerEXT(type, stride, count, pointer); }
    public static void glNormalPointerEXT(uint type, int stride, int count, void* pointer) { QGLFeature.VerifyFunc((nint)_glNormalPointerEXT); _glNormalPointerEXT(type, stride, count, pointer); }
    public static void glTexCoordPointerEXT(int size, uint type, int stride, int count, void* pointer) { QGLFeature.VerifyFunc((nint)_glTexCoordPointerEXT); _glTexCoordPointerEXT(size, type, stride, count, pointer); }
    public static void glVertexPointerEXT(int size, uint type, int stride, int count, void* pointer) { QGLFeature.VerifyFunc((nint)_glVertexPointerEXT); _glVertexPointerEXT(size, type, stride, count, pointer); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_EXT_vertex_array", true, false);
}
