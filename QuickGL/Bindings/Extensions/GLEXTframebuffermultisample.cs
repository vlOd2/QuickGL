// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T20:04:55.8353019Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLEXTframebuffermultisample
{
    #region Constants
    public const int GL_RENDERBUFFER_SAMPLES_EXT = 0x00008CAB;
    public const int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x00008D56;
    public const int GL_MAX_SAMPLES_EXT = 0x00008D57;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, int, uint, int, int, void> _glRenderbufferStorageMultisampleEXT = null;

    internal static void Load()
    {
        _glRenderbufferStorageMultisampleEXT = (delegate* unmanaged<uint, int, uint, int, int, void>)QuickGL.GetGLProcAddress("glRenderbufferStorageMultisampleEXT");
    }

    internal static void Unload()
    {
        _glRenderbufferStorageMultisampleEXT = null;
    }
    #endregion

    #region Function wrappers
    public static void glRenderbufferStorageMultisampleEXT(uint target, int samples, uint internalformat, int width, int height) { QGLFeature.VerifyFunc((nint)_glRenderbufferStorageMultisampleEXT); _glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_EXT_framebuffer_multisample", true, false);
}
