// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:43:43.8845547Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBvertexattribbinding
{
    #region Constants
    public const int GL_VERTEX_ATTRIB_BINDING = 0x000082D4;
    public const int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x000082D5;
    public const int GL_VERTEX_BINDING_DIVISOR = 0x000082D6;
    public const int GL_VERTEX_BINDING_OFFSET = 0x000082D7;
    public const int GL_VERTEX_BINDING_STRIDE = 0x000082D8;
    public const int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x000082D9;
    public const int GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x000082DA;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, uint, nint, int, void> _glBindVertexBuffer = null;
    internal static delegate* unmanaged<uint, int, uint, bool, uint, void> _glVertexAttribFormat = null;
    internal static delegate* unmanaged<uint, int, uint, uint, void> _glVertexAttribIFormat = null;
    internal static delegate* unmanaged<uint, int, uint, uint, void> _glVertexAttribLFormat = null;
    internal static delegate* unmanaged<uint, uint, void> _glVertexAttribBinding = null;
    internal static delegate* unmanaged<uint, uint, void> _glVertexBindingDivisor = null;

    internal static void Load()
    {
        _glBindVertexBuffer = (delegate* unmanaged<uint, uint, nint, int, void>)QuickGL.GetGLProcAddress("glBindVertexBuffer");
        _glVertexAttribFormat = (delegate* unmanaged<uint, int, uint, bool, uint, void>)QuickGL.GetGLProcAddress("glVertexAttribFormat");
        _glVertexAttribIFormat = (delegate* unmanaged<uint, int, uint, uint, void>)QuickGL.GetGLProcAddress("glVertexAttribIFormat");
        _glVertexAttribLFormat = (delegate* unmanaged<uint, int, uint, uint, void>)QuickGL.GetGLProcAddress("glVertexAttribLFormat");
        _glVertexAttribBinding = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glVertexAttribBinding");
        _glVertexBindingDivisor = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glVertexBindingDivisor");
    }

    internal static void Unload()
    {
        _glBindVertexBuffer = null;
        _glVertexAttribFormat = null;
        _glVertexAttribIFormat = null;
        _glVertexAttribLFormat = null;
        _glVertexAttribBinding = null;
        _glVertexBindingDivisor = null;
    }
    #endregion

    #region Function wrappers
    public static void glBindVertexBuffer(uint bindingindex, uint buffer, nint offset, int stride) { QGLFeature.VerifyFunc((nint)_glBindVertexBuffer); _glBindVertexBuffer(bindingindex, buffer, offset, stride); }
    public static void glVertexAttribFormat(uint attribindex, int size, uint type, bool normalized, uint relativeoffset) { QGLFeature.VerifyFunc((nint)_glVertexAttribFormat); _glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset); }
    public static void glVertexAttribIFormat(uint attribindex, int size, uint type, uint relativeoffset) { QGLFeature.VerifyFunc((nint)_glVertexAttribIFormat); _glVertexAttribIFormat(attribindex, size, type, relativeoffset); }
    public static void glVertexAttribLFormat(uint attribindex, int size, uint type, uint relativeoffset) { QGLFeature.VerifyFunc((nint)_glVertexAttribLFormat); _glVertexAttribLFormat(attribindex, size, type, relativeoffset); }
    public static void glVertexAttribBinding(uint attribindex, uint bindingindex) { QGLFeature.VerifyFunc((nint)_glVertexAttribBinding); _glVertexAttribBinding(attribindex, bindingindex); }
    public static void glVertexBindingDivisor(uint bindingindex, uint divisor) { QGLFeature.VerifyFunc((nint)_glVertexBindingDivisor); _glVertexBindingDivisor(bindingindex, divisor); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_vertex_attrib_binding", true, false);
}
