// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T20:04:55.7585546Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBtexturestoragemultisample
{
    #region Constants
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, int, uint, int, int, bool, void> _glTexStorage2DMultisample = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, bool, void> _glTexStorage3DMultisample = null;

    internal static void Load()
    {
        _glTexStorage2DMultisample = (delegate* unmanaged<uint, int, uint, int, int, bool, void>)QuickGL.GetGLProcAddress("glTexStorage2DMultisample");
        _glTexStorage3DMultisample = (delegate* unmanaged<uint, int, uint, int, int, int, bool, void>)QuickGL.GetGLProcAddress("glTexStorage3DMultisample");
    }

    internal static void Unload()
    {
        _glTexStorage2DMultisample = null;
        _glTexStorage3DMultisample = null;
    }
    #endregion

    #region Function wrappers
    public static void glTexStorage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations) { QGLFeature.VerifyFunc((nint)_glTexStorage2DMultisample); _glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
    public static void glTexStorage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations) { QGLFeature.VerifyFunc((nint)_glTexStorage3DMultisample); _glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_texture_storage_multisample", true, false);
}
