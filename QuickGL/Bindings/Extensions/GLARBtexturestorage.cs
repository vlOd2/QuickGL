// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBtexturestorage
{
    #region Constants
    public const int GL_TEXTURE_IMMUTABLE_FORMAT = 0x0000912F;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, int, uint, int, void> _glTexStorage1D = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, void> _glTexStorage2D = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, void> _glTexStorage3D = null;

    internal static void Load()
    {
        _glTexStorage1D = (delegate* unmanaged<uint, int, uint, int, void>)QuickGL.GetGLProcAddress("glTexStorage1D");
        _glTexStorage2D = (delegate* unmanaged<uint, int, uint, int, int, void>)QuickGL.GetGLProcAddress("glTexStorage2D");
        _glTexStorage3D = (delegate* unmanaged<uint, int, uint, int, int, int, void>)QuickGL.GetGLProcAddress("glTexStorage3D");
    }

    internal static void Unload()
    {
        _glTexStorage1D = null;
        _glTexStorage2D = null;
        _glTexStorage3D = null;
    }
    #endregion

    #region Function wrappers
    public static void glTexStorage1D(uint target, int levels, uint internalformat, int width) { QGLFeature.VerifyFunc((nint)_glTexStorage1D); _glTexStorage1D(target, levels, internalformat, width); }
    public static void glTexStorage2D(uint target, int levels, uint internalformat, int width, int height) { QGLFeature.VerifyFunc((nint)_glTexStorage2D); _glTexStorage2D(target, levels, internalformat, width, height); }
    public static void glTexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth) { QGLFeature.VerifyFunc((nint)_glTexStorage3D); _glTexStorage3D(target, levels, internalformat, width, height, depth); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_texture_storage", true, false);
}
