// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:43:43.9299906Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLEXTfragmentshadingrate
{
    #region Constants
    public const int GL_SHADING_RATE_1X1_PIXELS_EXT = 0x000096A6;
    public const int GL_SHADING_RATE_1X2_PIXELS_EXT = 0x000096A7;
    public const int GL_SHADING_RATE_2X1_PIXELS_EXT = 0x000096A8;
    public const int GL_SHADING_RATE_2X2_PIXELS_EXT = 0x000096A9;
    public const int GL_SHADING_RATE_1X4_PIXELS_EXT = 0x000096AA;
    public const int GL_SHADING_RATE_4X1_PIXELS_EXT = 0x000096AB;
    public const int GL_SHADING_RATE_4X2_PIXELS_EXT = 0x000096AC;
    public const int GL_SHADING_RATE_2X4_PIXELS_EXT = 0x000096AD;
    public const int GL_SHADING_RATE_4X4_PIXELS_EXT = 0x000096AE;
    public const int GL_SHADING_RATE_EXT = 0x000096D0;
    public const int GL_SHADING_RATE_ATTACHMENT_EXT = 0x000096D1;
    public const int GL_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_EXT = 0x000096D2;
    public const int GL_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_EXT = 0x000096D3;
    public const int GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_EXT = 0x000096D4;
    public const int GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_EXT = 0x000096D5;
    public const int GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_EXT = 0x000096D6;
    public const int GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x000096D7;
    public const int GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = 0x000096D8;
    public const int GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x000096D9;
    public const int GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = 0x000096DA;
    public const int GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT = 0x000096DB;
    public const int GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT = 0x000096DC;
    public const int GL_FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT = 0x000096DD;
    public const int GL_FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT = 0x000096DE;
    public const int GL_FRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT = 0x000096DF;
    public const int GL_FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT = 0x00008F6F;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<int, int, int*, uint*, void> _glGetFragmentShadingRatesEXT = null;
    internal static delegate* unmanaged<uint, void> _glShadingRateEXT = null;
    internal static delegate* unmanaged<uint, uint, void> _glShadingRateCombinerOpsEXT = null;
    internal static delegate* unmanaged<uint, uint, uint, int, int, int, int, void> _glFramebufferShadingRateEXT = null;

    internal static void Load()
    {
        _glGetFragmentShadingRatesEXT = (delegate* unmanaged<int, int, int*, uint*, void>)QuickGL.GetGLProcAddress("glGetFragmentShadingRatesEXT");
        _glShadingRateEXT = (delegate* unmanaged<uint, void>)QuickGL.GetGLProcAddress("glShadingRateEXT");
        _glShadingRateCombinerOpsEXT = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glShadingRateCombinerOpsEXT");
        _glFramebufferShadingRateEXT = (delegate* unmanaged<uint, uint, uint, int, int, int, int, void>)QuickGL.GetGLProcAddress("glFramebufferShadingRateEXT");
    }

    internal static void Unload()
    {
        _glGetFragmentShadingRatesEXT = null;
        _glShadingRateEXT = null;
        _glShadingRateCombinerOpsEXT = null;
        _glFramebufferShadingRateEXT = null;
    }
    #endregion

    #region Function wrappers
    public static void glGetFragmentShadingRatesEXT(int samples, int maxCount, int* count, uint* shadingRates) { QGLFeature.VerifyFunc((nint)_glGetFragmentShadingRatesEXT); _glGetFragmentShadingRatesEXT(samples, maxCount, count, shadingRates); }
    public static void glShadingRateEXT(uint rate) { QGLFeature.VerifyFunc((nint)_glShadingRateEXT); _glShadingRateEXT(rate); }
    public static void glShadingRateCombinerOpsEXT(uint combinerOp0, uint combinerOp1) { QGLFeature.VerifyFunc((nint)_glShadingRateCombinerOpsEXT); _glShadingRateCombinerOpsEXT(combinerOp0, combinerOp1); }
    public static void glFramebufferShadingRateEXT(uint target, uint attachment, uint texture, int baseLayer, int numLayers, int texelWidth, int texelHeight) { QGLFeature.VerifyFunc((nint)_glFramebufferShadingRateEXT); _glFramebufferShadingRateEXT(target, attachment, texture, baseLayer, numLayers, texelWidth, texelHeight); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_EXT_fragment_shading_rate", true, true);
}
