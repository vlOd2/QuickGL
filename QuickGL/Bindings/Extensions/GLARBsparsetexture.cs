// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBsparsetexture
{
    #region Constants
    public const int GL_TEXTURE_SPARSE_ARB = 0x000091A6;
    public const int GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x000091A7;
    public const int GL_NUM_SPARSE_LEVELS_ARB = 0x000091AA;
    public const int GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x000091A8;
    public const int GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x00009195;
    public const int GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x00009196;
    public const int GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x00009197;
    public const int GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x00009198;
    public const int GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x00009199;
    public const int GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x0000919A;
    public const int GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x000091A9;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, bool, void> _glTexPageCommitmentARB = null;

    internal static void Load()
    {
        _glTexPageCommitmentARB = (delegate* unmanaged<uint, int, int, int, int, int, int, int, bool, void>)QuickGL.GetGLProcAddress("glTexPageCommitmentARB");
    }

    internal static void Unload()
    {
        _glTexPageCommitmentARB = null;
    }
    #endregion

    #region Function wrappers
    public static void glTexPageCommitmentARB(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit) { QGLFeature.VerifyFunc((nint)_glTexPageCommitmentARB); _glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_sparse_texture", true, false);
}
