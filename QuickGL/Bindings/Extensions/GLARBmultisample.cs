// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:43:43.7911630Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBmultisample
{
    #region Constants
    public const int GL_MULTISAMPLE_ARB = 0x0000809D;
    public const int GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x0000809E;
    public const int GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x0000809F;
    public const int GL_SAMPLE_COVERAGE_ARB = 0x000080A0;
    public const int GL_SAMPLE_BUFFERS_ARB = 0x000080A8;
    public const int GL_SAMPLES_ARB = 0x000080A9;
    public const int GL_SAMPLE_COVERAGE_VALUE_ARB = 0x000080AA;
    public const int GL_SAMPLE_COVERAGE_INVERT_ARB = 0x000080AB;
    public const int GL_MULTISAMPLE_BIT_ARB = 0x20000000;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<float, bool, void> _glSampleCoverageARB = null;

    internal static void Load()
    {
        _glSampleCoverageARB = (delegate* unmanaged<float, bool, void>)QuickGL.GetGLProcAddress("glSampleCoverageARB");
    }

    internal static void Unload()
    {
        _glSampleCoverageARB = null;
    }
    #endregion

    #region Function wrappers
    public static void glSampleCoverageARB(float value, bool invert) { QGLFeature.VerifyFunc((nint)_glSampleCoverageARB); _glSampleCoverageARB(value, invert); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_multisample", true, false);
}
