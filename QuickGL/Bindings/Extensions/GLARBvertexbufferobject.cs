// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T20:04:55.7705456Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings.Extensions;

public static unsafe class GLARBvertexbufferobject
{
    #region Constants
    public const int GL_BUFFER_SIZE_ARB = 0x00008764;
    public const int GL_BUFFER_USAGE_ARB = 0x00008765;
    public const int GL_ARRAY_BUFFER_ARB = 0x00008892;
    public const int GL_ELEMENT_ARRAY_BUFFER_ARB = 0x00008893;
    public const int GL_ARRAY_BUFFER_BINDING_ARB = 0x00008894;
    public const int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x00008895;
    public const int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x00008896;
    public const int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x00008897;
    public const int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x00008898;
    public const int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x00008899;
    public const int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x0000889A;
    public const int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x0000889B;
    public const int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x0000889C;
    public const int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x0000889D;
    public const int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x0000889E;
    public const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x0000889F;
    public const int GL_READ_ONLY_ARB = 0x000088B8;
    public const int GL_WRITE_ONLY_ARB = 0x000088B9;
    public const int GL_READ_WRITE_ARB = 0x000088BA;
    public const int GL_BUFFER_ACCESS_ARB = 0x000088BB;
    public const int GL_BUFFER_MAPPED_ARB = 0x000088BC;
    public const int GL_BUFFER_MAP_POINTER_ARB = 0x000088BD;
    public const int GL_STREAM_DRAW_ARB = 0x000088E0;
    public const int GL_STREAM_READ_ARB = 0x000088E1;
    public const int GL_STREAM_COPY_ARB = 0x000088E2;
    public const int GL_STATIC_DRAW_ARB = 0x000088E4;
    public const int GL_STATIC_READ_ARB = 0x000088E5;
    public const int GL_STATIC_COPY_ARB = 0x000088E6;
    public const int GL_DYNAMIC_DRAW_ARB = 0x000088E8;
    public const int GL_DYNAMIC_READ_ARB = 0x000088E9;
    public const int GL_DYNAMIC_COPY_ARB = 0x000088EA;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, uint, void> _glBindBufferARB = null;
    internal static delegate* unmanaged<int, uint*, void> _glDeleteBuffersARB = null;
    internal static delegate* unmanaged<int, uint*, void> _glGenBuffersARB = null;
    internal static delegate* unmanaged<uint, bool> _glIsBufferARB = null;
    internal static delegate* unmanaged<uint, nint, void*, uint, void> _glBufferDataARB = null;
    internal static delegate* unmanaged<uint, nint, nint, void*, void> _glBufferSubDataARB = null;
    internal static delegate* unmanaged<uint, nint, nint, void*, void> _glGetBufferSubDataARB = null;
    internal static delegate* unmanaged<uint, uint, void*> _glMapBufferARB = null;
    internal static delegate* unmanaged<uint, bool> _glUnmapBufferARB = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetBufferParameterivARB = null;
    internal static delegate* unmanaged<uint, uint, void**, void> _glGetBufferPointervARB = null;

    internal static void Load()
    {
        _glBindBufferARB = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glBindBufferARB");
        _glDeleteBuffersARB = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glDeleteBuffersARB");
        _glGenBuffersARB = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glGenBuffersARB");
        _glIsBufferARB = (delegate* unmanaged<uint, bool>)QuickGL.GetGLProcAddress("glIsBufferARB");
        _glBufferDataARB = (delegate* unmanaged<uint, nint, void*, uint, void>)QuickGL.GetGLProcAddress("glBufferDataARB");
        _glBufferSubDataARB = (delegate* unmanaged<uint, nint, nint, void*, void>)QuickGL.GetGLProcAddress("glBufferSubDataARB");
        _glGetBufferSubDataARB = (delegate* unmanaged<uint, nint, nint, void*, void>)QuickGL.GetGLProcAddress("glGetBufferSubDataARB");
        _glMapBufferARB = (delegate* unmanaged<uint, uint, void*>)QuickGL.GetGLProcAddress("glMapBufferARB");
        _glUnmapBufferARB = (delegate* unmanaged<uint, bool>)QuickGL.GetGLProcAddress("glUnmapBufferARB");
        _glGetBufferParameterivARB = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetBufferParameterivARB");
        _glGetBufferPointervARB = (delegate* unmanaged<uint, uint, void**, void>)QuickGL.GetGLProcAddress("glGetBufferPointervARB");
    }

    internal static void Unload()
    {
        _glBindBufferARB = null;
        _glDeleteBuffersARB = null;
        _glGenBuffersARB = null;
        _glIsBufferARB = null;
        _glBufferDataARB = null;
        _glBufferSubDataARB = null;
        _glGetBufferSubDataARB = null;
        _glMapBufferARB = null;
        _glUnmapBufferARB = null;
        _glGetBufferParameterivARB = null;
        _glGetBufferPointervARB = null;
    }
    #endregion

    #region Function wrappers
    public static void glBindBufferARB(uint target, uint buffer) { QGLFeature.VerifyFunc((nint)_glBindBufferARB); _glBindBufferARB(target, buffer); }
    public static void glDeleteBuffersARB(int n, uint* buffers) { QGLFeature.VerifyFunc((nint)_glDeleteBuffersARB); _glDeleteBuffersARB(n, buffers); }
    public static void glGenBuffersARB(int n, uint* buffers) { QGLFeature.VerifyFunc((nint)_glGenBuffersARB); _glGenBuffersARB(n, buffers); }
    public static bool glIsBufferARB(uint buffer) { QGLFeature.VerifyFunc((nint)_glIsBufferARB); return _glIsBufferARB(buffer); }
    public static void glBufferDataARB(uint target, nint size, void* data, uint usage) { QGLFeature.VerifyFunc((nint)_glBufferDataARB); _glBufferDataARB(target, size, data, usage); }
    public static void glBufferSubDataARB(uint target, nint offset, nint size, void* data) { QGLFeature.VerifyFunc((nint)_glBufferSubDataARB); _glBufferSubDataARB(target, offset, size, data); }
    public static void glGetBufferSubDataARB(uint target, nint offset, nint size, void* data) { QGLFeature.VerifyFunc((nint)_glGetBufferSubDataARB); _glGetBufferSubDataARB(target, offset, size, data); }
    public static void* glMapBufferARB(uint target, uint access) { QGLFeature.VerifyFunc((nint)_glMapBufferARB); return _glMapBufferARB(target, access); }
    public static bool glUnmapBufferARB(uint target) { QGLFeature.VerifyFunc((nint)_glUnmapBufferARB); return _glUnmapBufferARB(target); }
    public static void glGetBufferParameterivARB(uint target, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetBufferParameterivARB); _glGetBufferParameterivARB(target, pname, @params); }
    public static void glGetBufferPointervARB(uint target, uint pname, void** @params) { QGLFeature.VerifyFunc((nint)_glGetBufferPointervARB); _glGetBufferPointervARB(target, pname, @params); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ARB_vertex_buffer_object", true, false);
}
