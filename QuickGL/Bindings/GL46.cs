// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings;

public static unsafe class GL46
{
    #region Constants
    public const int GL_CONTEXT_RELEASE_BEHAVIOR = 0x000082FB;
    public const int GL_NONE = 0x00000000;
    public const int GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x000082FC;
    public const int GL_SHADER_BINARY_FORMAT_SPIR_V = 0x00009551;
    public const int GL_SPIR_V_BINARY = 0x00009552;
    public const int GL_PARAMETER_BUFFER = 0x000080EE;
    public const int GL_PARAMETER_BUFFER_BINDING = 0x000080EF;
    public const int GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
    public const int GL_VERTICES_SUBMITTED = 0x000082EE;
    public const int GL_PRIMITIVES_SUBMITTED = 0x000082EF;
    public const int GL_VERTEX_SHADER_INVOCATIONS = 0x000082F0;
    public const int GL_TESS_CONTROL_SHADER_PATCHES = 0x000082F1;
    public const int GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x000082F2;
    public const int GL_GEOMETRY_SHADER_INVOCATIONS = 0x0000887F;
    public const int GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x000082F3;
    public const int GL_FRAGMENT_SHADER_INVOCATIONS = 0x000082F4;
    public const int GL_COMPUTE_SHADER_INVOCATIONS = 0x000082F5;
    public const int GL_CLIPPING_INPUT_PRIMITIVES = 0x000082F6;
    public const int GL_CLIPPING_OUTPUT_PRIMITIVES = 0x000082F7;
    public const int GL_POLYGON_OFFSET_CLAMP = 0x00008E1B;
    public const int GL_SPIR_V_EXTENSIONS = 0x00009553;
    public const int GL_NUM_SPIR_V_EXTENSIONS = 0x00009554;
    public const int GL_TEXTURE_MAX_ANISOTROPY = 0x000084FE;
    public const int GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x000084FF;
    public const int GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x000082EC;
    public const int GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x000082ED;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, byte*, uint, uint*, uint*, void> _glSpecializeShader = null;
    internal static delegate* unmanaged<uint, void*, nint, int, int, void> _glMultiDrawArraysIndirectCount = null;
    internal static delegate* unmanaged<uint, uint, void*, nint, int, int, void> _glMultiDrawElementsIndirectCount = null;
    internal static delegate* unmanaged<float, float, float, void> _glPolygonOffsetClamp = null;

    internal static void Load()
    {
        _glSpecializeShader = (delegate* unmanaged<uint, byte*, uint, uint*, uint*, void>)QuickGL.GetGLProcAddress("glSpecializeShader");
        _glMultiDrawArraysIndirectCount = (delegate* unmanaged<uint, void*, nint, int, int, void>)QuickGL.GetGLProcAddress("glMultiDrawArraysIndirectCount");
        _glMultiDrawElementsIndirectCount = (delegate* unmanaged<uint, uint, void*, nint, int, int, void>)QuickGL.GetGLProcAddress("glMultiDrawElementsIndirectCount");
        _glPolygonOffsetClamp = (delegate* unmanaged<float, float, float, void>)QuickGL.GetGLProcAddress("glPolygonOffsetClamp");
    }

    internal static void Unload()
    {
        _glSpecializeShader = null;
        _glMultiDrawArraysIndirectCount = null;
        _glMultiDrawElementsIndirectCount = null;
        _glPolygonOffsetClamp = null;
    }
    #endregion

    #region Function wrappers
    public static void glSpecializeShader(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue) { QGLFeature.VerifyFunc((nint)_glSpecializeShader); _glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
    public static void glMultiDrawArraysIndirectCount(uint mode, void* indirect, nint drawcount, int maxdrawcount, int stride) { QGLFeature.VerifyFunc((nint)_glMultiDrawArraysIndirectCount); _glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride); }
    public static void glMultiDrawElementsIndirectCount(uint mode, uint type, void* indirect, nint drawcount, int maxdrawcount, int stride) { QGLFeature.VerifyFunc((nint)_glMultiDrawElementsIndirectCount); _glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride); }
    public static void glPolygonOffsetClamp(float factor, float units, float clamp) { QGLFeature.VerifyFunc((nint)_glPolygonOffsetClamp); _glPolygonOffsetClamp(factor, units, clamp); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_VERSION_4_6", false, false);
}
