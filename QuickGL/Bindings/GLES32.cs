// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:41:02.9970621Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings;

public static unsafe class GLES32
{
    #region Constants
    public const int GL_MULTISAMPLE_LINE_WIDTH_RANGE = 0x00009381;
    public const int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 0x00009382;
    public const int GL_MULTIPLY = 0x00009294;
    public const int GL_SCREEN = 0x00009295;
    public const int GL_OVERLAY = 0x00009296;
    public const int GL_DARKEN = 0x00009297;
    public const int GL_LIGHTEN = 0x00009298;
    public const int GL_COLORDODGE = 0x00009299;
    public const int GL_COLORBURN = 0x0000929A;
    public const int GL_HARDLIGHT = 0x0000929B;
    public const int GL_SOFTLIGHT = 0x0000929C;
    public const int GL_DIFFERENCE = 0x0000929E;
    public const int GL_EXCLUSION = 0x000092A0;
    public const int GL_HSL_HUE = 0x000092AD;
    public const int GL_HSL_SATURATION = 0x000092AE;
    public const int GL_HSL_COLOR = 0x000092AF;
    public const int GL_HSL_LUMINOSITY = 0x000092B0;
    public const int GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x00008242;
    public const int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x00008243;
    public const int GL_DEBUG_CALLBACK_FUNCTION = 0x00008244;
    public const int GL_DEBUG_CALLBACK_USER_PARAM = 0x00008245;
    public const int GL_DEBUG_SOURCE_API = 0x00008246;
    public const int GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x00008247;
    public const int GL_DEBUG_SOURCE_SHADER_COMPILER = 0x00008248;
    public const int GL_DEBUG_SOURCE_THIRD_PARTY = 0x00008249;
    public const int GL_DEBUG_SOURCE_APPLICATION = 0x0000824A;
    public const int GL_DEBUG_SOURCE_OTHER = 0x0000824B;
    public const int GL_DEBUG_TYPE_ERROR = 0x0000824C;
    public const int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x0000824D;
    public const int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x0000824E;
    public const int GL_DEBUG_TYPE_PORTABILITY = 0x0000824F;
    public const int GL_DEBUG_TYPE_PERFORMANCE = 0x00008250;
    public const int GL_DEBUG_TYPE_OTHER = 0x00008251;
    public const int GL_DEBUG_TYPE_MARKER = 0x00008268;
    public const int GL_DEBUG_TYPE_PUSH_GROUP = 0x00008269;
    public const int GL_DEBUG_TYPE_POP_GROUP = 0x0000826A;
    public const int GL_DEBUG_SEVERITY_NOTIFICATION = 0x0000826B;
    public const int GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x0000826C;
    public const int GL_DEBUG_GROUP_STACK_DEPTH = 0x0000826D;
    public const int GL_BUFFER = 0x000082E0;
    public const int GL_SHADER = 0x000082E1;
    public const int GL_PROGRAM = 0x000082E2;
    public const int GL_VERTEX_ARRAY = 0x00008074;
    public const int GL_QUERY = 0x000082E3;
    public const int GL_PROGRAM_PIPELINE = 0x000082E4;
    public const int GL_SAMPLER = 0x000082E6;
    public const int GL_MAX_LABEL_LENGTH = 0x000082E8;
    public const int GL_MAX_DEBUG_MESSAGE_LENGTH = 0x00009143;
    public const int GL_MAX_DEBUG_LOGGED_MESSAGES = 0x00009144;
    public const int GL_DEBUG_LOGGED_MESSAGES = 0x00009145;
    public const int GL_DEBUG_SEVERITY_HIGH = 0x00009146;
    public const int GL_DEBUG_SEVERITY_MEDIUM = 0x00009147;
    public const int GL_DEBUG_SEVERITY_LOW = 0x00009148;
    public const int GL_DEBUG_OUTPUT = 0x000092E0;
    public const int GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
    public const int GL_STACK_OVERFLOW = 0x00000503;
    public const int GL_STACK_UNDERFLOW = 0x00000504;
    public const int GL_GEOMETRY_SHADER = 0x00008DD9;
    public const int GL_GEOMETRY_SHADER_BIT = 0x00000004;
    public const int GL_GEOMETRY_VERTICES_OUT = 0x00008916;
    public const int GL_GEOMETRY_INPUT_TYPE = 0x00008917;
    public const int GL_GEOMETRY_OUTPUT_TYPE = 0x00008918;
    public const int GL_GEOMETRY_SHADER_INVOCATIONS = 0x0000887F;
    public const int GL_LAYER_PROVOKING_VERTEX = 0x0000825E;
    public const int GL_LINES_ADJACENCY = 0x0000000A;
    public const int GL_LINE_STRIP_ADJACENCY = 0x0000000B;
    public const int GL_TRIANGLES_ADJACENCY = 0x0000000C;
    public const int GL_TRIANGLE_STRIP_ADJACENCY = 0x0000000D;
    public const int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x00008DDF;
    public const int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x00008A2C;
    public const int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x00008A32;
    public const int GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x00009123;
    public const int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x00009124;
    public const int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x00008DE0;
    public const int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x00008DE1;
    public const int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x00008E5A;
    public const int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x00008C29;
    public const int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x000092CF;
    public const int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x000092D5;
    public const int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x000090CD;
    public const int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x000090D7;
    public const int GL_FIRST_VERTEX_CONVENTION = 0x00008E4D;
    public const int GL_LAST_VERTEX_CONVENTION = 0x00008E4E;
    public const int GL_UNDEFINED_VERTEX = 0x00008260;
    public const int GL_PRIMITIVES_GENERATED = 0x00008C87;
    public const int GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x00009312;
    public const int GL_MAX_FRAMEBUFFER_LAYERS = 0x00009317;
    public const int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x00008DA8;
    public const int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x00008DA7;
    public const int GL_REFERENCED_BY_GEOMETRY_SHADER = 0x00009309;
    public const int GL_PRIMITIVE_BOUNDING_BOX = 0x000092BE;
    public const int GL_NO_ERROR = 0x00000000;
    public const int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
    public const int GL_CONTEXT_FLAGS = 0x0000821E;
    public const int GL_LOSE_CONTEXT_ON_RESET = 0x00008252;
    public const int GL_GUILTY_CONTEXT_RESET = 0x00008253;
    public const int GL_INNOCENT_CONTEXT_RESET = 0x00008254;
    public const int GL_UNKNOWN_CONTEXT_RESET = 0x00008255;
    public const int GL_RESET_NOTIFICATION_STRATEGY = 0x00008256;
    public const int GL_NO_RESET_NOTIFICATION = 0x00008261;
    public const int GL_CONTEXT_LOST = 0x00000507;
    public const int GL_SAMPLE_SHADING = 0x00008C36;
    public const int GL_MIN_SAMPLE_SHADING_VALUE = 0x00008C37;
    public const int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x00008E5B;
    public const int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x00008E5C;
    public const int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x00008E5D;
    public const int GL_PATCHES = 0x0000000E;
    public const int GL_PATCH_VERTICES = 0x00008E72;
    public const int GL_TESS_CONTROL_OUTPUT_VERTICES = 0x00008E75;
    public const int GL_TESS_GEN_MODE = 0x00008E76;
    public const int GL_TESS_GEN_SPACING = 0x00008E77;
    public const int GL_TESS_GEN_VERTEX_ORDER = 0x00008E78;
    public const int GL_TESS_GEN_POINT_MODE = 0x00008E79;
    public const int GL_TRIANGLES = 0x00000004;
    public const int GL_ISOLINES = 0x00008E7A;
    public const int GL_QUADS = 0x00000007;
    public const int GL_EQUAL = 0x00000202;
    public const int GL_FRACTIONAL_ODD = 0x00008E7B;
    public const int GL_FRACTIONAL_EVEN = 0x00008E7C;
    public const int GL_CCW = 0x00000901;
    public const int GL_CW = 0x00000900;
    public const int GL_MAX_PATCH_VERTICES = 0x00008E7D;
    public const int GL_MAX_TESS_GEN_LEVEL = 0x00008E7E;
    public const int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x00008E7F;
    public const int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x00008E80;
    public const int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x00008E81;
    public const int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x00008E82;
    public const int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x00008E83;
    public const int GL_MAX_TESS_PATCH_COMPONENTS = 0x00008E84;
    public const int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x00008E85;
    public const int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x00008E86;
    public const int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x00008E89;
    public const int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x00008E8A;
    public const int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x0000886C;
    public const int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x0000886D;
    public const int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x00008E1E;
    public const int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x00008E1F;
    public const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x000092CD;
    public const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x000092CE;
    public const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x000092D3;
    public const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x000092D4;
    public const int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x000090CB;
    public const int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x000090CC;
    public const int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x000090D8;
    public const int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x000090D9;
    public const int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x00008221;
    public const int GL_IS_PER_PATCH = 0x000092E7;
    public const int GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x00009307;
    public const int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x00009308;
    public const int GL_TESS_CONTROL_SHADER = 0x00008E88;
    public const int GL_TESS_EVALUATION_SHADER = 0x00008E87;
    public const int GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
    public const int GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
    public const int GL_TEXTURE_BORDER_COLOR = 0x00001004;
    public const int GL_CLAMP_TO_BORDER = 0x0000812D;
    public const int GL_TEXTURE_BUFFER = 0x00008C2A;
    public const int GL_TEXTURE_BUFFER_BINDING = 0x00008C2A;
    public const int GL_MAX_TEXTURE_BUFFER_SIZE = 0x00008C2B;
    public const int GL_TEXTURE_BINDING_BUFFER = 0x00008C2C;
    public const int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x00008C2D;
    public const int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x0000919F;
    public const int GL_SAMPLER_BUFFER = 0x00008DC2;
    public const int GL_INT_SAMPLER_BUFFER = 0x00008DD0;
    public const int GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x00008DD8;
    public const int GL_IMAGE_BUFFER = 0x00009051;
    public const int GL_INT_IMAGE_BUFFER = 0x0000905C;
    public const int GL_UNSIGNED_INT_IMAGE_BUFFER = 0x00009067;
    public const int GL_TEXTURE_BUFFER_OFFSET = 0x0000919D;
    public const int GL_TEXTURE_BUFFER_SIZE = 0x0000919E;
    public const int GL_COMPRESSED_RGBA_ASTC_4x4 = 0x000093B0;
    public const int GL_COMPRESSED_RGBA_ASTC_5x4 = 0x000093B1;
    public const int GL_COMPRESSED_RGBA_ASTC_5x5 = 0x000093B2;
    public const int GL_COMPRESSED_RGBA_ASTC_6x5 = 0x000093B3;
    public const int GL_COMPRESSED_RGBA_ASTC_6x6 = 0x000093B4;
    public const int GL_COMPRESSED_RGBA_ASTC_8x5 = 0x000093B5;
    public const int GL_COMPRESSED_RGBA_ASTC_8x6 = 0x000093B6;
    public const int GL_COMPRESSED_RGBA_ASTC_8x8 = 0x000093B7;
    public const int GL_COMPRESSED_RGBA_ASTC_10x5 = 0x000093B8;
    public const int GL_COMPRESSED_RGBA_ASTC_10x6 = 0x000093B9;
    public const int GL_COMPRESSED_RGBA_ASTC_10x8 = 0x000093BA;
    public const int GL_COMPRESSED_RGBA_ASTC_10x10 = 0x000093BB;
    public const int GL_COMPRESSED_RGBA_ASTC_12x10 = 0x000093BC;
    public const int GL_COMPRESSED_RGBA_ASTC_12x12 = 0x000093BD;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x000093D0;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x000093D1;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x000093D2;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x000093D3;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x000093D4;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x000093D5;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x000093D6;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x000093D7;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x000093D8;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x000093D9;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x000093DA;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x000093DB;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x000093DC;
    public const int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x000093DD;
    public const int GL_TEXTURE_CUBE_MAP_ARRAY = 0x00009009;
    public const int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x0000900A;
    public const int GL_SAMPLER_CUBE_MAP_ARRAY = 0x0000900C;
    public const int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x0000900D;
    public const int GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x0000900E;
    public const int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x0000900F;
    public const int GL_IMAGE_CUBE_MAP_ARRAY = 0x00009054;
    public const int GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x0000905F;
    public const int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x0000906A;
    public const int GL_STENCIL_INDEX = 0x00001901;
    public const int GL_STENCIL_INDEX8 = 0x00008D48;
    public const int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x00009102;
    public const int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x00009105;
    public const int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910B;
    public const int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910C;
    public const int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x0000910D;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<void> _glBlendBarrier = null;
    internal static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _glCopyImageSubData = null;
    internal static delegate* unmanaged<uint, uint, uint, int, uint*, bool, void> _glDebugMessageControl = null;
    internal static delegate* unmanaged<uint, uint, uint, uint, int, byte*, void> _glDebugMessageInsert = null;
    internal static delegate* unmanaged<nint, void*, void> _glDebugMessageCallback = null;
    internal static delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint> _glGetDebugMessageLog = null;
    internal static delegate* unmanaged<uint, uint, int, byte*, void> _glPushDebugGroup = null;
    internal static delegate* unmanaged<void> _glPopDebugGroup = null;
    internal static delegate* unmanaged<uint, uint, int, byte*, void> _glObjectLabel = null;
    internal static delegate* unmanaged<uint, uint, int, int*, byte*, void> _glGetObjectLabel = null;
    internal static delegate* unmanaged<void*, int, byte*, void> _glObjectPtrLabel = null;
    internal static delegate* unmanaged<void*, int, int*, byte*, void> _glGetObjectPtrLabel = null;
    internal static delegate* unmanaged<uint, void**, void> _glGetPointerv = null;
    internal static delegate* unmanaged<uint, uint, void> _glEnablei = null;
    internal static delegate* unmanaged<uint, uint, void> _glDisablei = null;
    internal static delegate* unmanaged<uint, uint, void> _glBlendEquationi = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glBlendEquationSeparatei = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glBlendFunci = null;
    internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _glBlendFuncSeparatei = null;
    internal static delegate* unmanaged<uint, bool, bool, bool, bool, void> _glColorMaski = null;
    internal static delegate* unmanaged<uint, uint, bool> _glIsEnabledi = null;
    internal static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsBaseVertex = null;
    internal static delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void> _glDrawRangeElementsBaseVertex = null;
    internal static delegate* unmanaged<uint, int, uint, void*, int, int, void> _glDrawElementsInstancedBaseVertex = null;
    internal static delegate* unmanaged<uint, uint, uint, int, void> _glFramebufferTexture = null;
    internal static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _glPrimitiveBoundingBox = null;
    internal static delegate* unmanaged<uint> _glGetGraphicsResetStatus = null;
    internal static delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void> _glReadnPixels = null;
    internal static delegate* unmanaged<uint, int, int, float*, void> _glGetnUniformfv = null;
    internal static delegate* unmanaged<uint, int, int, int*, void> _glGetnUniformiv = null;
    internal static delegate* unmanaged<uint, int, int, uint*, void> _glGetnUniformuiv = null;
    internal static delegate* unmanaged<float, void> _glMinSampleShading = null;
    internal static delegate* unmanaged<uint, int, void> _glPatchParameteri = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glTexParameterIiv = null;
    internal static delegate* unmanaged<uint, uint, uint*, void> _glTexParameterIuiv = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetTexParameterIiv = null;
    internal static delegate* unmanaged<uint, uint, uint*, void> _glGetTexParameterIuiv = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glSamplerParameterIiv = null;
    internal static delegate* unmanaged<uint, uint, uint*, void> _glSamplerParameterIuiv = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetSamplerParameterIiv = null;
    internal static delegate* unmanaged<uint, uint, uint*, void> _glGetSamplerParameterIuiv = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glTexBuffer = null;
    internal static delegate* unmanaged<uint, uint, uint, nint, nint, void> _glTexBufferRange = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, bool, void> _glTexStorage3DMultisample = null;

    internal static void Load()
    {
        _glBlendBarrier = (delegate* unmanaged<void>)QuickGL.GetGLProcAddress("glBlendBarrier");
        _glCopyImageSubData = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)QuickGL.GetGLProcAddress("glCopyImageSubData");
        _glDebugMessageControl = (delegate* unmanaged<uint, uint, uint, int, uint*, bool, void>)QuickGL.GetGLProcAddress("glDebugMessageControl");
        _glDebugMessageInsert = (delegate* unmanaged<uint, uint, uint, uint, int, byte*, void>)QuickGL.GetGLProcAddress("glDebugMessageInsert");
        _glDebugMessageCallback = (delegate* unmanaged<nint, void*, void>)QuickGL.GetGLProcAddress("glDebugMessageCallback");
        _glGetDebugMessageLog = (delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)QuickGL.GetGLProcAddress("glGetDebugMessageLog");
        _glPushDebugGroup = (delegate* unmanaged<uint, uint, int, byte*, void>)QuickGL.GetGLProcAddress("glPushDebugGroup");
        _glPopDebugGroup = (delegate* unmanaged<void>)QuickGL.GetGLProcAddress("glPopDebugGroup");
        _glObjectLabel = (delegate* unmanaged<uint, uint, int, byte*, void>)QuickGL.GetGLProcAddress("glObjectLabel");
        _glGetObjectLabel = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)QuickGL.GetGLProcAddress("glGetObjectLabel");
        _glObjectPtrLabel = (delegate* unmanaged<void*, int, byte*, void>)QuickGL.GetGLProcAddress("glObjectPtrLabel");
        _glGetObjectPtrLabel = (delegate* unmanaged<void*, int, int*, byte*, void>)QuickGL.GetGLProcAddress("glGetObjectPtrLabel");
        _glGetPointerv = (delegate* unmanaged<uint, void**, void>)QuickGL.GetGLProcAddress("glGetPointerv");
        _glEnablei = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glEnablei");
        _glDisablei = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glDisablei");
        _glBlendEquationi = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glBlendEquationi");
        _glBlendEquationSeparatei = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glBlendEquationSeparatei");
        _glBlendFunci = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glBlendFunci");
        _glBlendFuncSeparatei = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)QuickGL.GetGLProcAddress("glBlendFuncSeparatei");
        _glColorMaski = (delegate* unmanaged<uint, bool, bool, bool, bool, void>)QuickGL.GetGLProcAddress("glColorMaski");
        _glIsEnabledi = (delegate* unmanaged<uint, uint, bool>)QuickGL.GetGLProcAddress("glIsEnabledi");
        _glDrawElementsBaseVertex = (delegate* unmanaged<uint, int, uint, void*, int, void>)QuickGL.GetGLProcAddress("glDrawElementsBaseVertex");
        _glDrawRangeElementsBaseVertex = (delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void>)QuickGL.GetGLProcAddress("glDrawRangeElementsBaseVertex");
        _glDrawElementsInstancedBaseVertex = (delegate* unmanaged<uint, int, uint, void*, int, int, void>)QuickGL.GetGLProcAddress("glDrawElementsInstancedBaseVertex");
        _glFramebufferTexture = (delegate* unmanaged<uint, uint, uint, int, void>)QuickGL.GetGLProcAddress("glFramebufferTexture");
        _glPrimitiveBoundingBox = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)QuickGL.GetGLProcAddress("glPrimitiveBoundingBox");
        _glGetGraphicsResetStatus = (delegate* unmanaged<uint>)QuickGL.GetGLProcAddress("glGetGraphicsResetStatus");
        _glReadnPixels = (delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void>)QuickGL.GetGLProcAddress("glReadnPixels");
        _glGetnUniformfv = (delegate* unmanaged<uint, int, int, float*, void>)QuickGL.GetGLProcAddress("glGetnUniformfv");
        _glGetnUniformiv = (delegate* unmanaged<uint, int, int, int*, void>)QuickGL.GetGLProcAddress("glGetnUniformiv");
        _glGetnUniformuiv = (delegate* unmanaged<uint, int, int, uint*, void>)QuickGL.GetGLProcAddress("glGetnUniformuiv");
        _glMinSampleShading = (delegate* unmanaged<float, void>)QuickGL.GetGLProcAddress("glMinSampleShading");
        _glPatchParameteri = (delegate* unmanaged<uint, int, void>)QuickGL.GetGLProcAddress("glPatchParameteri");
        _glTexParameterIiv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glTexParameterIiv");
        _glTexParameterIuiv = (delegate* unmanaged<uint, uint, uint*, void>)QuickGL.GetGLProcAddress("glTexParameterIuiv");
        _glGetTexParameterIiv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetTexParameterIiv");
        _glGetTexParameterIuiv = (delegate* unmanaged<uint, uint, uint*, void>)QuickGL.GetGLProcAddress("glGetTexParameterIuiv");
        _glSamplerParameterIiv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glSamplerParameterIiv");
        _glSamplerParameterIuiv = (delegate* unmanaged<uint, uint, uint*, void>)QuickGL.GetGLProcAddress("glSamplerParameterIuiv");
        _glGetSamplerParameterIiv = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetSamplerParameterIiv");
        _glGetSamplerParameterIuiv = (delegate* unmanaged<uint, uint, uint*, void>)QuickGL.GetGLProcAddress("glGetSamplerParameterIuiv");
        _glTexBuffer = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glTexBuffer");
        _glTexBufferRange = (delegate* unmanaged<uint, uint, uint, nint, nint, void>)QuickGL.GetGLProcAddress("glTexBufferRange");
        _glTexStorage3DMultisample = (delegate* unmanaged<uint, int, uint, int, int, int, bool, void>)QuickGL.GetGLProcAddress("glTexStorage3DMultisample");
    }

    internal static void Unload()
    {
        _glBlendBarrier = null;
        _glCopyImageSubData = null;
        _glDebugMessageControl = null;
        _glDebugMessageInsert = null;
        _glDebugMessageCallback = null;
        _glGetDebugMessageLog = null;
        _glPushDebugGroup = null;
        _glPopDebugGroup = null;
        _glObjectLabel = null;
        _glGetObjectLabel = null;
        _glObjectPtrLabel = null;
        _glGetObjectPtrLabel = null;
        _glGetPointerv = null;
        _glEnablei = null;
        _glDisablei = null;
        _glBlendEquationi = null;
        _glBlendEquationSeparatei = null;
        _glBlendFunci = null;
        _glBlendFuncSeparatei = null;
        _glColorMaski = null;
        _glIsEnabledi = null;
        _glDrawElementsBaseVertex = null;
        _glDrawRangeElementsBaseVertex = null;
        _glDrawElementsInstancedBaseVertex = null;
        _glFramebufferTexture = null;
        _glPrimitiveBoundingBox = null;
        _glGetGraphicsResetStatus = null;
        _glReadnPixels = null;
        _glGetnUniformfv = null;
        _glGetnUniformiv = null;
        _glGetnUniformuiv = null;
        _glMinSampleShading = null;
        _glPatchParameteri = null;
        _glTexParameterIiv = null;
        _glTexParameterIuiv = null;
        _glGetTexParameterIiv = null;
        _glGetTexParameterIuiv = null;
        _glSamplerParameterIiv = null;
        _glSamplerParameterIuiv = null;
        _glGetSamplerParameterIiv = null;
        _glGetSamplerParameterIuiv = null;
        _glTexBuffer = null;
        _glTexBufferRange = null;
        _glTexStorage3DMultisample = null;
    }
    #endregion

    #region Function wrappers
    public static void glBlendBarrier() { QGLFeature.VerifyFunc((nint)_glBlendBarrier); _glBlendBarrier(); }
    public static void glCopyImageSubData(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) { QGLFeature.VerifyFunc((nint)_glCopyImageSubData); _glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
    public static void glDebugMessageControl(uint source, uint type, uint severity, int count, uint* ids, bool enabled) { QGLFeature.VerifyFunc((nint)_glDebugMessageControl); _glDebugMessageControl(source, type, severity, count, ids, enabled); }
    public static void glDebugMessageInsert(uint source, uint type, uint id, uint severity, int length, byte* buf) { QGLFeature.VerifyFunc((nint)_glDebugMessageInsert); _glDebugMessageInsert(source, type, id, severity, length, buf); }
    public static void glDebugMessageCallback(nint callback, void* userParam) { QGLFeature.VerifyFunc((nint)_glDebugMessageCallback); _glDebugMessageCallback(callback, userParam); }
    public static uint glGetDebugMessageLog(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog) { QGLFeature.VerifyFunc((nint)_glGetDebugMessageLog); return _glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
    public static void glPushDebugGroup(uint source, uint id, int length, byte* message) { QGLFeature.VerifyFunc((nint)_glPushDebugGroup); _glPushDebugGroup(source, id, length, message); }
    public static void glPopDebugGroup() { QGLFeature.VerifyFunc((nint)_glPopDebugGroup); _glPopDebugGroup(); }
    public static void glObjectLabel(uint identifier, uint name, int length, byte* label) { QGLFeature.VerifyFunc((nint)_glObjectLabel); _glObjectLabel(identifier, name, length, label); }
    public static void glGetObjectLabel(uint identifier, uint name, int bufSize, int* length, byte* label) { QGLFeature.VerifyFunc((nint)_glGetObjectLabel); _glGetObjectLabel(identifier, name, bufSize, length, label); }
    public static void glObjectPtrLabel(void* ptr, int length, byte* label) { QGLFeature.VerifyFunc((nint)_glObjectPtrLabel); _glObjectPtrLabel(ptr, length, label); }
    public static void glGetObjectPtrLabel(void* ptr, int bufSize, int* length, byte* label) { QGLFeature.VerifyFunc((nint)_glGetObjectPtrLabel); _glGetObjectPtrLabel(ptr, bufSize, length, label); }
    public static void glGetPointerv(uint pname, void** @params) { QGLFeature.VerifyFunc((nint)_glGetPointerv); _glGetPointerv(pname, @params); }
    public static void glEnablei(uint target, uint index) { QGLFeature.VerifyFunc((nint)_glEnablei); _glEnablei(target, index); }
    public static void glDisablei(uint target, uint index) { QGLFeature.VerifyFunc((nint)_glDisablei); _glDisablei(target, index); }
    public static void glBlendEquationi(uint buf, uint mode) { QGLFeature.VerifyFunc((nint)_glBlendEquationi); _glBlendEquationi(buf, mode); }
    public static void glBlendEquationSeparatei(uint buf, uint modeRGB, uint modeAlpha) { QGLFeature.VerifyFunc((nint)_glBlendEquationSeparatei); _glBlendEquationSeparatei(buf, modeRGB, modeAlpha); }
    public static void glBlendFunci(uint buf, uint src, uint dst) { QGLFeature.VerifyFunc((nint)_glBlendFunci); _glBlendFunci(buf, src, dst); }
    public static void glBlendFuncSeparatei(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha) { QGLFeature.VerifyFunc((nint)_glBlendFuncSeparatei); _glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
    public static void glColorMaski(uint index, bool r, bool g, bool b, bool a) { QGLFeature.VerifyFunc((nint)_glColorMaski); _glColorMaski(index, r, g, b, a); }
    public static bool glIsEnabledi(uint target, uint index) { QGLFeature.VerifyFunc((nint)_glIsEnabledi); return _glIsEnabledi(target, index); }
    public static void glDrawElementsBaseVertex(uint mode, int count, uint type, void* indices, int basevertex) { QGLFeature.VerifyFunc((nint)_glDrawElementsBaseVertex); _glDrawElementsBaseVertex(mode, count, type, indices, basevertex); }
    public static void glDrawRangeElementsBaseVertex(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex) { QGLFeature.VerifyFunc((nint)_glDrawRangeElementsBaseVertex); _glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
    public static void glDrawElementsInstancedBaseVertex(uint mode, int count, uint type, void* indices, int instancecount, int basevertex) { QGLFeature.VerifyFunc((nint)_glDrawElementsInstancedBaseVertex); _glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
    public static void glFramebufferTexture(uint target, uint attachment, uint texture, int level) { QGLFeature.VerifyFunc((nint)_glFramebufferTexture); _glFramebufferTexture(target, attachment, texture, level); }
    public static void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) { QGLFeature.VerifyFunc((nint)_glPrimitiveBoundingBox); _glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
    public static uint glGetGraphicsResetStatus() { QGLFeature.VerifyFunc((nint)_glGetGraphicsResetStatus); return _glGetGraphicsResetStatus(); }
    public static void glReadnPixels(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data) { QGLFeature.VerifyFunc((nint)_glReadnPixels); _glReadnPixels(x, y, width, height, format, type, bufSize, data); }
    public static void glGetnUniformfv(uint program, int location, int bufSize, float* @params) { QGLFeature.VerifyFunc((nint)_glGetnUniformfv); _glGetnUniformfv(program, location, bufSize, @params); }
    public static void glGetnUniformiv(uint program, int location, int bufSize, int* @params) { QGLFeature.VerifyFunc((nint)_glGetnUniformiv); _glGetnUniformiv(program, location, bufSize, @params); }
    public static void glGetnUniformuiv(uint program, int location, int bufSize, uint* @params) { QGLFeature.VerifyFunc((nint)_glGetnUniformuiv); _glGetnUniformuiv(program, location, bufSize, @params); }
    public static void glMinSampleShading(float value) { QGLFeature.VerifyFunc((nint)_glMinSampleShading); _glMinSampleShading(value); }
    public static void glPatchParameteri(uint pname, int value) { QGLFeature.VerifyFunc((nint)_glPatchParameteri); _glPatchParameteri(pname, value); }
    public static void glTexParameterIiv(uint target, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glTexParameterIiv); _glTexParameterIiv(target, pname, @params); }
    public static void glTexParameterIuiv(uint target, uint pname, uint* @params) { QGLFeature.VerifyFunc((nint)_glTexParameterIuiv); _glTexParameterIuiv(target, pname, @params); }
    public static void glGetTexParameterIiv(uint target, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetTexParameterIiv); _glGetTexParameterIiv(target, pname, @params); }
    public static void glGetTexParameterIuiv(uint target, uint pname, uint* @params) { QGLFeature.VerifyFunc((nint)_glGetTexParameterIuiv); _glGetTexParameterIuiv(target, pname, @params); }
    public static void glSamplerParameterIiv(uint sampler, uint pname, int* param) { QGLFeature.VerifyFunc((nint)_glSamplerParameterIiv); _glSamplerParameterIiv(sampler, pname, param); }
    public static void glSamplerParameterIuiv(uint sampler, uint pname, uint* param) { QGLFeature.VerifyFunc((nint)_glSamplerParameterIuiv); _glSamplerParameterIuiv(sampler, pname, param); }
    public static void glGetSamplerParameterIiv(uint sampler, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetSamplerParameterIiv); _glGetSamplerParameterIiv(sampler, pname, @params); }
    public static void glGetSamplerParameterIuiv(uint sampler, uint pname, uint* @params) { QGLFeature.VerifyFunc((nint)_glGetSamplerParameterIuiv); _glGetSamplerParameterIuiv(sampler, pname, @params); }
    public static void glTexBuffer(uint target, uint internalformat, uint buffer) { QGLFeature.VerifyFunc((nint)_glTexBuffer); _glTexBuffer(target, internalformat, buffer); }
    public static void glTexBufferRange(uint target, uint internalformat, uint buffer, nint offset, nint size) { QGLFeature.VerifyFunc((nint)_glTexBufferRange); _glTexBufferRange(target, internalformat, buffer, offset, size); }
    public static void glTexStorage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations) { QGLFeature.VerifyFunc((nint)_glTexStorage3DMultisample); _glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_ES_VERSION_3_2", false, true);
}
