// MIT License
// 
// Copyright (c) 2025 vlOd
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using QuickGLNS.Internal;

// Bindings generated at 2025-01-04 19:06:28.377725
namespace QuickGLNS.Bindings
{
    [GLFeature]
    public static unsafe class GLES20
    {
        #region Enums
        public const int GL_DEPTH_BUFFER_BIT = 0x100;
        public const int GL_STENCIL_BUFFER_BIT = 0x400;
        public const int GL_COLOR_BUFFER_BIT = 0x4000;
        public const int GL_FALSE = 0x0;
        public const int GL_TRUE = 0x1;
        public const int GL_POINTS = 0x0;
        public const int GL_LINES = 0x1;
        public const int GL_LINE_LOOP = 0x2;
        public const int GL_LINE_STRIP = 0x3;
        public const int GL_TRIANGLES = 0x4;
        public const int GL_TRIANGLE_STRIP = 0x5;
        public const int GL_TRIANGLE_FAN = 0x6;
        public const int GL_ZERO = 0x0;
        public const int GL_ONE = 0x1;
        public const int GL_SRC_COLOR = 0x300;
        public const int GL_ONE_MINUS_SRC_COLOR = 0x301;
        public const int GL_SRC_ALPHA = 0x302;
        public const int GL_ONE_MINUS_SRC_ALPHA = 0x303;
        public const int GL_DST_ALPHA = 0x304;
        public const int GL_ONE_MINUS_DST_ALPHA = 0x305;
        public const int GL_DST_COLOR = 0x306;
        public const int GL_ONE_MINUS_DST_COLOR = 0x307;
        public const int GL_SRC_ALPHA_SATURATE = 0x308;
        public const int GL_FUNC_ADD = 0x8006;
        public const int GL_BLEND_EQUATION = 0x8009;
        public const int GL_BLEND_EQUATION_RGB = 0x8009;
        public const int GL_BLEND_EQUATION_ALPHA = 0x883D;
        public const int GL_FUNC_SUBTRACT = 0x800A;
        public const int GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        public const int GL_BLEND_DST_RGB = 0x80C8;
        public const int GL_BLEND_SRC_RGB = 0x80C9;
        public const int GL_BLEND_DST_ALPHA = 0x80CA;
        public const int GL_BLEND_SRC_ALPHA = 0x80CB;
        public const int GL_CONSTANT_COLOR = 0x8001;
        public const int GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public const int GL_CONSTANT_ALPHA = 0x8003;
        public const int GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public const int GL_BLEND_COLOR = 0x8005;
        public const int GL_ARRAY_BUFFER = 0x8892;
        public const int GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public const int GL_ARRAY_BUFFER_BINDING = 0x8894;
        public const int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public const int GL_STREAM_DRAW = 0x88E0;
        public const int GL_STATIC_DRAW = 0x88E4;
        public const int GL_DYNAMIC_DRAW = 0x88E8;
        public const int GL_BUFFER_SIZE = 0x8764;
        public const int GL_BUFFER_USAGE = 0x8765;
        public const int GL_CURRENT_VERTEX_ATTRIB = 0x8626;
        public const int GL_FRONT = 0x404;
        public const int GL_BACK = 0x405;
        public const int GL_FRONT_AND_BACK = 0x408;
        public const int GL_TEXTURE_2D = 0xDE1;
        public const int GL_CULL_FACE = 0xB44;
        public const int GL_BLEND = 0xBE2;
        public const int GL_DITHER = 0xBD0;
        public const int GL_STENCIL_TEST = 0xB90;
        public const int GL_DEPTH_TEST = 0xB71;
        public const int GL_SCISSOR_TEST = 0xC11;
        public const int GL_POLYGON_OFFSET_FILL = 0x8037;
        public const int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public const int GL_SAMPLE_COVERAGE = 0x80A0;
        public const int GL_NO_ERROR = 0x0;
        public const int GL_INVALID_ENUM = 0x500;
        public const int GL_INVALID_VALUE = 0x501;
        public const int GL_INVALID_OPERATION = 0x502;
        public const int GL_OUT_OF_MEMORY = 0x505;
        public const int GL_CW = 0x900;
        public const int GL_CCW = 0x901;
        public const int GL_LINE_WIDTH = 0xB21;
        public const int GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        public const int GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public const int GL_CULL_FACE_MODE = 0xB45;
        public const int GL_FRONT_FACE = 0xB46;
        public const int GL_DEPTH_RANGE = 0xB70;
        public const int GL_DEPTH_WRITEMASK = 0xB72;
        public const int GL_DEPTH_CLEAR_VALUE = 0xB73;
        public const int GL_DEPTH_FUNC = 0xB74;
        public const int GL_STENCIL_CLEAR_VALUE = 0xB91;
        public const int GL_STENCIL_FUNC = 0xB92;
        public const int GL_STENCIL_FAIL = 0xB94;
        public const int GL_STENCIL_PASS_DEPTH_FAIL = 0xB95;
        public const int GL_STENCIL_PASS_DEPTH_PASS = 0xB96;
        public const int GL_STENCIL_REF = 0xB97;
        public const int GL_STENCIL_VALUE_MASK = 0xB93;
        public const int GL_STENCIL_WRITEMASK = 0xB98;
        public const int GL_STENCIL_BACK_FUNC = 0x8800;
        public const int GL_STENCIL_BACK_FAIL = 0x8801;
        public const int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        public const int GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        public const int GL_STENCIL_BACK_REF = 0x8CA3;
        public const int GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
        public const int GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
        public const int GL_VIEWPORT = 0xBA2;
        public const int GL_SCISSOR_BOX = 0xC10;
        public const int GL_COLOR_CLEAR_VALUE = 0xC22;
        public const int GL_COLOR_WRITEMASK = 0xC23;
        public const int GL_UNPACK_ALIGNMENT = 0xCF5;
        public const int GL_PACK_ALIGNMENT = 0xD05;
        public const int GL_MAX_TEXTURE_SIZE = 0xD33;
        public const int GL_MAX_VIEWPORT_DIMS = 0xD3A;
        public const int GL_SUBPIXEL_BITS = 0xD50;
        public const int GL_RED_BITS = 0xD52;
        public const int GL_GREEN_BITS = 0xD53;
        public const int GL_BLUE_BITS = 0xD54;
        public const int GL_ALPHA_BITS = 0xD55;
        public const int GL_DEPTH_BITS = 0xD56;
        public const int GL_STENCIL_BITS = 0xD57;
        public const int GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public const int GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public const int GL_TEXTURE_BINDING_2D = 0x8069;
        public const int GL_SAMPLE_BUFFERS = 0x80A8;
        public const int GL_SAMPLES = 0x80A9;
        public const int GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public const int GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public const int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public const int GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public const int GL_DONT_CARE = 0x1100;
        public const int GL_FASTEST = 0x1101;
        public const int GL_NICEST = 0x1102;
        public const int GL_GENERATE_MIPMAP_HINT = 0x8192;
        public const int GL_BYTE = 0x1400;
        public const int GL_UNSIGNED_BYTE = 0x1401;
        public const int GL_SHORT = 0x1402;
        public const int GL_UNSIGNED_SHORT = 0x1403;
        public const int GL_INT = 0x1404;
        public const int GL_UNSIGNED_INT = 0x1405;
        public const int GL_FLOAT = 0x1406;
        public const int GL_FIXED = 0x140C;
        public const int GL_DEPTH_COMPONENT = 0x1902;
        public const int GL_ALPHA = 0x1906;
        public const int GL_RGB = 0x1907;
        public const int GL_RGBA = 0x1908;
        public const int GL_LUMINANCE = 0x1909;
        public const int GL_LUMINANCE_ALPHA = 0x190A;
        public const int GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public const int GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public const int GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public const int GL_FRAGMENT_SHADER = 0x8B30;
        public const int GL_VERTEX_SHADER = 0x8B31;
        public const int GL_MAX_VERTEX_ATTRIBS = 0x8869;
        public const int GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
        public const int GL_MAX_VARYING_VECTORS = 0x8DFC;
        public const int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        public const int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        public const int GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        public const int GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
        public const int GL_SHADER_TYPE = 0x8B4F;
        public const int GL_DELETE_STATUS = 0x8B80;
        public const int GL_LINK_STATUS = 0x8B82;
        public const int GL_VALIDATE_STATUS = 0x8B83;
        public const int GL_ATTACHED_SHADERS = 0x8B85;
        public const int GL_ACTIVE_UNIFORMS = 0x8B86;
        public const int GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        public const int GL_ACTIVE_ATTRIBUTES = 0x8B89;
        public const int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        public const int GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
        public const int GL_CURRENT_PROGRAM = 0x8B8D;
        public const int GL_NEVER = 0x200;
        public const int GL_LESS = 0x201;
        public const int GL_EQUAL = 0x202;
        public const int GL_LEQUAL = 0x203;
        public const int GL_GREATER = 0x204;
        public const int GL_NOTEQUAL = 0x205;
        public const int GL_GEQUAL = 0x206;
        public const int GL_ALWAYS = 0x207;
        public const int GL_KEEP = 0x1E00;
        public const int GL_REPLACE = 0x1E01;
        public const int GL_INCR = 0x1E02;
        public const int GL_DECR = 0x1E03;
        public const int GL_INVERT = 0x150A;
        public const int GL_INCR_WRAP = 0x8507;
        public const int GL_DECR_WRAP = 0x8508;
        public const int GL_VENDOR = 0x1F00;
        public const int GL_RENDERER = 0x1F01;
        public const int GL_VERSION = 0x1F02;
        public const int GL_EXTENSIONS = 0x1F03;
        public const int GL_NEAREST = 0x2600;
        public const int GL_LINEAR = 0x2601;
        public const int GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public const int GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public const int GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public const int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public const int GL_TEXTURE_MAG_FILTER = 0x2800;
        public const int GL_TEXTURE_MIN_FILTER = 0x2801;
        public const int GL_TEXTURE_WRAP_S = 0x2802;
        public const int GL_TEXTURE_WRAP_T = 0x2803;
        public const int GL_TEXTURE = 0x1702;
        public const int GL_TEXTURE_CUBE_MAP = 0x8513;
        public const int GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public const int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public const int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public const int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public const int GL_TEXTURE0 = 0x84C0;
        public const int GL_TEXTURE1 = 0x84C1;
        public const int GL_TEXTURE2 = 0x84C2;
        public const int GL_TEXTURE3 = 0x84C3;
        public const int GL_TEXTURE4 = 0x84C4;
        public const int GL_TEXTURE5 = 0x84C5;
        public const int GL_TEXTURE6 = 0x84C6;
        public const int GL_TEXTURE7 = 0x84C7;
        public const int GL_TEXTURE8 = 0x84C8;
        public const int GL_TEXTURE9 = 0x84C9;
        public const int GL_TEXTURE10 = 0x84CA;
        public const int GL_TEXTURE11 = 0x84CB;
        public const int GL_TEXTURE12 = 0x84CC;
        public const int GL_TEXTURE13 = 0x84CD;
        public const int GL_TEXTURE14 = 0x84CE;
        public const int GL_TEXTURE15 = 0x84CF;
        public const int GL_TEXTURE16 = 0x84D0;
        public const int GL_TEXTURE17 = 0x84D1;
        public const int GL_TEXTURE18 = 0x84D2;
        public const int GL_TEXTURE19 = 0x84D3;
        public const int GL_TEXTURE20 = 0x84D4;
        public const int GL_TEXTURE21 = 0x84D5;
        public const int GL_TEXTURE22 = 0x84D6;
        public const int GL_TEXTURE23 = 0x84D7;
        public const int GL_TEXTURE24 = 0x84D8;
        public const int GL_TEXTURE25 = 0x84D9;
        public const int GL_TEXTURE26 = 0x84DA;
        public const int GL_TEXTURE27 = 0x84DB;
        public const int GL_TEXTURE28 = 0x84DC;
        public const int GL_TEXTURE29 = 0x84DD;
        public const int GL_TEXTURE30 = 0x84DE;
        public const int GL_TEXTURE31 = 0x84DF;
        public const int GL_ACTIVE_TEXTURE = 0x84E0;
        public const int GL_REPEAT = 0x2901;
        public const int GL_CLAMP_TO_EDGE = 0x812F;
        public const int GL_MIRRORED_REPEAT = 0x8370;
        public const int GL_FLOAT_VEC2 = 0x8B50;
        public const int GL_FLOAT_VEC3 = 0x8B51;
        public const int GL_FLOAT_VEC4 = 0x8B52;
        public const int GL_INT_VEC2 = 0x8B53;
        public const int GL_INT_VEC3 = 0x8B54;
        public const int GL_INT_VEC4 = 0x8B55;
        public const int GL_BOOL = 0x8B56;
        public const int GL_BOOL_VEC2 = 0x8B57;
        public const int GL_BOOL_VEC3 = 0x8B58;
        public const int GL_BOOL_VEC4 = 0x8B59;
        public const int GL_FLOAT_MAT2 = 0x8B5A;
        public const int GL_FLOAT_MAT3 = 0x8B5B;
        public const int GL_FLOAT_MAT4 = 0x8B5C;
        public const int GL_SAMPLER_2D = 0x8B5E;
        public const int GL_SAMPLER_CUBE = 0x8B60;
        public const int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        public const int GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        public const int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        public const int GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        public const int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        public const int GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        public const int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public const int GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
        public const int GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
        public const int GL_COMPILE_STATUS = 0x8B81;
        public const int GL_INFO_LOG_LENGTH = 0x8B84;
        public const int GL_SHADER_SOURCE_LENGTH = 0x8B88;
        public const int GL_SHADER_COMPILER = 0x8DFA;
        public const int GL_SHADER_BINARY_FORMATS = 0x8DF8;
        public const int GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
        public const int GL_LOW_FLOAT = 0x8DF0;
        public const int GL_MEDIUM_FLOAT = 0x8DF1;
        public const int GL_HIGH_FLOAT = 0x8DF2;
        public const int GL_LOW_INT = 0x8DF3;
        public const int GL_MEDIUM_INT = 0x8DF4;
        public const int GL_HIGH_INT = 0x8DF5;
        public const int GL_FRAMEBUFFER = 0x8D40;
        public const int GL_RENDERBUFFER = 0x8D41;
        public const int GL_RGBA4 = 0x8056;
        public const int GL_RGB5_A1 = 0x8057;
        public const int GL_RGB565 = 0x8D62;
        public const int GL_DEPTH_COMPONENT16 = 0x81A5;
        public const int GL_STENCIL_INDEX8 = 0x8D48;
        public const int GL_RENDERBUFFER_WIDTH = 0x8D42;
        public const int GL_RENDERBUFFER_HEIGHT = 0x8D43;
        public const int GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
        public const int GL_RENDERBUFFER_RED_SIZE = 0x8D50;
        public const int GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
        public const int GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
        public const int GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
        public const int GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
        public const int GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
        public const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
        public const int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
        public const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
        public const int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
        public const int GL_COLOR_ATTACHMENT0 = 0x8CE0;
        public const int GL_DEPTH_ATTACHMENT = 0x8D00;
        public const int GL_STENCIL_ATTACHMENT = 0x8D20;
        public const int GL_NONE = 0x0;
        public const int GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
        public const int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
        public const int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
        public const int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
        public const int GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
        public const int GL_FRAMEBUFFER_BINDING = 0x8CA6;
        public const int GL_RENDERBUFFER_BINDING = 0x8CA7;
        public const int GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
        public const int GL_INVALID_FRAMEBUFFER_OPERATION = 0x506;
        #endregion
        
        #region Commands
        [QGLNativeAPI("glActiveTexture")] public static delegate* unmanaged<uint, void> glActiveTexture;
        [QGLNativeAPI("glAttachShader")] public static delegate* unmanaged<uint, uint, void> glAttachShader;
        [QGLNativeAPI("glBindAttribLocation")] public static delegate* unmanaged<uint, uint, byte*, void> glBindAttribLocation;
        [QGLNativeAPI("glBindBuffer")] public static delegate* unmanaged<uint, uint, void> glBindBuffer;
        [QGLNativeAPI("glBindFramebuffer")] public static delegate* unmanaged<uint, uint, void> glBindFramebuffer;
        [QGLNativeAPI("glBindRenderbuffer")] public static delegate* unmanaged<uint, uint, void> glBindRenderbuffer;
        [QGLNativeAPI("glBindTexture")] public static delegate* unmanaged<uint, uint, void> glBindTexture;
        [QGLNativeAPI("glBlendColor")] public static delegate* unmanaged<float, float, float, float, void> glBlendColor;
        [QGLNativeAPI("glBlendEquation")] public static delegate* unmanaged<uint, void> glBlendEquation;
        [QGLNativeAPI("glBlendEquationSeparate")] public static delegate* unmanaged<uint, uint, void> glBlendEquationSeparate;
        [QGLNativeAPI("glBlendFunc")] public static delegate* unmanaged<uint, uint, void> glBlendFunc;
        [QGLNativeAPI("glBlendFuncSeparate")] public static delegate* unmanaged<uint, uint, uint, uint, void> glBlendFuncSeparate;
        [QGLNativeAPI("glBufferData")] public static delegate* unmanaged<uint, nint, void*, uint, void> glBufferData;
        [QGLNativeAPI("glBufferSubData")] public static delegate* unmanaged<uint, nint, nint, void*, void> glBufferSubData;
        [QGLNativeAPI("glCheckFramebufferStatus")] public static delegate* unmanaged<uint, uint> glCheckFramebufferStatus;
        [QGLNativeAPI("glClear")] public static delegate* unmanaged<uint, void> glClear;
        [QGLNativeAPI("glClearColor")] public static delegate* unmanaged<float, float, float, float, void> glClearColor;
        [QGLNativeAPI("glClearDepthf")] public static delegate* unmanaged<float, void> glClearDepthf;
        [QGLNativeAPI("glClearStencil")] public static delegate* unmanaged<int, void> glClearStencil;
        [QGLNativeAPI("glColorMask")] public static delegate* unmanaged<bool, bool, bool, bool, void> glColorMask;
        [QGLNativeAPI("glCompileShader")] public static delegate* unmanaged<uint, void> glCompileShader;
        [QGLNativeAPI("glCompressedTexImage2D")] public static delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void> glCompressedTexImage2D;
        [QGLNativeAPI("glCompressedTexSubImage2D")] public static delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void> glCompressedTexSubImage2D;
        [QGLNativeAPI("glCopyTexImage2D")] public static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void> glCopyTexImage2D;
        [QGLNativeAPI("glCopyTexSubImage2D")] public static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> glCopyTexSubImage2D;
        [QGLNativeAPI("glCreateProgram")] public static delegate* unmanaged<uint> glCreateProgram;
        [QGLNativeAPI("glCreateShader")] public static delegate* unmanaged<uint, uint> glCreateShader;
        [QGLNativeAPI("glCullFace")] public static delegate* unmanaged<uint, void> glCullFace;
        [QGLNativeAPI("glDeleteBuffers")] public static delegate* unmanaged<int, uint*, void> glDeleteBuffers;
        [QGLNativeAPI("glDeleteFramebuffers")] public static delegate* unmanaged<int, uint*, void> glDeleteFramebuffers;
        [QGLNativeAPI("glDeleteProgram")] public static delegate* unmanaged<uint, void> glDeleteProgram;
        [QGLNativeAPI("glDeleteRenderbuffers")] public static delegate* unmanaged<int, uint*, void> glDeleteRenderbuffers;
        [QGLNativeAPI("glDeleteShader")] public static delegate* unmanaged<uint, void> glDeleteShader;
        [QGLNativeAPI("glDeleteTextures")] public static delegate* unmanaged<int, uint*, void> glDeleteTextures;
        [QGLNativeAPI("glDepthFunc")] public static delegate* unmanaged<uint, void> glDepthFunc;
        [QGLNativeAPI("glDepthMask")] public static delegate* unmanaged<bool, void> glDepthMask;
        [QGLNativeAPI("glDepthRangef")] public static delegate* unmanaged<float, float, void> glDepthRangef;
        [QGLNativeAPI("glDetachShader")] public static delegate* unmanaged<uint, uint, void> glDetachShader;
        [QGLNativeAPI("glDisable")] public static delegate* unmanaged<uint, void> glDisable;
        [QGLNativeAPI("glDisableVertexAttribArray")] public static delegate* unmanaged<uint, void> glDisableVertexAttribArray;
        [QGLNativeAPI("glDrawArrays")] public static delegate* unmanaged<uint, int, int, void> glDrawArrays;
        [QGLNativeAPI("glDrawElements")] public static delegate* unmanaged<uint, int, uint, void*, void> glDrawElements;
        [QGLNativeAPI("glEnable")] public static delegate* unmanaged<uint, void> glEnable;
        [QGLNativeAPI("glEnableVertexAttribArray")] public static delegate* unmanaged<uint, void> glEnableVertexAttribArray;
        [QGLNativeAPI("glFinish")] public static delegate* unmanaged<void> glFinish;
        [QGLNativeAPI("glFlush")] public static delegate* unmanaged<void> glFlush;
        [QGLNativeAPI("glFramebufferRenderbuffer")] public static delegate* unmanaged<uint, uint, uint, uint, void> glFramebufferRenderbuffer;
        [QGLNativeAPI("glFramebufferTexture2D")] public static delegate* unmanaged<uint, uint, uint, uint, int, void> glFramebufferTexture2D;
        [QGLNativeAPI("glFrontFace")] public static delegate* unmanaged<uint, void> glFrontFace;
        [QGLNativeAPI("glGenBuffers")] public static delegate* unmanaged<int, uint*, void> glGenBuffers;
        [QGLNativeAPI("glGenerateMipmap")] public static delegate* unmanaged<uint, void> glGenerateMipmap;
        [QGLNativeAPI("glGenFramebuffers")] public static delegate* unmanaged<int, uint*, void> glGenFramebuffers;
        [QGLNativeAPI("glGenRenderbuffers")] public static delegate* unmanaged<int, uint*, void> glGenRenderbuffers;
        [QGLNativeAPI("glGenTextures")] public static delegate* unmanaged<int, uint*, void> glGenTextures;
        [QGLNativeAPI("glGetActiveAttrib")] public static delegate* unmanaged<uint, uint, int, int*, int*, uint*, byte*, void> glGetActiveAttrib;
        [QGLNativeAPI("glGetActiveUniform")] public static delegate* unmanaged<uint, uint, int, int*, int*, uint*, byte*, void> glGetActiveUniform;
        [QGLNativeAPI("glGetAttachedShaders")] public static delegate* unmanaged<uint, int, int*, uint*, void> glGetAttachedShaders;
        [QGLNativeAPI("glGetAttribLocation")] public static delegate* unmanaged<uint, byte*, int> glGetAttribLocation;
        [QGLNativeAPI("glGetBooleanv")] public static delegate* unmanaged<uint, bool*, void> glGetBooleanv;
        [QGLNativeAPI("glGetBufferParameteriv")] public static delegate* unmanaged<uint, uint, int*, void> glGetBufferParameteriv;
        [QGLNativeAPI("glGetError")] public static delegate* unmanaged<uint> glGetError;
        [QGLNativeAPI("glGetFloatv")] public static delegate* unmanaged<uint, float*, void> glGetFloatv;
        [QGLNativeAPI("glGetFramebufferAttachmentParameteriv")] public static delegate* unmanaged<uint, uint, uint, int*, void> glGetFramebufferAttachmentParameteriv;
        [QGLNativeAPI("glGetIntegerv")] public static delegate* unmanaged<uint, int*, void> glGetIntegerv;
        [QGLNativeAPI("glGetProgramiv")] public static delegate* unmanaged<uint, uint, int*, void> glGetProgramiv;
        [QGLNativeAPI("glGetProgramInfoLog")] public static delegate* unmanaged<uint, int, int*, byte*, void> glGetProgramInfoLog;
        [QGLNativeAPI("glGetRenderbufferParameteriv")] public static delegate* unmanaged<uint, uint, int*, void> glGetRenderbufferParameteriv;
        [QGLNativeAPI("glGetShaderiv")] public static delegate* unmanaged<uint, uint, int*, void> glGetShaderiv;
        [QGLNativeAPI("glGetShaderInfoLog")] public static delegate* unmanaged<uint, int, int*, byte*, void> glGetShaderInfoLog;
        [QGLNativeAPI("glGetShaderPrecisionFormat")] public static delegate* unmanaged<uint, uint, int*, int*, void> glGetShaderPrecisionFormat;
        [QGLNativeAPI("glGetShaderSource")] public static delegate* unmanaged<uint, int, int*, byte*, void> glGetShaderSource;
        [QGLNativeAPI("glGetString")] public static delegate* unmanaged<uint, byte*> glGetString;
        [QGLNativeAPI("glGetTexParameterfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetTexParameterfv;
        [QGLNativeAPI("glGetTexParameteriv")] public static delegate* unmanaged<uint, uint, int*, void> glGetTexParameteriv;
        [QGLNativeAPI("glGetUniformfv")] public static delegate* unmanaged<uint, int, float*, void> glGetUniformfv;
        [QGLNativeAPI("glGetUniformiv")] public static delegate* unmanaged<uint, int, int*, void> glGetUniformiv;
        [QGLNativeAPI("glGetUniformLocation")] public static delegate* unmanaged<uint, byte*, int> glGetUniformLocation;
        [QGLNativeAPI("glGetVertexAttribfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetVertexAttribfv;
        [QGLNativeAPI("glGetVertexAttribiv")] public static delegate* unmanaged<uint, uint, int*, void> glGetVertexAttribiv;
        [QGLNativeAPI("glGetVertexAttribPointerv")] public static delegate* unmanaged<uint, uint, void**, void> glGetVertexAttribPointerv;
        [QGLNativeAPI("glHint")] public static delegate* unmanaged<uint, uint, void> glHint;
        [QGLNativeAPI("glIsBuffer")] public static delegate* unmanaged<uint, bool> glIsBuffer;
        [QGLNativeAPI("glIsEnabled")] public static delegate* unmanaged<uint, bool> glIsEnabled;
        [QGLNativeAPI("glIsFramebuffer")] public static delegate* unmanaged<uint, bool> glIsFramebuffer;
        [QGLNativeAPI("glIsProgram")] public static delegate* unmanaged<uint, bool> glIsProgram;
        [QGLNativeAPI("glIsRenderbuffer")] public static delegate* unmanaged<uint, bool> glIsRenderbuffer;
        [QGLNativeAPI("glIsShader")] public static delegate* unmanaged<uint, bool> glIsShader;
        [QGLNativeAPI("glIsTexture")] public static delegate* unmanaged<uint, bool> glIsTexture;
        [QGLNativeAPI("glLineWidth")] public static delegate* unmanaged<float, void> glLineWidth;
        [QGLNativeAPI("glLinkProgram")] public static delegate* unmanaged<uint, void> glLinkProgram;
        [QGLNativeAPI("glPixelStorei")] public static delegate* unmanaged<uint, int, void> glPixelStorei;
        [QGLNativeAPI("glPolygonOffset")] public static delegate* unmanaged<float, float, void> glPolygonOffset;
        [QGLNativeAPI("glReadPixels")] public static delegate* unmanaged<int, int, int, int, uint, uint, void*, void> glReadPixels;
        [QGLNativeAPI("glReleaseShaderCompiler")] public static delegate* unmanaged<void> glReleaseShaderCompiler;
        [QGLNativeAPI("glRenderbufferStorage")] public static delegate* unmanaged<uint, uint, int, int, void> glRenderbufferStorage;
        [QGLNativeAPI("glSampleCoverage")] public static delegate* unmanaged<float, bool, void> glSampleCoverage;
        [QGLNativeAPI("glScissor")] public static delegate* unmanaged<int, int, int, int, void> glScissor;
        [QGLNativeAPI("glShaderBinary")] public static delegate* unmanaged<int, uint*, uint, void*, int, void> glShaderBinary;
        [QGLNativeAPI("glShaderSource")] public static delegate* unmanaged<uint, int, byte**, int*, void> glShaderSource;
        [QGLNativeAPI("glStencilFunc")] public static delegate* unmanaged<uint, int, uint, void> glStencilFunc;
        [QGLNativeAPI("glStencilFuncSeparate")] public static delegate* unmanaged<uint, uint, int, uint, void> glStencilFuncSeparate;
        [QGLNativeAPI("glStencilMask")] public static delegate* unmanaged<uint, void> glStencilMask;
        [QGLNativeAPI("glStencilMaskSeparate")] public static delegate* unmanaged<uint, uint, void> glStencilMaskSeparate;
        [QGLNativeAPI("glStencilOp")] public static delegate* unmanaged<uint, uint, uint, void> glStencilOp;
        [QGLNativeAPI("glStencilOpSeparate")] public static delegate* unmanaged<uint, uint, uint, uint, void> glStencilOpSeparate;
        [QGLNativeAPI("glTexImage2D")] public static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> glTexImage2D;
        [QGLNativeAPI("glTexParameterf")] public static delegate* unmanaged<uint, uint, float, void> glTexParameterf;
        [QGLNativeAPI("glTexParameterfv")] public static delegate* unmanaged<uint, uint, float*, void> glTexParameterfv;
        [QGLNativeAPI("glTexParameteri")] public static delegate* unmanaged<uint, uint, int, void> glTexParameteri;
        [QGLNativeAPI("glTexParameteriv")] public static delegate* unmanaged<uint, uint, int*, void> glTexParameteriv;
        [QGLNativeAPI("glTexSubImage2D")] public static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> glTexSubImage2D;
        [QGLNativeAPI("glUniform1f")] public static delegate* unmanaged<int, float, void> glUniform1f;
        [QGLNativeAPI("glUniform1fv")] public static delegate* unmanaged<int, int, float*, void> glUniform1fv;
        [QGLNativeAPI("glUniform1i")] public static delegate* unmanaged<int, int, void> glUniform1i;
        [QGLNativeAPI("glUniform1iv")] public static delegate* unmanaged<int, int, int*, void> glUniform1iv;
        [QGLNativeAPI("glUniform2f")] public static delegate* unmanaged<int, float, float, void> glUniform2f;
        [QGLNativeAPI("glUniform2fv")] public static delegate* unmanaged<int, int, float*, void> glUniform2fv;
        [QGLNativeAPI("glUniform2i")] public static delegate* unmanaged<int, int, int, void> glUniform2i;
        [QGLNativeAPI("glUniform2iv")] public static delegate* unmanaged<int, int, int*, void> glUniform2iv;
        [QGLNativeAPI("glUniform3f")] public static delegate* unmanaged<int, float, float, float, void> glUniform3f;
        [QGLNativeAPI("glUniform3fv")] public static delegate* unmanaged<int, int, float*, void> glUniform3fv;
        [QGLNativeAPI("glUniform3i")] public static delegate* unmanaged<int, int, int, int, void> glUniform3i;
        [QGLNativeAPI("glUniform3iv")] public static delegate* unmanaged<int, int, int*, void> glUniform3iv;
        [QGLNativeAPI("glUniform4f")] public static delegate* unmanaged<int, float, float, float, float, void> glUniform4f;
        [QGLNativeAPI("glUniform4fv")] public static delegate* unmanaged<int, int, float*, void> glUniform4fv;
        [QGLNativeAPI("glUniform4i")] public static delegate* unmanaged<int, int, int, int, int, void> glUniform4i;
        [QGLNativeAPI("glUniform4iv")] public static delegate* unmanaged<int, int, int*, void> glUniform4iv;
        [QGLNativeAPI("glUniformMatrix2fv")] public static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix2fv;
        [QGLNativeAPI("glUniformMatrix3fv")] public static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix3fv;
        [QGLNativeAPI("glUniformMatrix4fv")] public static delegate* unmanaged<int, int, bool, float*, void> glUniformMatrix4fv;
        [QGLNativeAPI("glUseProgram")] public static delegate* unmanaged<uint, void> glUseProgram;
        [QGLNativeAPI("glValidateProgram")] public static delegate* unmanaged<uint, void> glValidateProgram;
        [QGLNativeAPI("glVertexAttrib1f")] public static delegate* unmanaged<uint, float, void> glVertexAttrib1f;
        [QGLNativeAPI("glVertexAttrib1fv")] public static delegate* unmanaged<uint, float*, void> glVertexAttrib1fv;
        [QGLNativeAPI("glVertexAttrib2f")] public static delegate* unmanaged<uint, float, float, void> glVertexAttrib2f;
        [QGLNativeAPI("glVertexAttrib2fv")] public static delegate* unmanaged<uint, float*, void> glVertexAttrib2fv;
        [QGLNativeAPI("glVertexAttrib3f")] public static delegate* unmanaged<uint, float, float, float, void> glVertexAttrib3f;
        [QGLNativeAPI("glVertexAttrib3fv")] public static delegate* unmanaged<uint, float*, void> glVertexAttrib3fv;
        [QGLNativeAPI("glVertexAttrib4f")] public static delegate* unmanaged<uint, float, float, float, float, void> glVertexAttrib4f;
        [QGLNativeAPI("glVertexAttrib4fv")] public static delegate* unmanaged<uint, float*, void> glVertexAttrib4fv;
        [QGLNativeAPI("glVertexAttribPointer")] public static delegate* unmanaged<uint, int, uint, bool, int, void*, void> glVertexAttribPointer;
        [QGLNativeAPI("glViewport")] public static delegate* unmanaged<int, int, int, int, void> glViewport;
        #endregion
    }
}
