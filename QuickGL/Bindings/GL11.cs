// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:41:02.9540615Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings;

public static unsafe class GL11
{
    #region Constants
    public const int GL_COLOR_LOGIC_OP = 0x00000BF2;
    public const int GL_POLYGON_OFFSET_UNITS = 0x00002A00;
    public const int GL_POLYGON_OFFSET_POINT = 0x00002A01;
    public const int GL_POLYGON_OFFSET_LINE = 0x00002A02;
    public const int GL_POLYGON_OFFSET_FILL = 0x00008037;
    public const int GL_POLYGON_OFFSET_FACTOR = 0x00008038;
    public const int GL_TEXTURE_BINDING_1D = 0x00008068;
    public const int GL_TEXTURE_BINDING_2D = 0x00008069;
    public const int GL_TEXTURE_INTERNAL_FORMAT = 0x00001003;
    public const int GL_TEXTURE_RED_SIZE = 0x0000805C;
    public const int GL_TEXTURE_GREEN_SIZE = 0x0000805D;
    public const int GL_TEXTURE_BLUE_SIZE = 0x0000805E;
    public const int GL_TEXTURE_ALPHA_SIZE = 0x0000805F;
    public const int GL_DOUBLE = 0x0000140A;
    public const int GL_PROXY_TEXTURE_1D = 0x00008063;
    public const int GL_PROXY_TEXTURE_2D = 0x00008064;
    public const int GL_R3_G3_B2 = 0x00002A10;
    public const int GL_RGB4 = 0x0000804F;
    public const int GL_RGB5 = 0x00008050;
    public const int GL_RGB8 = 0x00008051;
    public const int GL_RGB10 = 0x00008052;
    public const int GL_RGB12 = 0x00008053;
    public const int GL_RGB16 = 0x00008054;
    public const int GL_RGBA2 = 0x00008055;
    public const int GL_RGBA4 = 0x00008056;
    public const int GL_RGB5_A1 = 0x00008057;
    public const int GL_RGBA8 = 0x00008058;
    public const int GL_RGB10_A2 = 0x00008059;
    public const int GL_RGBA12 = 0x0000805A;
    public const int GL_RGBA16 = 0x0000805B;
    public const int GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
    public const int GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
    public const uint GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
    public const int GL_VERTEX_ARRAY_POINTER = 0x0000808E;
    public const int GL_NORMAL_ARRAY_POINTER = 0x0000808F;
    public const int GL_COLOR_ARRAY_POINTER = 0x00008090;
    public const int GL_INDEX_ARRAY_POINTER = 0x00008091;
    public const int GL_TEXTURE_COORD_ARRAY_POINTER = 0x00008092;
    public const int GL_EDGE_FLAG_ARRAY_POINTER = 0x00008093;
    public const int GL_FEEDBACK_BUFFER_POINTER = 0x00000DF0;
    public const int GL_SELECTION_BUFFER_POINTER = 0x00000DF3;
    public const int GL_CLIENT_ATTRIB_STACK_DEPTH = 0x00000BB1;
    public const int GL_INDEX_LOGIC_OP = 0x00000BF1;
    public const int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x00000D3B;
    public const int GL_FEEDBACK_BUFFER_SIZE = 0x00000DF1;
    public const int GL_FEEDBACK_BUFFER_TYPE = 0x00000DF2;
    public const int GL_SELECTION_BUFFER_SIZE = 0x00000DF4;
    public const int GL_VERTEX_ARRAY = 0x00008074;
    public const int GL_NORMAL_ARRAY = 0x00008075;
    public const int GL_COLOR_ARRAY = 0x00008076;
    public const int GL_INDEX_ARRAY = 0x00008077;
    public const int GL_TEXTURE_COORD_ARRAY = 0x00008078;
    public const int GL_EDGE_FLAG_ARRAY = 0x00008079;
    public const int GL_VERTEX_ARRAY_SIZE = 0x0000807A;
    public const int GL_VERTEX_ARRAY_TYPE = 0x0000807B;
    public const int GL_VERTEX_ARRAY_STRIDE = 0x0000807C;
    public const int GL_NORMAL_ARRAY_TYPE = 0x0000807E;
    public const int GL_NORMAL_ARRAY_STRIDE = 0x0000807F;
    public const int GL_COLOR_ARRAY_SIZE = 0x00008081;
    public const int GL_COLOR_ARRAY_TYPE = 0x00008082;
    public const int GL_COLOR_ARRAY_STRIDE = 0x00008083;
    public const int GL_INDEX_ARRAY_TYPE = 0x00008085;
    public const int GL_INDEX_ARRAY_STRIDE = 0x00008086;
    public const int GL_TEXTURE_COORD_ARRAY_SIZE = 0x00008088;
    public const int GL_TEXTURE_COORD_ARRAY_TYPE = 0x00008089;
    public const int GL_TEXTURE_COORD_ARRAY_STRIDE = 0x0000808A;
    public const int GL_EDGE_FLAG_ARRAY_STRIDE = 0x0000808C;
    public const int GL_TEXTURE_LUMINANCE_SIZE = 0x00008060;
    public const int GL_TEXTURE_INTENSITY_SIZE = 0x00008061;
    public const int GL_TEXTURE_PRIORITY = 0x00008066;
    public const int GL_TEXTURE_RESIDENT = 0x00008067;
    public const int GL_ALPHA4 = 0x0000803B;
    public const int GL_ALPHA8 = 0x0000803C;
    public const int GL_ALPHA12 = 0x0000803D;
    public const int GL_ALPHA16 = 0x0000803E;
    public const int GL_LUMINANCE4 = 0x0000803F;
    public const int GL_LUMINANCE8 = 0x00008040;
    public const int GL_LUMINANCE12 = 0x00008041;
    public const int GL_LUMINANCE16 = 0x00008042;
    public const int GL_LUMINANCE4_ALPHA4 = 0x00008043;
    public const int GL_LUMINANCE6_ALPHA2 = 0x00008044;
    public const int GL_LUMINANCE8_ALPHA8 = 0x00008045;
    public const int GL_LUMINANCE12_ALPHA4 = 0x00008046;
    public const int GL_LUMINANCE12_ALPHA12 = 0x00008047;
    public const int GL_LUMINANCE16_ALPHA16 = 0x00008048;
    public const int GL_INTENSITY = 0x00008049;
    public const int GL_INTENSITY4 = 0x0000804A;
    public const int GL_INTENSITY8 = 0x0000804B;
    public const int GL_INTENSITY12 = 0x0000804C;
    public const int GL_INTENSITY16 = 0x0000804D;
    public const int GL_V2F = 0x00002A20;
    public const int GL_V3F = 0x00002A21;
    public const int GL_C4UB_V2F = 0x00002A22;
    public const int GL_C4UB_V3F = 0x00002A23;
    public const int GL_C3F_V3F = 0x00002A24;
    public const int GL_N3F_V3F = 0x00002A25;
    public const int GL_C4F_N3F_V3F = 0x00002A26;
    public const int GL_T2F_V3F = 0x00002A27;
    public const int GL_T4F_V4F = 0x00002A28;
    public const int GL_T2F_C4UB_V3F = 0x00002A29;
    public const int GL_T2F_C3F_V3F = 0x00002A2A;
    public const int GL_T2F_N3F_V3F = 0x00002A2B;
    public const int GL_T2F_C4F_N3F_V3F = 0x00002A2C;
    public const int GL_T4F_C4F_N3F_V4F = 0x00002A2D;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, int, int, void> _glDrawArrays = null;
    internal static delegate* unmanaged<uint, int, uint, void*, void> _glDrawElements = null;
    internal static delegate* unmanaged<uint, void**, void> _glGetPointerv = null;
    internal static delegate* unmanaged<float, float, void> _glPolygonOffset = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, int, void> _glCopyTexImage1D = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void> _glCopyTexImage2D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, void> _glCopyTexSubImage1D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> _glCopyTexSubImage2D = null;
    internal static delegate* unmanaged<uint, int, int, int, uint, uint, void*, void> _glTexSubImage1D = null;
    internal static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> _glTexSubImage2D = null;
    internal static delegate* unmanaged<uint, uint, void> _glBindTexture = null;
    internal static delegate* unmanaged<int, uint*, void> _glDeleteTextures = null;
    internal static delegate* unmanaged<int, uint*, void> _glGenTextures = null;
    internal static delegate* unmanaged<uint, bool> _glIsTexture = null;
    internal static delegate* unmanaged<int, void> _glArrayElement = null;
    internal static delegate* unmanaged<int, uint, int, void*, void> _glColorPointer = null;
    internal static delegate* unmanaged<uint, void> _glDisableClientState = null;
    internal static delegate* unmanaged<int, void*, void> _glEdgeFlagPointer = null;
    internal static delegate* unmanaged<uint, void> _glEnableClientState = null;
    internal static delegate* unmanaged<uint, int, void*, void> _glIndexPointer = null;
    internal static delegate* unmanaged<uint, int, void*, void> _glInterleavedArrays = null;
    internal static delegate* unmanaged<uint, int, void*, void> _glNormalPointer = null;
    internal static delegate* unmanaged<int, uint, int, void*, void> _glTexCoordPointer = null;
    internal static delegate* unmanaged<int, uint, int, void*, void> _glVertexPointer = null;
    internal static delegate* unmanaged<int, uint*, bool*, bool> _glAreTexturesResident = null;
    internal static delegate* unmanaged<int, uint*, float*, void> _glPrioritizeTextures = null;
    internal static delegate* unmanaged<byte, void> _glIndexub = null;
    internal static delegate* unmanaged<byte*, void> _glIndexubv = null;
    internal static delegate* unmanaged<void> _glPopClientAttrib = null;
    internal static delegate* unmanaged<uint, void> _glPushClientAttrib = null;

    internal static void Load()
    {
        _glDrawArrays = (delegate* unmanaged<uint, int, int, void>)QuickGL.GetGLProcAddress("glDrawArrays");
        _glDrawElements = (delegate* unmanaged<uint, int, uint, void*, void>)QuickGL.GetGLProcAddress("glDrawElements");
        _glGetPointerv = (delegate* unmanaged<uint, void**, void>)QuickGL.GetGLProcAddress("glGetPointerv");
        _glPolygonOffset = (delegate* unmanaged<float, float, void>)QuickGL.GetGLProcAddress("glPolygonOffset");
        _glCopyTexImage1D = (delegate* unmanaged<uint, int, uint, int, int, int, int, void>)QuickGL.GetGLProcAddress("glCopyTexImage1D");
        _glCopyTexImage2D = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void>)QuickGL.GetGLProcAddress("glCopyTexImage2D");
        _glCopyTexSubImage1D = (delegate* unmanaged<uint, int, int, int, int, int, void>)QuickGL.GetGLProcAddress("glCopyTexSubImage1D");
        _glCopyTexSubImage2D = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)QuickGL.GetGLProcAddress("glCopyTexSubImage2D");
        _glTexSubImage1D = (delegate* unmanaged<uint, int, int, int, uint, uint, void*, void>)QuickGL.GetGLProcAddress("glTexSubImage1D");
        _glTexSubImage2D = (delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void>)QuickGL.GetGLProcAddress("glTexSubImage2D");
        _glBindTexture = (delegate* unmanaged<uint, uint, void>)QuickGL.GetGLProcAddress("glBindTexture");
        _glDeleteTextures = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glDeleteTextures");
        _glGenTextures = (delegate* unmanaged<int, uint*, void>)QuickGL.GetGLProcAddress("glGenTextures");
        _glIsTexture = (delegate* unmanaged<uint, bool>)QuickGL.GetGLProcAddress("glIsTexture");
        _glArrayElement = (delegate* unmanaged<int, void>)QuickGL.GetGLProcAddress("glArrayElement");
        _glColorPointer = (delegate* unmanaged<int, uint, int, void*, void>)QuickGL.GetGLProcAddress("glColorPointer");
        _glDisableClientState = (delegate* unmanaged<uint, void>)QuickGL.GetGLProcAddress("glDisableClientState");
        _glEdgeFlagPointer = (delegate* unmanaged<int, void*, void>)QuickGL.GetGLProcAddress("glEdgeFlagPointer");
        _glEnableClientState = (delegate* unmanaged<uint, void>)QuickGL.GetGLProcAddress("glEnableClientState");
        _glIndexPointer = (delegate* unmanaged<uint, int, void*, void>)QuickGL.GetGLProcAddress("glIndexPointer");
        _glInterleavedArrays = (delegate* unmanaged<uint, int, void*, void>)QuickGL.GetGLProcAddress("glInterleavedArrays");
        _glNormalPointer = (delegate* unmanaged<uint, int, void*, void>)QuickGL.GetGLProcAddress("glNormalPointer");
        _glTexCoordPointer = (delegate* unmanaged<int, uint, int, void*, void>)QuickGL.GetGLProcAddress("glTexCoordPointer");
        _glVertexPointer = (delegate* unmanaged<int, uint, int, void*, void>)QuickGL.GetGLProcAddress("glVertexPointer");
        _glAreTexturesResident = (delegate* unmanaged<int, uint*, bool*, bool>)QuickGL.GetGLProcAddress("glAreTexturesResident");
        _glPrioritizeTextures = (delegate* unmanaged<int, uint*, float*, void>)QuickGL.GetGLProcAddress("glPrioritizeTextures");
        _glIndexub = (delegate* unmanaged<byte, void>)QuickGL.GetGLProcAddress("glIndexub");
        _glIndexubv = (delegate* unmanaged<byte*, void>)QuickGL.GetGLProcAddress("glIndexubv");
        _glPopClientAttrib = (delegate* unmanaged<void>)QuickGL.GetGLProcAddress("glPopClientAttrib");
        _glPushClientAttrib = (delegate* unmanaged<uint, void>)QuickGL.GetGLProcAddress("glPushClientAttrib");
    }

    internal static void Unload()
    {
        _glDrawArrays = null;
        _glDrawElements = null;
        _glGetPointerv = null;
        _glPolygonOffset = null;
        _glCopyTexImage1D = null;
        _glCopyTexImage2D = null;
        _glCopyTexSubImage1D = null;
        _glCopyTexSubImage2D = null;
        _glTexSubImage1D = null;
        _glTexSubImage2D = null;
        _glBindTexture = null;
        _glDeleteTextures = null;
        _glGenTextures = null;
        _glIsTexture = null;
        _glArrayElement = null;
        _glColorPointer = null;
        _glDisableClientState = null;
        _glEdgeFlagPointer = null;
        _glEnableClientState = null;
        _glIndexPointer = null;
        _glInterleavedArrays = null;
        _glNormalPointer = null;
        _glTexCoordPointer = null;
        _glVertexPointer = null;
        _glAreTexturesResident = null;
        _glPrioritizeTextures = null;
        _glIndexub = null;
        _glIndexubv = null;
        _glPopClientAttrib = null;
        _glPushClientAttrib = null;
    }
    #endregion

    #region Function wrappers
    public static void glDrawArrays(uint mode, int first, int count) { QGLFeature.VerifyFunc((nint)_glDrawArrays); _glDrawArrays(mode, first, count); }
    public static void glDrawElements(uint mode, int count, uint type, void* indices) { QGLFeature.VerifyFunc((nint)_glDrawElements); _glDrawElements(mode, count, type, indices); }
    public static void glGetPointerv(uint pname, void** @params) { QGLFeature.VerifyFunc((nint)_glGetPointerv); _glGetPointerv(pname, @params); }
    public static void glPolygonOffset(float factor, float units) { QGLFeature.VerifyFunc((nint)_glPolygonOffset); _glPolygonOffset(factor, units); }
    public static void glCopyTexImage1D(uint target, int level, uint internalformat, int x, int y, int width, int border) { QGLFeature.VerifyFunc((nint)_glCopyTexImage1D); _glCopyTexImage1D(target, level, internalformat, x, y, width, border); }
    public static void glCopyTexImage2D(uint target, int level, uint internalformat, int x, int y, int width, int height, int border) { QGLFeature.VerifyFunc((nint)_glCopyTexImage2D); _glCopyTexImage2D(target, level, internalformat, x, y, width, height, border); }
    public static void glCopyTexSubImage1D(uint target, int level, int xoffset, int x, int y, int width) { QGLFeature.VerifyFunc((nint)_glCopyTexSubImage1D); _glCopyTexSubImage1D(target, level, xoffset, x, y, width); }
    public static void glCopyTexSubImage2D(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height) { QGLFeature.VerifyFunc((nint)_glCopyTexSubImage2D); _glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }
    public static void glTexSubImage1D(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels) { QGLFeature.VerifyFunc((nint)_glTexSubImage1D); _glTexSubImage1D(target, level, xoffset, width, format, type, pixels); }
    public static void glTexSubImage2D(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels) { QGLFeature.VerifyFunc((nint)_glTexSubImage2D); _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
    public static void glBindTexture(uint target, uint texture) { QGLFeature.VerifyFunc((nint)_glBindTexture); _glBindTexture(target, texture); }
    public static void glDeleteTextures(int n, uint* textures) { QGLFeature.VerifyFunc((nint)_glDeleteTextures); _glDeleteTextures(n, textures); }
    public static void glGenTextures(int n, uint* textures) { QGLFeature.VerifyFunc((nint)_glGenTextures); _glGenTextures(n, textures); }
    public static bool glIsTexture(uint texture) { QGLFeature.VerifyFunc((nint)_glIsTexture); return _glIsTexture(texture); }
    public static void glArrayElement(int i) { QGLFeature.VerifyFunc((nint)_glArrayElement); _glArrayElement(i); }
    public static void glColorPointer(int size, uint type, int stride, void* pointer) { QGLFeature.VerifyFunc((nint)_glColorPointer); _glColorPointer(size, type, stride, pointer); }
    public static void glDisableClientState(uint array) { QGLFeature.VerifyFunc((nint)_glDisableClientState); _glDisableClientState(array); }
    public static void glEdgeFlagPointer(int stride, void* pointer) { QGLFeature.VerifyFunc((nint)_glEdgeFlagPointer); _glEdgeFlagPointer(stride, pointer); }
    public static void glEnableClientState(uint array) { QGLFeature.VerifyFunc((nint)_glEnableClientState); _glEnableClientState(array); }
    public static void glIndexPointer(uint type, int stride, void* pointer) { QGLFeature.VerifyFunc((nint)_glIndexPointer); _glIndexPointer(type, stride, pointer); }
    public static void glInterleavedArrays(uint format, int stride, void* pointer) { QGLFeature.VerifyFunc((nint)_glInterleavedArrays); _glInterleavedArrays(format, stride, pointer); }
    public static void glNormalPointer(uint type, int stride, void* pointer) { QGLFeature.VerifyFunc((nint)_glNormalPointer); _glNormalPointer(type, stride, pointer); }
    public static void glTexCoordPointer(int size, uint type, int stride, void* pointer) { QGLFeature.VerifyFunc((nint)_glTexCoordPointer); _glTexCoordPointer(size, type, stride, pointer); }
    public static void glVertexPointer(int size, uint type, int stride, void* pointer) { QGLFeature.VerifyFunc((nint)_glVertexPointer); _glVertexPointer(size, type, stride, pointer); }
    public static bool glAreTexturesResident(int n, uint* textures, bool* residences) { QGLFeature.VerifyFunc((nint)_glAreTexturesResident); return _glAreTexturesResident(n, textures, residences); }
    public static void glPrioritizeTextures(int n, uint* textures, float* priorities) { QGLFeature.VerifyFunc((nint)_glPrioritizeTextures); _glPrioritizeTextures(n, textures, priorities); }
    public static void glIndexub(byte c) { QGLFeature.VerifyFunc((nint)_glIndexub); _glIndexub(c); }
    public static void glIndexubv(byte* c) { QGLFeature.VerifyFunc((nint)_glIndexubv); _glIndexubv(c); }
    public static void glPopClientAttrib() { QGLFeature.VerifyFunc((nint)_glPopClientAttrib); _glPopClientAttrib(); }
    public static void glPushClientAttrib(uint mask) { QGLFeature.VerifyFunc((nint)_glPushClientAttrib); _glPushClientAttrib(mask); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_VERSION_1_1", false, false);
}
