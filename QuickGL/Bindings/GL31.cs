// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T20:04:55.6603808Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings;

public static unsafe class GL31
{
    #region Constants
    public const int GL_SAMPLER_2D_RECT = 0x00008B63;
    public const int GL_SAMPLER_2D_RECT_SHADOW = 0x00008B64;
    public const int GL_SAMPLER_BUFFER = 0x00008DC2;
    public const int GL_INT_SAMPLER_2D_RECT = 0x00008DCD;
    public const int GL_INT_SAMPLER_BUFFER = 0x00008DD0;
    public const int GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x00008DD5;
    public const int GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x00008DD8;
    public const int GL_TEXTURE_BUFFER = 0x00008C2A;
    public const int GL_MAX_TEXTURE_BUFFER_SIZE = 0x00008C2B;
    public const int GL_TEXTURE_BINDING_BUFFER = 0x00008C2C;
    public const int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x00008C2D;
    public const int GL_TEXTURE_RECTANGLE = 0x000084F5;
    public const int GL_TEXTURE_BINDING_RECTANGLE = 0x000084F6;
    public const int GL_PROXY_TEXTURE_RECTANGLE = 0x000084F7;
    public const int GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x000084F8;
    public const int GL_R8_SNORM = 0x00008F94;
    public const int GL_RG8_SNORM = 0x00008F95;
    public const int GL_RGB8_SNORM = 0x00008F96;
    public const int GL_RGBA8_SNORM = 0x00008F97;
    public const int GL_R16_SNORM = 0x00008F98;
    public const int GL_RG16_SNORM = 0x00008F99;
    public const int GL_RGB16_SNORM = 0x00008F9A;
    public const int GL_RGBA16_SNORM = 0x00008F9B;
    public const int GL_SIGNED_NORMALIZED = 0x00008F9C;
    public const int GL_PRIMITIVE_RESTART = 0x00008F9D;
    public const int GL_PRIMITIVE_RESTART_INDEX = 0x00008F9E;
    public const int GL_COPY_READ_BUFFER = 0x00008F36;
    public const int GL_COPY_WRITE_BUFFER = 0x00008F37;
    public const int GL_UNIFORM_BUFFER = 0x00008A11;
    public const int GL_UNIFORM_BUFFER_BINDING = 0x00008A28;
    public const int GL_UNIFORM_BUFFER_START = 0x00008A29;
    public const int GL_UNIFORM_BUFFER_SIZE = 0x00008A2A;
    public const int GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x00008A2B;
    public const int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x00008A2C;
    public const int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x00008A2D;
    public const int GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x00008A2E;
    public const int GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x00008A2F;
    public const int GL_MAX_UNIFORM_BLOCK_SIZE = 0x00008A30;
    public const int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x00008A31;
    public const int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x00008A32;
    public const int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x00008A33;
    public const int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x00008A34;
    public const int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x00008A35;
    public const int GL_ACTIVE_UNIFORM_BLOCKS = 0x00008A36;
    public const int GL_UNIFORM_TYPE = 0x00008A37;
    public const int GL_UNIFORM_SIZE = 0x00008A38;
    public const int GL_UNIFORM_NAME_LENGTH = 0x00008A39;
    public const int GL_UNIFORM_BLOCK_INDEX = 0x00008A3A;
    public const int GL_UNIFORM_OFFSET = 0x00008A3B;
    public const int GL_UNIFORM_ARRAY_STRIDE = 0x00008A3C;
    public const int GL_UNIFORM_MATRIX_STRIDE = 0x00008A3D;
    public const int GL_UNIFORM_IS_ROW_MAJOR = 0x00008A3E;
    public const int GL_UNIFORM_BLOCK_BINDING = 0x00008A3F;
    public const int GL_UNIFORM_BLOCK_DATA_SIZE = 0x00008A40;
    public const int GL_UNIFORM_BLOCK_NAME_LENGTH = 0x00008A41;
    public const int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x00008A42;
    public const int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x00008A43;
    public const int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x00008A44;
    public const int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x00008A45;
    public const int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x00008A46;
    public const uint GL_INVALID_INDEX = 0xFFFFFFFF;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, int, int, int, void> _glDrawArraysInstanced = null;
    internal static delegate* unmanaged<uint, int, uint, void*, int, void> _glDrawElementsInstanced = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glTexBuffer = null;
    internal static delegate* unmanaged<uint, void> _glPrimitiveRestartIndex = null;
    internal static delegate* unmanaged<uint, uint, nint, nint, nint, void> _glCopyBufferSubData = null;
    internal static delegate* unmanaged<uint, int, nint, uint*, void> _glGetUniformIndices = null;
    internal static delegate* unmanaged<uint, int, uint*, uint, int*, void> _glGetActiveUniformsiv = null;
    internal static delegate* unmanaged<uint, uint, int, int*, byte*, void> _glGetActiveUniformName = null;
    internal static delegate* unmanaged<uint, byte*, uint> _glGetUniformBlockIndex = null;
    internal static delegate* unmanaged<uint, uint, uint, int*, void> _glGetActiveUniformBlockiv = null;
    internal static delegate* unmanaged<uint, uint, int, int*, byte*, void> _glGetActiveUniformBlockName = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glUniformBlockBinding = null;
    internal static delegate* unmanaged<uint, uint, uint, nint, nint, void> _glBindBufferRange = null;
    internal static delegate* unmanaged<uint, uint, uint, void> _glBindBufferBase = null;
    internal static delegate* unmanaged<uint, uint, int*, void> _glGetIntegeri_v = null;

    internal static void Load()
    {
        _glDrawArraysInstanced = (delegate* unmanaged<uint, int, int, int, void>)QuickGL.GetGLProcAddress("glDrawArraysInstanced");
        _glDrawElementsInstanced = (delegate* unmanaged<uint, int, uint, void*, int, void>)QuickGL.GetGLProcAddress("glDrawElementsInstanced");
        _glTexBuffer = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glTexBuffer");
        _glPrimitiveRestartIndex = (delegate* unmanaged<uint, void>)QuickGL.GetGLProcAddress("glPrimitiveRestartIndex");
        _glCopyBufferSubData = (delegate* unmanaged<uint, uint, nint, nint, nint, void>)QuickGL.GetGLProcAddress("glCopyBufferSubData");
        _glGetUniformIndices = (delegate* unmanaged<uint, int, nint, uint*, void>)QuickGL.GetGLProcAddress("glGetUniformIndices");
        _glGetActiveUniformsiv = (delegate* unmanaged<uint, int, uint*, uint, int*, void>)QuickGL.GetGLProcAddress("glGetActiveUniformsiv");
        _glGetActiveUniformName = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)QuickGL.GetGLProcAddress("glGetActiveUniformName");
        _glGetUniformBlockIndex = (delegate* unmanaged<uint, byte*, uint>)QuickGL.GetGLProcAddress("glGetUniformBlockIndex");
        _glGetActiveUniformBlockiv = (delegate* unmanaged<uint, uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetActiveUniformBlockiv");
        _glGetActiveUniformBlockName = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)QuickGL.GetGLProcAddress("glGetActiveUniformBlockName");
        _glUniformBlockBinding = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glUniformBlockBinding");
        _glBindBufferRange = (delegate* unmanaged<uint, uint, uint, nint, nint, void>)QuickGL.GetGLProcAddress("glBindBufferRange");
        _glBindBufferBase = (delegate* unmanaged<uint, uint, uint, void>)QuickGL.GetGLProcAddress("glBindBufferBase");
        _glGetIntegeri_v = (delegate* unmanaged<uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetIntegeri_v");
    }

    internal static void Unload()
    {
        _glDrawArraysInstanced = null;
        _glDrawElementsInstanced = null;
        _glTexBuffer = null;
        _glPrimitiveRestartIndex = null;
        _glCopyBufferSubData = null;
        _glGetUniformIndices = null;
        _glGetActiveUniformsiv = null;
        _glGetActiveUniformName = null;
        _glGetUniformBlockIndex = null;
        _glGetActiveUniformBlockiv = null;
        _glGetActiveUniformBlockName = null;
        _glUniformBlockBinding = null;
        _glBindBufferRange = null;
        _glBindBufferBase = null;
        _glGetIntegeri_v = null;
    }
    #endregion

    #region Function wrappers
    public static void glDrawArraysInstanced(uint mode, int first, int count, int instancecount) { QGLFeature.VerifyFunc((nint)_glDrawArraysInstanced); _glDrawArraysInstanced(mode, first, count, instancecount); }
    public static void glDrawElementsInstanced(uint mode, int count, uint type, void* indices, int instancecount) { QGLFeature.VerifyFunc((nint)_glDrawElementsInstanced); _glDrawElementsInstanced(mode, count, type, indices, instancecount); }
    public static void glTexBuffer(uint target, uint internalformat, uint buffer) { QGLFeature.VerifyFunc((nint)_glTexBuffer); _glTexBuffer(target, internalformat, buffer); }
    public static void glPrimitiveRestartIndex(uint index) { QGLFeature.VerifyFunc((nint)_glPrimitiveRestartIndex); _glPrimitiveRestartIndex(index); }
    public static void glCopyBufferSubData(uint readTarget, uint writeTarget, nint readOffset, nint writeOffset, nint size) { QGLFeature.VerifyFunc((nint)_glCopyBufferSubData); _glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); }
    public static void glGetUniformIndices(uint program, int uniformCount, nint uniformNames, uint* uniformIndices) { QGLFeature.VerifyFunc((nint)_glGetUniformIndices); _glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices); }
    public static void glGetActiveUniformsiv(uint program, int uniformCount, uint* uniformIndices, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetActiveUniformsiv); _glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, @params); }
    public static void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, int* length, byte* uniformName) { QGLFeature.VerifyFunc((nint)_glGetActiveUniformName); _glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); }
    public static uint glGetUniformBlockIndex(uint program, byte* uniformBlockName) { QGLFeature.VerifyFunc((nint)_glGetUniformBlockIndex); return _glGetUniformBlockIndex(program, uniformBlockName); }
    public static void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetActiveUniformBlockiv); _glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, @params); }
    public static void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int* length, byte* uniformBlockName) { QGLFeature.VerifyFunc((nint)_glGetActiveUniformBlockName); _glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); }
    public static void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding) { QGLFeature.VerifyFunc((nint)_glUniformBlockBinding); _glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); }
    public static void glBindBufferRange(uint target, uint index, uint buffer, nint offset, nint size) { QGLFeature.VerifyFunc((nint)_glBindBufferRange); _glBindBufferRange(target, index, buffer, offset, size); }
    public static void glBindBufferBase(uint target, uint index, uint buffer) { QGLFeature.VerifyFunc((nint)_glBindBufferBase); _glBindBufferBase(target, index, buffer); }
    public static void glGetIntegeri_v(uint target, uint index, int* data) { QGLFeature.VerifyFunc((nint)_glGetIntegeri_v); _glGetIntegeri_v(target, index, data); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_VERSION_3_1", false, false);
}
