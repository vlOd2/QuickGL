// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:40:57.3379362Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings;

#region Other types
public struct GLFWmonitor { }

public struct GLFWwindow { }

public struct GLFWcursor { }

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWglproc();

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWvkproc();

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void* GLFWallocatefun(nuint size, void* user);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void* GLFWreallocatefun(void* block, nuint size, void* user);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWdeallocatefun(void* block, void* user);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWerrorfun(int error_code, byte* description);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWwindowposfun(GLFWwindow* window, int xpos, int ypos);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWwindowsizefun(GLFWwindow* window, int width, int height);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWwindowclosefun(GLFWwindow* window);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWwindowrefreshfun(GLFWwindow* window);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWwindowfocusfun(GLFWwindow* window, int focused);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWwindowiconifyfun(GLFWwindow* window, int iconified);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWwindowmaximizefun(GLFWwindow* window, int maximized);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWframebuffersizefun(GLFWwindow* window, int width, int height);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWwindowcontentscalefun(GLFWwindow* window, float xscale, float yscale);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWmousebuttonfun(GLFWwindow* window, int button, int action, int mods);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWcursorposfun(GLFWwindow* window, double xpos, double ypos);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWcursorenterfun(GLFWwindow* window, int entered);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWscrollfun(GLFWwindow* window, double xoffset, double yoffset);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWkeyfun(GLFWwindow* window, int key, int scancode, int action, int mods);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWcharfun(GLFWwindow* window, uint codepoint);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWcharmodsfun(GLFWwindow* window, uint codepoint, int mods);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWdropfun(GLFWwindow* window, int path_count, byte** paths);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWmonitorfun(GLFWmonitor* monitor, int @event);

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe delegate void GLFWjoystickfun(int jid, int @event);

[StructLayout(LayoutKind.Sequential)]
public unsafe struct GLFWvidmode
{
    public int width;
    public int height;
    public int redBits;
    public int greenBits;
    public int blueBits;
    public int refreshRate;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe struct GLFWgammaramp
{
    public ushort* red;
    public ushort* green;
    public ushort* blue;
    public uint size;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe struct GLFWimage
{
    public int width;
    public int height;
    public byte* pixels;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe struct GLFWgamepadstate
{
    public byte* buttons;
    public float* axes;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe struct GLFWallocator
{
    public nint allocate;
    public nint reallocate;
    public nint deallocate;
    public void* user;
}

#endregion

public static unsafe class GLFW
{
    #region Constants
    public const int GLFW_VERSION_MAJOR = 0x00000003;
    public const int GLFW_VERSION_MINOR = 0x00000005;
    public const int GLFW_VERSION_REVISION = 0x00000000;
    public const int GLFW_TRUE = 0x00000001;
    public const int GLFW_FALSE = 0x00000000;
    public const int GLFW_RELEASE = 0x00000000;
    public const int GLFW_PRESS = 0x00000001;
    public const int GLFW_REPEAT = 0x00000002;
    public const int GLFW_HAT_CENTERED = 0x00000000;
    public const int GLFW_HAT_UP = 0x00000001;
    public const int GLFW_HAT_RIGHT = 0x00000002;
    public const int GLFW_HAT_DOWN = 0x00000004;
    public const int GLFW_HAT_LEFT = 0x00000008;
    public const int GLFW_HAT_RIGHT_UP = (GLFW_HAT_RIGHT | GLFW_HAT_UP);
    public const int GLFW_HAT_RIGHT_DOWN = (GLFW_HAT_RIGHT | GLFW_HAT_DOWN);
    public const int GLFW_HAT_LEFT_UP = (GLFW_HAT_LEFT  | GLFW_HAT_UP);
    public const int GLFW_HAT_LEFT_DOWN = (GLFW_HAT_LEFT  | GLFW_HAT_DOWN);
    public const ulong GLFW_KEY_UNKNOWN = 0xFFFFFFFFFFFFFFFF;
    public const int GLFW_KEY_SPACE = 0x00000020;
    public const int GLFW_KEY_APOSTROPHE = 0x00000027;
    public const int GLFW_KEY_COMMA = 0x0000002C;
    public const int GLFW_KEY_MINUS = 0x0000002D;
    public const int GLFW_KEY_PERIOD = 0x0000002E;
    public const int GLFW_KEY_SLASH = 0x0000002F;
    public const int GLFW_KEY_0 = 0x00000030;
    public const int GLFW_KEY_1 = 0x00000031;
    public const int GLFW_KEY_2 = 0x00000032;
    public const int GLFW_KEY_3 = 0x00000033;
    public const int GLFW_KEY_4 = 0x00000034;
    public const int GLFW_KEY_5 = 0x00000035;
    public const int GLFW_KEY_6 = 0x00000036;
    public const int GLFW_KEY_7 = 0x00000037;
    public const int GLFW_KEY_8 = 0x00000038;
    public const int GLFW_KEY_9 = 0x00000039;
    public const int GLFW_KEY_SEMICOLON = 0x0000003B;
    public const int GLFW_KEY_EQUAL = 0x0000003D;
    public const int GLFW_KEY_A = 0x00000041;
    public const int GLFW_KEY_B = 0x00000042;
    public const int GLFW_KEY_C = 0x00000043;
    public const int GLFW_KEY_D = 0x00000044;
    public const int GLFW_KEY_E = 0x00000045;
    public const int GLFW_KEY_F = 0x00000046;
    public const int GLFW_KEY_G = 0x00000047;
    public const int GLFW_KEY_H = 0x00000048;
    public const int GLFW_KEY_I = 0x00000049;
    public const int GLFW_KEY_J = 0x0000004A;
    public const int GLFW_KEY_K = 0x0000004B;
    public const int GLFW_KEY_L = 0x0000004C;
    public const int GLFW_KEY_M = 0x0000004D;
    public const int GLFW_KEY_N = 0x0000004E;
    public const int GLFW_KEY_O = 0x0000004F;
    public const int GLFW_KEY_P = 0x00000050;
    public const int GLFW_KEY_Q = 0x00000051;
    public const int GLFW_KEY_R = 0x00000052;
    public const int GLFW_KEY_S = 0x00000053;
    public const int GLFW_KEY_T = 0x00000054;
    public const int GLFW_KEY_U = 0x00000055;
    public const int GLFW_KEY_V = 0x00000056;
    public const int GLFW_KEY_W = 0x00000057;
    public const int GLFW_KEY_X = 0x00000058;
    public const int GLFW_KEY_Y = 0x00000059;
    public const int GLFW_KEY_Z = 0x0000005A;
    public const int GLFW_KEY_LEFT_BRACKET = 0x0000005B;
    public const int GLFW_KEY_BACKSLASH = 0x0000005C;
    public const int GLFW_KEY_RIGHT_BRACKET = 0x0000005D;
    public const int GLFW_KEY_GRAVE_ACCENT = 0x00000060;
    public const int GLFW_KEY_WORLD_1 = 0x000000A1;
    public const int GLFW_KEY_WORLD_2 = 0x000000A2;
    public const int GLFW_KEY_ESCAPE = 0x00000100;
    public const int GLFW_KEY_ENTER = 0x00000101;
    public const int GLFW_KEY_TAB = 0x00000102;
    public const int GLFW_KEY_BACKSPACE = 0x00000103;
    public const int GLFW_KEY_INSERT = 0x00000104;
    public const int GLFW_KEY_DELETE = 0x00000105;
    public const int GLFW_KEY_RIGHT = 0x00000106;
    public const int GLFW_KEY_LEFT = 0x00000107;
    public const int GLFW_KEY_DOWN = 0x00000108;
    public const int GLFW_KEY_UP = 0x00000109;
    public const int GLFW_KEY_PAGE_UP = 0x0000010A;
    public const int GLFW_KEY_PAGE_DOWN = 0x0000010B;
    public const int GLFW_KEY_HOME = 0x0000010C;
    public const int GLFW_KEY_END = 0x0000010D;
    public const int GLFW_KEY_CAPS_LOCK = 0x00000118;
    public const int GLFW_KEY_SCROLL_LOCK = 0x00000119;
    public const int GLFW_KEY_NUM_LOCK = 0x0000011A;
    public const int GLFW_KEY_PRINT_SCREEN = 0x0000011B;
    public const int GLFW_KEY_PAUSE = 0x0000011C;
    public const int GLFW_KEY_F1 = 0x00000122;
    public const int GLFW_KEY_F2 = 0x00000123;
    public const int GLFW_KEY_F3 = 0x00000124;
    public const int GLFW_KEY_F4 = 0x00000125;
    public const int GLFW_KEY_F5 = 0x00000126;
    public const int GLFW_KEY_F6 = 0x00000127;
    public const int GLFW_KEY_F7 = 0x00000128;
    public const int GLFW_KEY_F8 = 0x00000129;
    public const int GLFW_KEY_F9 = 0x0000012A;
    public const int GLFW_KEY_F10 = 0x0000012B;
    public const int GLFW_KEY_F11 = 0x0000012C;
    public const int GLFW_KEY_F12 = 0x0000012D;
    public const int GLFW_KEY_F13 = 0x0000012E;
    public const int GLFW_KEY_F14 = 0x0000012F;
    public const int GLFW_KEY_F15 = 0x00000130;
    public const int GLFW_KEY_F16 = 0x00000131;
    public const int GLFW_KEY_F17 = 0x00000132;
    public const int GLFW_KEY_F18 = 0x00000133;
    public const int GLFW_KEY_F19 = 0x00000134;
    public const int GLFW_KEY_F20 = 0x00000135;
    public const int GLFW_KEY_F21 = 0x00000136;
    public const int GLFW_KEY_F22 = 0x00000137;
    public const int GLFW_KEY_F23 = 0x00000138;
    public const int GLFW_KEY_F24 = 0x00000139;
    public const int GLFW_KEY_F25 = 0x0000013A;
    public const int GLFW_KEY_KP_0 = 0x00000140;
    public const int GLFW_KEY_KP_1 = 0x00000141;
    public const int GLFW_KEY_KP_2 = 0x00000142;
    public const int GLFW_KEY_KP_3 = 0x00000143;
    public const int GLFW_KEY_KP_4 = 0x00000144;
    public const int GLFW_KEY_KP_5 = 0x00000145;
    public const int GLFW_KEY_KP_6 = 0x00000146;
    public const int GLFW_KEY_KP_7 = 0x00000147;
    public const int GLFW_KEY_KP_8 = 0x00000148;
    public const int GLFW_KEY_KP_9 = 0x00000149;
    public const int GLFW_KEY_KP_DECIMAL = 0x0000014A;
    public const int GLFW_KEY_KP_DIVIDE = 0x0000014B;
    public const int GLFW_KEY_KP_MULTIPLY = 0x0000014C;
    public const int GLFW_KEY_KP_SUBTRACT = 0x0000014D;
    public const int GLFW_KEY_KP_ADD = 0x0000014E;
    public const int GLFW_KEY_KP_ENTER = 0x0000014F;
    public const int GLFW_KEY_KP_EQUAL = 0x00000150;
    public const int GLFW_KEY_LEFT_SHIFT = 0x00000154;
    public const int GLFW_KEY_LEFT_CONTROL = 0x00000155;
    public const int GLFW_KEY_LEFT_ALT = 0x00000156;
    public const int GLFW_KEY_LEFT_SUPER = 0x00000157;
    public const int GLFW_KEY_RIGHT_SHIFT = 0x00000158;
    public const int GLFW_KEY_RIGHT_CONTROL = 0x00000159;
    public const int GLFW_KEY_RIGHT_ALT = 0x0000015A;
    public const int GLFW_KEY_RIGHT_SUPER = 0x0000015B;
    public const int GLFW_KEY_MENU = 0x0000015C;
    public const int GLFW_KEY_LAST = GLFW_KEY_MENU;
    public const int GLFW_MOD_SHIFT = 0x00000001;
    public const int GLFW_MOD_CONTROL = 0x00000002;
    public const int GLFW_MOD_ALT = 0x00000004;
    public const int GLFW_MOD_SUPER = 0x00000008;
    public const int GLFW_MOD_CAPS_LOCK = 0x00000010;
    public const int GLFW_MOD_NUM_LOCK = 0x00000020;
    public const int GLFW_MOUSE_BUTTON_1 = 0x00000000;
    public const int GLFW_MOUSE_BUTTON_2 = 0x00000001;
    public const int GLFW_MOUSE_BUTTON_3 = 0x00000002;
    public const int GLFW_MOUSE_BUTTON_4 = 0x00000003;
    public const int GLFW_MOUSE_BUTTON_5 = 0x00000004;
    public const int GLFW_MOUSE_BUTTON_6 = 0x00000005;
    public const int GLFW_MOUSE_BUTTON_7 = 0x00000006;
    public const int GLFW_MOUSE_BUTTON_8 = 0x00000007;
    public const int GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
    public const int GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
    public const int GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
    public const int GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
    public const int GLFW_JOYSTICK_1 = 0x00000000;
    public const int GLFW_JOYSTICK_2 = 0x00000001;
    public const int GLFW_JOYSTICK_3 = 0x00000002;
    public const int GLFW_JOYSTICK_4 = 0x00000003;
    public const int GLFW_JOYSTICK_5 = 0x00000004;
    public const int GLFW_JOYSTICK_6 = 0x00000005;
    public const int GLFW_JOYSTICK_7 = 0x00000006;
    public const int GLFW_JOYSTICK_8 = 0x00000007;
    public const int GLFW_JOYSTICK_9 = 0x00000008;
    public const int GLFW_JOYSTICK_10 = 0x00000009;
    public const int GLFW_JOYSTICK_11 = 0x0000000A;
    public const int GLFW_JOYSTICK_12 = 0x0000000B;
    public const int GLFW_JOYSTICK_13 = 0x0000000C;
    public const int GLFW_JOYSTICK_14 = 0x0000000D;
    public const int GLFW_JOYSTICK_15 = 0x0000000E;
    public const int GLFW_JOYSTICK_16 = 0x0000000F;
    public const int GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
    public const int GLFW_GAMEPAD_BUTTON_A = 0x00000000;
    public const int GLFW_GAMEPAD_BUTTON_B = 0x00000001;
    public const int GLFW_GAMEPAD_BUTTON_X = 0x00000002;
    public const int GLFW_GAMEPAD_BUTTON_Y = 0x00000003;
    public const int GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = 0x00000004;
    public const int GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = 0x00000005;
    public const int GLFW_GAMEPAD_BUTTON_BACK = 0x00000006;
    public const int GLFW_GAMEPAD_BUTTON_START = 0x00000007;
    public const int GLFW_GAMEPAD_BUTTON_GUIDE = 0x00000008;
    public const int GLFW_GAMEPAD_BUTTON_LEFT_THUMB = 0x00000009;
    public const int GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = 0x0000000A;
    public const int GLFW_GAMEPAD_BUTTON_DPAD_UP = 0x0000000B;
    public const int GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = 0x0000000C;
    public const int GLFW_GAMEPAD_BUTTON_DPAD_DOWN = 0x0000000D;
    public const int GLFW_GAMEPAD_BUTTON_DPAD_LEFT = 0x0000000E;
    public const int GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
    public const int GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
    public const int GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
    public const int GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
    public const int GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
    public const int GLFW_GAMEPAD_AXIS_LEFT_X = 0x00000000;
    public const int GLFW_GAMEPAD_AXIS_LEFT_Y = 0x00000001;
    public const int GLFW_GAMEPAD_AXIS_RIGHT_X = 0x00000002;
    public const int GLFW_GAMEPAD_AXIS_RIGHT_Y = 0x00000003;
    public const int GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = 0x00000004;
    public const int GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = 0x00000005;
    public const int GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
    public const int GLFW_NO_ERROR = 0x00000000;
    public const int GLFW_NOT_INITIALIZED = 0x00010001;
    public const int GLFW_NO_CURRENT_CONTEXT = 0x00010002;
    public const int GLFW_INVALID_ENUM = 0x00010003;
    public const int GLFW_INVALID_VALUE = 0x00010004;
    public const int GLFW_OUT_OF_MEMORY = 0x00010005;
    public const int GLFW_API_UNAVAILABLE = 0x00010006;
    public const int GLFW_VERSION_UNAVAILABLE = 0x00010007;
    public const int GLFW_PLATFORM_ERROR = 0x00010008;
    public const int GLFW_FORMAT_UNAVAILABLE = 0x00010009;
    public const int GLFW_NO_WINDOW_CONTEXT = 0x0001000A;
    public const int GLFW_CURSOR_UNAVAILABLE = 0x0001000B;
    public const int GLFW_FEATURE_UNAVAILABLE = 0x0001000C;
    public const int GLFW_FEATURE_UNIMPLEMENTED = 0x0001000D;
    public const int GLFW_PLATFORM_UNAVAILABLE = 0x0001000E;
    public const int GLFW_FOCUSED = 0x00020001;
    public const int GLFW_ICONIFIED = 0x00020002;
    public const int GLFW_RESIZABLE = 0x00020003;
    public const int GLFW_VISIBLE = 0x00020004;
    public const int GLFW_DECORATED = 0x00020005;
    public const int GLFW_AUTO_ICONIFY = 0x00020006;
    public const int GLFW_FLOATING = 0x00020007;
    public const int GLFW_MAXIMIZED = 0x00020008;
    public const int GLFW_CENTER_CURSOR = 0x00020009;
    public const int GLFW_TRANSPARENT_FRAMEBUFFER = 0x0002000A;
    public const int GLFW_HOVERED = 0x0002000B;
    public const int GLFW_FOCUS_ON_SHOW = 0x0002000C;
    public const int GLFW_MOUSE_PASSTHROUGH = 0x0002000D;
    public const int GLFW_POSITION_X = 0x0002000E;
    public const int GLFW_POSITION_Y = 0x0002000F;
    public const int GLFW_RED_BITS = 0x00021001;
    public const int GLFW_GREEN_BITS = 0x00021002;
    public const int GLFW_BLUE_BITS = 0x00021003;
    public const int GLFW_ALPHA_BITS = 0x00021004;
    public const int GLFW_DEPTH_BITS = 0x00021005;
    public const int GLFW_STENCIL_BITS = 0x00021006;
    public const int GLFW_ACCUM_RED_BITS = 0x00021007;
    public const int GLFW_ACCUM_GREEN_BITS = 0x00021008;
    public const int GLFW_ACCUM_BLUE_BITS = 0x00021009;
    public const int GLFW_ACCUM_ALPHA_BITS = 0x0002100A;
    public const int GLFW_AUX_BUFFERS = 0x0002100B;
    public const int GLFW_STEREO = 0x0002100C;
    public const int GLFW_SAMPLES = 0x0002100D;
    public const int GLFW_SRGB_CAPABLE = 0x0002100E;
    public const int GLFW_REFRESH_RATE = 0x0002100F;
    public const int GLFW_DOUBLEBUFFER = 0x00021010;
    public const int GLFW_CLIENT_API = 0x00022001;
    public const int GLFW_CONTEXT_VERSION_MAJOR = 0x00022002;
    public const int GLFW_CONTEXT_VERSION_MINOR = 0x00022003;
    public const int GLFW_CONTEXT_REVISION = 0x00022004;
    public const int GLFW_CONTEXT_ROBUSTNESS = 0x00022005;
    public const int GLFW_OPENGL_FORWARD_COMPAT = 0x00022006;
    public const int GLFW_CONTEXT_DEBUG = 0x00022007;
    public const int GLFW_OPENGL_DEBUG_CONTEXT = GLFW_CONTEXT_DEBUG;
    public const int GLFW_OPENGL_PROFILE = 0x00022008;
    public const int GLFW_CONTEXT_RELEASE_BEHAVIOR = 0x00022009;
    public const int GLFW_CONTEXT_NO_ERROR = 0x0002200A;
    public const int GLFW_CONTEXT_CREATION_API = 0x0002200B;
    public const int GLFW_SCALE_TO_MONITOR = 0x0002200C;
    public const int GLFW_SCALE_FRAMEBUFFER = 0x0002200D;
    public const int GLFW_COCOA_RETINA_FRAMEBUFFER = 0x00023001;
    public const int GLFW_COCOA_FRAME_NAME = 0x00023002;
    public const int GLFW_COCOA_GRAPHICS_SWITCHING = 0x00023003;
    public const int GLFW_X11_CLASS_NAME = 0x00024001;
    public const int GLFW_X11_INSTANCE_NAME = 0x00024002;
    public const int GLFW_WIN32_KEYBOARD_MENU = 0x00025001;
    public const int GLFW_WIN32_SHOWDEFAULT = 0x00025002;
    public const int GLFW_WAYLAND_APP_ID = 0x00026001;
    public const int GLFW_NO_API = 0x00000000;
    public const int GLFW_OPENGL_API = 0x00030001;
    public const int GLFW_OPENGL_ES_API = 0x00030002;
    public const int GLFW_NO_ROBUSTNESS = 0x00000000;
    public const int GLFW_NO_RESET_NOTIFICATION = 0x00031001;
    public const int GLFW_LOSE_CONTEXT_ON_RESET = 0x00031002;
    public const int GLFW_OPENGL_ANY_PROFILE = 0x00000000;
    public const int GLFW_OPENGL_CORE_PROFILE = 0x00032001;
    public const int GLFW_OPENGL_COMPAT_PROFILE = 0x00032002;
    public const int GLFW_CURSOR = 0x00033001;
    public const int GLFW_STICKY_KEYS = 0x00033002;
    public const int GLFW_STICKY_MOUSE_BUTTONS = 0x00033003;
    public const int GLFW_LOCK_KEY_MODS = 0x00033004;
    public const int GLFW_RAW_MOUSE_MOTION = 0x00033005;
    public const int GLFW_UNLIMITED_MOUSE_BUTTONS = 0x00033006;
    public const int GLFW_CURSOR_NORMAL = 0x00034001;
    public const int GLFW_CURSOR_HIDDEN = 0x00034002;
    public const int GLFW_CURSOR_DISABLED = 0x00034003;
    public const int GLFW_CURSOR_CAPTURED = 0x00034004;
    public const int GLFW_ANY_RELEASE_BEHAVIOR = 0x00000000;
    public const int GLFW_RELEASE_BEHAVIOR_FLUSH = 0x00035001;
    public const int GLFW_RELEASE_BEHAVIOR_NONE = 0x00035002;
    public const int GLFW_NATIVE_CONTEXT_API = 0x00036001;
    public const int GLFW_EGL_CONTEXT_API = 0x00036002;
    public const int GLFW_OSMESA_CONTEXT_API = 0x00036003;
    public const int GLFW_ANGLE_PLATFORM_TYPE_NONE = 0x00037001;
    public const int GLFW_ANGLE_PLATFORM_TYPE_OPENGL = 0x00037002;
    public const int GLFW_ANGLE_PLATFORM_TYPE_OPENGLES = 0x00037003;
    public const int GLFW_ANGLE_PLATFORM_TYPE_D3D9 = 0x00037004;
    public const int GLFW_ANGLE_PLATFORM_TYPE_D3D11 = 0x00037005;
    public const int GLFW_ANGLE_PLATFORM_TYPE_VULKAN = 0x00037007;
    public const int GLFW_ANGLE_PLATFORM_TYPE_METAL = 0x00037008;
    public const int GLFW_WAYLAND_PREFER_LIBDECOR = 0x00038001;
    public const int GLFW_WAYLAND_DISABLE_LIBDECOR = 0x00038002;
    public const uint GLFW_ANY_POSITION = 0x80000000;
    public const int GLFW_ARROW_CURSOR = 0x00036001;
    public const int GLFW_IBEAM_CURSOR = 0x00036002;
    public const int GLFW_CROSSHAIR_CURSOR = 0x00036003;
    public const int GLFW_POINTING_HAND_CURSOR = 0x00036004;
    public const int GLFW_RESIZE_EW_CURSOR = 0x00036005;
    public const int GLFW_RESIZE_NS_CURSOR = 0x00036006;
    public const int GLFW_RESIZE_NWSE_CURSOR = 0x00036007;
    public const int GLFW_RESIZE_NESW_CURSOR = 0x00036008;
    public const int GLFW_RESIZE_ALL_CURSOR = 0x00036009;
    public const int GLFW_NOT_ALLOWED_CURSOR = 0x0003600A;
    public const int GLFW_HRESIZE_CURSOR = GLFW_RESIZE_EW_CURSOR;
    public const int GLFW_VRESIZE_CURSOR = GLFW_RESIZE_NS_CURSOR;
    public const int GLFW_HAND_CURSOR = GLFW_POINTING_HAND_CURSOR;
    public const int GLFW_CONNECTED = 0x00040001;
    public const int GLFW_DISCONNECTED = 0x00040002;
    public const int GLFW_JOYSTICK_HAT_BUTTONS = 0x00050001;
    public const int GLFW_ANGLE_PLATFORM_TYPE = 0x00050002;
    public const int GLFW_PLATFORM = 0x00050003;
    public const int GLFW_COCOA_CHDIR_RESOURCES = 0x00051001;
    public const int GLFW_COCOA_MENUBAR = 0x00051002;
    public const int GLFW_X11_XCB_VULKAN_SURFACE = 0x00052001;
    public const int GLFW_WAYLAND_LIBDECOR = 0x00053001;
    public const int GLFW_ANY_PLATFORM = 0x00060000;
    public const int GLFW_PLATFORM_WIN32 = 0x00060001;
    public const int GLFW_PLATFORM_COCOA = 0x00060002;
    public const int GLFW_PLATFORM_WAYLAND = 0x00060003;
    public const int GLFW_PLATFORM_X11 = 0x00060004;
    public const int GLFW_PLATFORM_NULL = 0x00060005;
    public const ulong GLFW_DONT_CARE = 0xFFFFFFFFFFFFFFFF;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<int> _glfwInit = null;
    internal static delegate* unmanaged<void> _glfwTerminate = null;
    internal static delegate* unmanaged<int, int, void> _glfwInitHint = null;
    internal static delegate* unmanaged<GLFWallocator*, void> _glfwInitAllocator = null;
    internal static delegate* unmanaged<nint, void> _glfwInitVulkanLoader = null;
    internal static delegate* unmanaged<int*, int*, int*, void> _glfwGetVersion = null;
    internal static delegate* unmanaged<byte*> _glfwGetVersionString = null;
    internal static delegate* unmanaged<byte**, int> _glfwGetError = null;
    internal static delegate* unmanaged<GLFWerrorfun, GLFWerrorfun> _glfwSetErrorCallback = null;
    internal static delegate* unmanaged<int> _glfwGetPlatform = null;
    internal static delegate* unmanaged<int, int> _glfwPlatformSupported = null;
    internal static delegate* unmanaged<int*, GLFWmonitor**> _glfwGetMonitors = null;
    internal static delegate* unmanaged<GLFWmonitor*> _glfwGetPrimaryMonitor = null;
    internal static delegate* unmanaged<GLFWmonitor*, int*, int*, void> _glfwGetMonitorPos = null;
    internal static delegate* unmanaged<GLFWmonitor*, int*, int*, int*, int*, void> _glfwGetMonitorWorkarea = null;
    internal static delegate* unmanaged<GLFWmonitor*, int*, int*, void> _glfwGetMonitorPhysicalSize = null;
    internal static delegate* unmanaged<GLFWmonitor*, float*, float*, void> _glfwGetMonitorContentScale = null;
    internal static delegate* unmanaged<GLFWmonitor*, byte*> _glfwGetMonitorName = null;
    internal static delegate* unmanaged<GLFWmonitor*, void*, void> _glfwSetMonitorUserPointer = null;
    internal static delegate* unmanaged<GLFWmonitor*, void*> _glfwGetMonitorUserPointer = null;
    internal static delegate* unmanaged<GLFWmonitorfun, GLFWmonitorfun> _glfwSetMonitorCallback = null;
    internal static delegate* unmanaged<GLFWmonitor*, int*, GLFWvidmode*> _glfwGetVideoModes = null;
    internal static delegate* unmanaged<GLFWmonitor*, GLFWvidmode*> _glfwGetVideoMode = null;
    internal static delegate* unmanaged<GLFWmonitor*, float, void> _glfwSetGamma = null;
    internal static delegate* unmanaged<GLFWmonitor*, GLFWgammaramp*> _glfwGetGammaRamp = null;
    internal static delegate* unmanaged<GLFWmonitor*, GLFWgammaramp*, void> _glfwSetGammaRamp = null;
    internal static delegate* unmanaged<void> _glfwDefaultWindowHints = null;
    internal static delegate* unmanaged<int, int, void> _glfwWindowHint = null;
    internal static delegate* unmanaged<int, byte*, void> _glfwWindowHintString = null;
    internal static delegate* unmanaged<int, int, byte*, GLFWmonitor*, GLFWwindow*, GLFWwindow*> _glfwCreateWindow = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwDestroyWindow = null;
    internal static delegate* unmanaged<GLFWwindow*, int> _glfwWindowShouldClose = null;
    internal static delegate* unmanaged<GLFWwindow*, int, void> _glfwSetWindowShouldClose = null;
    internal static delegate* unmanaged<GLFWwindow*, byte*> _glfwGetWindowTitle = null;
    internal static delegate* unmanaged<GLFWwindow*, byte*, void> _glfwSetWindowTitle = null;
    internal static delegate* unmanaged<GLFWwindow*, int, GLFWimage*, void> _glfwSetWindowIcon = null;
    internal static delegate* unmanaged<GLFWwindow*, int*, int*, void> _glfwGetWindowPos = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int, void> _glfwSetWindowPos = null;
    internal static delegate* unmanaged<GLFWwindow*, int*, int*, void> _glfwGetWindowSize = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int, int, int, void> _glfwSetWindowSizeLimits = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int, void> _glfwSetWindowAspectRatio = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int, void> _glfwSetWindowSize = null;
    internal static delegate* unmanaged<GLFWwindow*, int*, int*, void> _glfwGetFramebufferSize = null;
    internal static delegate* unmanaged<GLFWwindow*, int*, int*, int*, int*, void> _glfwGetWindowFrameSize = null;
    internal static delegate* unmanaged<GLFWwindow*, float*, float*, void> _glfwGetWindowContentScale = null;
    internal static delegate* unmanaged<GLFWwindow*, float> _glfwGetWindowOpacity = null;
    internal static delegate* unmanaged<GLFWwindow*, float, void> _glfwSetWindowOpacity = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwIconifyWindow = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwRestoreWindow = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwMaximizeWindow = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwShowWindow = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwHideWindow = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwFocusWindow = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwRequestWindowAttention = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWmonitor*> _glfwGetWindowMonitor = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWmonitor*, int, int, int, int, int, void> _glfwSetWindowMonitor = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int> _glfwGetWindowAttrib = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int, void> _glfwSetWindowAttrib = null;
    internal static delegate* unmanaged<GLFWwindow*, void*, void> _glfwSetWindowUserPointer = null;
    internal static delegate* unmanaged<GLFWwindow*, void*> _glfwGetWindowUserPointer = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWwindowposfun, GLFWwindowposfun> _glfwSetWindowPosCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWwindowsizefun, GLFWwindowsizefun> _glfwSetWindowSizeCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWwindowclosefun, GLFWwindowclosefun> _glfwSetWindowCloseCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWwindowrefreshfun, GLFWwindowrefreshfun> _glfwSetWindowRefreshCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWwindowfocusfun, GLFWwindowfocusfun> _glfwSetWindowFocusCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWwindowiconifyfun, GLFWwindowiconifyfun> _glfwSetWindowIconifyCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWwindowmaximizefun, GLFWwindowmaximizefun> _glfwSetWindowMaximizeCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWframebuffersizefun, GLFWframebuffersizefun> _glfwSetFramebufferSizeCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWwindowcontentscalefun, GLFWwindowcontentscalefun> _glfwSetWindowContentScaleCallback = null;
    internal static delegate* unmanaged<void> _glfwPollEvents = null;
    internal static delegate* unmanaged<void> _glfwWaitEvents = null;
    internal static delegate* unmanaged<double, void> _glfwWaitEventsTimeout = null;
    internal static delegate* unmanaged<void> _glfwPostEmptyEvent = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int> _glfwGetInputMode = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int, void> _glfwSetInputMode = null;
    internal static delegate* unmanaged<int> _glfwRawMouseMotionSupported = null;
    internal static delegate* unmanaged<int, int, byte*> _glfwGetKeyName = null;
    internal static delegate* unmanaged<int, int> _glfwGetKeyScancode = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int> _glfwGetKey = null;
    internal static delegate* unmanaged<GLFWwindow*, int, int> _glfwGetMouseButton = null;
    internal static delegate* unmanaged<GLFWwindow*, double*, double*, void> _glfwGetCursorPos = null;
    internal static delegate* unmanaged<GLFWwindow*, double, double, void> _glfwSetCursorPos = null;
    internal static delegate* unmanaged<GLFWimage*, int, int, GLFWcursor*> _glfwCreateCursor = null;
    internal static delegate* unmanaged<int, GLFWcursor*> _glfwCreateStandardCursor = null;
    internal static delegate* unmanaged<GLFWcursor*, void> _glfwDestroyCursor = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWcursor*, void> _glfwSetCursor = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWkeyfun, GLFWkeyfun> _glfwSetKeyCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWcharfun, GLFWcharfun> _glfwSetCharCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWcharmodsfun, GLFWcharmodsfun> _glfwSetCharModsCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWmousebuttonfun, GLFWmousebuttonfun> _glfwSetMouseButtonCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWcursorposfun, GLFWcursorposfun> _glfwSetCursorPosCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWcursorenterfun, GLFWcursorenterfun> _glfwSetCursorEnterCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWscrollfun, GLFWscrollfun> _glfwSetScrollCallback = null;
    internal static delegate* unmanaged<GLFWwindow*, GLFWdropfun, GLFWdropfun> _glfwSetDropCallback = null;
    internal static delegate* unmanaged<int, int> _glfwJoystickPresent = null;
    internal static delegate* unmanaged<int, int*, float*> _glfwGetJoystickAxes = null;
    internal static delegate* unmanaged<int, int*, byte*> _glfwGetJoystickButtons = null;
    internal static delegate* unmanaged<int, int*, byte*> _glfwGetJoystickHats = null;
    internal static delegate* unmanaged<int, byte*> _glfwGetJoystickName = null;
    internal static delegate* unmanaged<int, byte*> _glfwGetJoystickGUID = null;
    internal static delegate* unmanaged<int, void*, void> _glfwSetJoystickUserPointer = null;
    internal static delegate* unmanaged<int, void*> _glfwGetJoystickUserPointer = null;
    internal static delegate* unmanaged<int, int> _glfwJoystickIsGamepad = null;
    internal static delegate* unmanaged<GLFWjoystickfun, GLFWjoystickfun> _glfwSetJoystickCallback = null;
    internal static delegate* unmanaged<byte*, int> _glfwUpdateGamepadMappings = null;
    internal static delegate* unmanaged<int, byte*> _glfwGetGamepadName = null;
    internal static delegate* unmanaged<int, GLFWgamepadstate*, int> _glfwGetGamepadState = null;
    internal static delegate* unmanaged<GLFWwindow*, byte*, void> _glfwSetClipboardString = null;
    internal static delegate* unmanaged<GLFWwindow*, byte*> _glfwGetClipboardString = null;
    internal static delegate* unmanaged<double> _glfwGetTime = null;
    internal static delegate* unmanaged<double, void> _glfwSetTime = null;
    internal static delegate* unmanaged<ulong> _glfwGetTimerValue = null;
    internal static delegate* unmanaged<ulong> _glfwGetTimerFrequency = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwMakeContextCurrent = null;
    internal static delegate* unmanaged<GLFWwindow*> _glfwGetCurrentContext = null;
    internal static delegate* unmanaged<GLFWwindow*, void> _glfwSwapBuffers = null;
    internal static delegate* unmanaged<int, void> _glfwSwapInterval = null;
    internal static delegate* unmanaged<byte*, int> _glfwExtensionSupported = null;
    internal static delegate* unmanaged<byte*, GLFWglproc> _glfwGetProcAddress = null;
    internal static delegate* unmanaged<int> _glfwVulkanSupported = null;
    internal static delegate* unmanaged<uint*, byte**> _glfwGetRequiredInstanceExtensions = null;
    internal static delegate* unmanaged<nint, byte*, GLFWvkproc> _glfwGetInstanceProcAddress = null;
    internal static delegate* unmanaged<nint, nint, uint, int> _glfwGetPhysicalDevicePresentationSupport = null;
    internal static delegate* unmanaged<nint, GLFWwindow*, nint, nint, nint> _glfwCreateWindowSurface = null;

    internal static void Load()
    {
        _glfwInit = (delegate* unmanaged<int>)QuickGL.GetGLFWProcAddress("glfwInit");
        _glfwTerminate = (delegate* unmanaged<void>)QuickGL.GetGLFWProcAddress("glfwTerminate");
        _glfwInitHint = (delegate* unmanaged<int, int, void>)QuickGL.GetGLFWProcAddress("glfwInitHint");
        _glfwInitAllocator = (delegate* unmanaged<GLFWallocator*, void>)QuickGL.GetGLFWProcAddress("glfwInitAllocator");
        _glfwInitVulkanLoader = (delegate* unmanaged<nint, void>)QuickGL.GetGLFWProcAddress("glfwInitVulkanLoader");
        _glfwGetVersion = (delegate* unmanaged<int*, int*, int*, void>)QuickGL.GetGLFWProcAddress("glfwGetVersion");
        _glfwGetVersionString = (delegate* unmanaged<byte*>)QuickGL.GetGLFWProcAddress("glfwGetVersionString");
        _glfwGetError = (delegate* unmanaged<byte**, int>)QuickGL.GetGLFWProcAddress("glfwGetError");
        _glfwSetErrorCallback = (delegate* unmanaged<GLFWerrorfun, GLFWerrorfun>)QuickGL.GetGLFWProcAddress("glfwSetErrorCallback");
        _glfwGetPlatform = (delegate* unmanaged<int>)QuickGL.GetGLFWProcAddress("glfwGetPlatform");
        _glfwPlatformSupported = (delegate* unmanaged<int, int>)QuickGL.GetGLFWProcAddress("glfwPlatformSupported");
        _glfwGetMonitors = (delegate* unmanaged<int*, GLFWmonitor**>)QuickGL.GetGLFWProcAddress("glfwGetMonitors");
        _glfwGetPrimaryMonitor = (delegate* unmanaged<GLFWmonitor*>)QuickGL.GetGLFWProcAddress("glfwGetPrimaryMonitor");
        _glfwGetMonitorPos = (delegate* unmanaged<GLFWmonitor*, int*, int*, void>)QuickGL.GetGLFWProcAddress("glfwGetMonitorPos");
        _glfwGetMonitorWorkarea = (delegate* unmanaged<GLFWmonitor*, int*, int*, int*, int*, void>)QuickGL.GetGLFWProcAddress("glfwGetMonitorWorkarea");
        _glfwGetMonitorPhysicalSize = (delegate* unmanaged<GLFWmonitor*, int*, int*, void>)QuickGL.GetGLFWProcAddress("glfwGetMonitorPhysicalSize");
        _glfwGetMonitorContentScale = (delegate* unmanaged<GLFWmonitor*, float*, float*, void>)QuickGL.GetGLFWProcAddress("glfwGetMonitorContentScale");
        _glfwGetMonitorName = (delegate* unmanaged<GLFWmonitor*, byte*>)QuickGL.GetGLFWProcAddress("glfwGetMonitorName");
        _glfwSetMonitorUserPointer = (delegate* unmanaged<GLFWmonitor*, void*, void>)QuickGL.GetGLFWProcAddress("glfwSetMonitorUserPointer");
        _glfwGetMonitorUserPointer = (delegate* unmanaged<GLFWmonitor*, void*>)QuickGL.GetGLFWProcAddress("glfwGetMonitorUserPointer");
        _glfwSetMonitorCallback = (delegate* unmanaged<GLFWmonitorfun, GLFWmonitorfun>)QuickGL.GetGLFWProcAddress("glfwSetMonitorCallback");
        _glfwGetVideoModes = (delegate* unmanaged<GLFWmonitor*, int*, GLFWvidmode*>)QuickGL.GetGLFWProcAddress("glfwGetVideoModes");
        _glfwGetVideoMode = (delegate* unmanaged<GLFWmonitor*, GLFWvidmode*>)QuickGL.GetGLFWProcAddress("glfwGetVideoMode");
        _glfwSetGamma = (delegate* unmanaged<GLFWmonitor*, float, void>)QuickGL.GetGLFWProcAddress("glfwSetGamma");
        _glfwGetGammaRamp = (delegate* unmanaged<GLFWmonitor*, GLFWgammaramp*>)QuickGL.GetGLFWProcAddress("glfwGetGammaRamp");
        _glfwSetGammaRamp = (delegate* unmanaged<GLFWmonitor*, GLFWgammaramp*, void>)QuickGL.GetGLFWProcAddress("glfwSetGammaRamp");
        _glfwDefaultWindowHints = (delegate* unmanaged<void>)QuickGL.GetGLFWProcAddress("glfwDefaultWindowHints");
        _glfwWindowHint = (delegate* unmanaged<int, int, void>)QuickGL.GetGLFWProcAddress("glfwWindowHint");
        _glfwWindowHintString = (delegate* unmanaged<int, byte*, void>)QuickGL.GetGLFWProcAddress("glfwWindowHintString");
        _glfwCreateWindow = (delegate* unmanaged<int, int, byte*, GLFWmonitor*, GLFWwindow*, GLFWwindow*>)QuickGL.GetGLFWProcAddress("glfwCreateWindow");
        _glfwDestroyWindow = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwDestroyWindow");
        _glfwWindowShouldClose = (delegate* unmanaged<GLFWwindow*, int>)QuickGL.GetGLFWProcAddress("glfwWindowShouldClose");
        _glfwSetWindowShouldClose = (delegate* unmanaged<GLFWwindow*, int, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowShouldClose");
        _glfwGetWindowTitle = (delegate* unmanaged<GLFWwindow*, byte*>)QuickGL.GetGLFWProcAddress("glfwGetWindowTitle");
        _glfwSetWindowTitle = (delegate* unmanaged<GLFWwindow*, byte*, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowTitle");
        _glfwSetWindowIcon = (delegate* unmanaged<GLFWwindow*, int, GLFWimage*, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowIcon");
        _glfwGetWindowPos = (delegate* unmanaged<GLFWwindow*, int*, int*, void>)QuickGL.GetGLFWProcAddress("glfwGetWindowPos");
        _glfwSetWindowPos = (delegate* unmanaged<GLFWwindow*, int, int, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowPos");
        _glfwGetWindowSize = (delegate* unmanaged<GLFWwindow*, int*, int*, void>)QuickGL.GetGLFWProcAddress("glfwGetWindowSize");
        _glfwSetWindowSizeLimits = (delegate* unmanaged<GLFWwindow*, int, int, int, int, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowSizeLimits");
        _glfwSetWindowAspectRatio = (delegate* unmanaged<GLFWwindow*, int, int, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowAspectRatio");
        _glfwSetWindowSize = (delegate* unmanaged<GLFWwindow*, int, int, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowSize");
        _glfwGetFramebufferSize = (delegate* unmanaged<GLFWwindow*, int*, int*, void>)QuickGL.GetGLFWProcAddress("glfwGetFramebufferSize");
        _glfwGetWindowFrameSize = (delegate* unmanaged<GLFWwindow*, int*, int*, int*, int*, void>)QuickGL.GetGLFWProcAddress("glfwGetWindowFrameSize");
        _glfwGetWindowContentScale = (delegate* unmanaged<GLFWwindow*, float*, float*, void>)QuickGL.GetGLFWProcAddress("glfwGetWindowContentScale");
        _glfwGetWindowOpacity = (delegate* unmanaged<GLFWwindow*, float>)QuickGL.GetGLFWProcAddress("glfwGetWindowOpacity");
        _glfwSetWindowOpacity = (delegate* unmanaged<GLFWwindow*, float, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowOpacity");
        _glfwIconifyWindow = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwIconifyWindow");
        _glfwRestoreWindow = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwRestoreWindow");
        _glfwMaximizeWindow = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwMaximizeWindow");
        _glfwShowWindow = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwShowWindow");
        _glfwHideWindow = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwHideWindow");
        _glfwFocusWindow = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwFocusWindow");
        _glfwRequestWindowAttention = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwRequestWindowAttention");
        _glfwGetWindowMonitor = (delegate* unmanaged<GLFWwindow*, GLFWmonitor*>)QuickGL.GetGLFWProcAddress("glfwGetWindowMonitor");
        _glfwSetWindowMonitor = (delegate* unmanaged<GLFWwindow*, GLFWmonitor*, int, int, int, int, int, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowMonitor");
        _glfwGetWindowAttrib = (delegate* unmanaged<GLFWwindow*, int, int>)QuickGL.GetGLFWProcAddress("glfwGetWindowAttrib");
        _glfwSetWindowAttrib = (delegate* unmanaged<GLFWwindow*, int, int, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowAttrib");
        _glfwSetWindowUserPointer = (delegate* unmanaged<GLFWwindow*, void*, void>)QuickGL.GetGLFWProcAddress("glfwSetWindowUserPointer");
        _glfwGetWindowUserPointer = (delegate* unmanaged<GLFWwindow*, void*>)QuickGL.GetGLFWProcAddress("glfwGetWindowUserPointer");
        _glfwSetWindowPosCallback = (delegate* unmanaged<GLFWwindow*, GLFWwindowposfun, GLFWwindowposfun>)QuickGL.GetGLFWProcAddress("glfwSetWindowPosCallback");
        _glfwSetWindowSizeCallback = (delegate* unmanaged<GLFWwindow*, GLFWwindowsizefun, GLFWwindowsizefun>)QuickGL.GetGLFWProcAddress("glfwSetWindowSizeCallback");
        _glfwSetWindowCloseCallback = (delegate* unmanaged<GLFWwindow*, GLFWwindowclosefun, GLFWwindowclosefun>)QuickGL.GetGLFWProcAddress("glfwSetWindowCloseCallback");
        _glfwSetWindowRefreshCallback = (delegate* unmanaged<GLFWwindow*, GLFWwindowrefreshfun, GLFWwindowrefreshfun>)QuickGL.GetGLFWProcAddress("glfwSetWindowRefreshCallback");
        _glfwSetWindowFocusCallback = (delegate* unmanaged<GLFWwindow*, GLFWwindowfocusfun, GLFWwindowfocusfun>)QuickGL.GetGLFWProcAddress("glfwSetWindowFocusCallback");
        _glfwSetWindowIconifyCallback = (delegate* unmanaged<GLFWwindow*, GLFWwindowiconifyfun, GLFWwindowiconifyfun>)QuickGL.GetGLFWProcAddress("glfwSetWindowIconifyCallback");
        _glfwSetWindowMaximizeCallback = (delegate* unmanaged<GLFWwindow*, GLFWwindowmaximizefun, GLFWwindowmaximizefun>)QuickGL.GetGLFWProcAddress("glfwSetWindowMaximizeCallback");
        _glfwSetFramebufferSizeCallback = (delegate* unmanaged<GLFWwindow*, GLFWframebuffersizefun, GLFWframebuffersizefun>)QuickGL.GetGLFWProcAddress("glfwSetFramebufferSizeCallback");
        _glfwSetWindowContentScaleCallback = (delegate* unmanaged<GLFWwindow*, GLFWwindowcontentscalefun, GLFWwindowcontentscalefun>)QuickGL.GetGLFWProcAddress("glfwSetWindowContentScaleCallback");
        _glfwPollEvents = (delegate* unmanaged<void>)QuickGL.GetGLFWProcAddress("glfwPollEvents");
        _glfwWaitEvents = (delegate* unmanaged<void>)QuickGL.GetGLFWProcAddress("glfwWaitEvents");
        _glfwWaitEventsTimeout = (delegate* unmanaged<double, void>)QuickGL.GetGLFWProcAddress("glfwWaitEventsTimeout");
        _glfwPostEmptyEvent = (delegate* unmanaged<void>)QuickGL.GetGLFWProcAddress("glfwPostEmptyEvent");
        _glfwGetInputMode = (delegate* unmanaged<GLFWwindow*, int, int>)QuickGL.GetGLFWProcAddress("glfwGetInputMode");
        _glfwSetInputMode = (delegate* unmanaged<GLFWwindow*, int, int, void>)QuickGL.GetGLFWProcAddress("glfwSetInputMode");
        _glfwRawMouseMotionSupported = (delegate* unmanaged<int>)QuickGL.GetGLFWProcAddress("glfwRawMouseMotionSupported");
        _glfwGetKeyName = (delegate* unmanaged<int, int, byte*>)QuickGL.GetGLFWProcAddress("glfwGetKeyName");
        _glfwGetKeyScancode = (delegate* unmanaged<int, int>)QuickGL.GetGLFWProcAddress("glfwGetKeyScancode");
        _glfwGetKey = (delegate* unmanaged<GLFWwindow*, int, int>)QuickGL.GetGLFWProcAddress("glfwGetKey");
        _glfwGetMouseButton = (delegate* unmanaged<GLFWwindow*, int, int>)QuickGL.GetGLFWProcAddress("glfwGetMouseButton");
        _glfwGetCursorPos = (delegate* unmanaged<GLFWwindow*, double*, double*, void>)QuickGL.GetGLFWProcAddress("glfwGetCursorPos");
        _glfwSetCursorPos = (delegate* unmanaged<GLFWwindow*, double, double, void>)QuickGL.GetGLFWProcAddress("glfwSetCursorPos");
        _glfwCreateCursor = (delegate* unmanaged<GLFWimage*, int, int, GLFWcursor*>)QuickGL.GetGLFWProcAddress("glfwCreateCursor");
        _glfwCreateStandardCursor = (delegate* unmanaged<int, GLFWcursor*>)QuickGL.GetGLFWProcAddress("glfwCreateStandardCursor");
        _glfwDestroyCursor = (delegate* unmanaged<GLFWcursor*, void>)QuickGL.GetGLFWProcAddress("glfwDestroyCursor");
        _glfwSetCursor = (delegate* unmanaged<GLFWwindow*, GLFWcursor*, void>)QuickGL.GetGLFWProcAddress("glfwSetCursor");
        _glfwSetKeyCallback = (delegate* unmanaged<GLFWwindow*, GLFWkeyfun, GLFWkeyfun>)QuickGL.GetGLFWProcAddress("glfwSetKeyCallback");
        _glfwSetCharCallback = (delegate* unmanaged<GLFWwindow*, GLFWcharfun, GLFWcharfun>)QuickGL.GetGLFWProcAddress("glfwSetCharCallback");
        _glfwSetCharModsCallback = (delegate* unmanaged<GLFWwindow*, GLFWcharmodsfun, GLFWcharmodsfun>)QuickGL.GetGLFWProcAddress("glfwSetCharModsCallback");
        _glfwSetMouseButtonCallback = (delegate* unmanaged<GLFWwindow*, GLFWmousebuttonfun, GLFWmousebuttonfun>)QuickGL.GetGLFWProcAddress("glfwSetMouseButtonCallback");
        _glfwSetCursorPosCallback = (delegate* unmanaged<GLFWwindow*, GLFWcursorposfun, GLFWcursorposfun>)QuickGL.GetGLFWProcAddress("glfwSetCursorPosCallback");
        _glfwSetCursorEnterCallback = (delegate* unmanaged<GLFWwindow*, GLFWcursorenterfun, GLFWcursorenterfun>)QuickGL.GetGLFWProcAddress("glfwSetCursorEnterCallback");
        _glfwSetScrollCallback = (delegate* unmanaged<GLFWwindow*, GLFWscrollfun, GLFWscrollfun>)QuickGL.GetGLFWProcAddress("glfwSetScrollCallback");
        _glfwSetDropCallback = (delegate* unmanaged<GLFWwindow*, GLFWdropfun, GLFWdropfun>)QuickGL.GetGLFWProcAddress("glfwSetDropCallback");
        _glfwJoystickPresent = (delegate* unmanaged<int, int>)QuickGL.GetGLFWProcAddress("glfwJoystickPresent");
        _glfwGetJoystickAxes = (delegate* unmanaged<int, int*, float*>)QuickGL.GetGLFWProcAddress("glfwGetJoystickAxes");
        _glfwGetJoystickButtons = (delegate* unmanaged<int, int*, byte*>)QuickGL.GetGLFWProcAddress("glfwGetJoystickButtons");
        _glfwGetJoystickHats = (delegate* unmanaged<int, int*, byte*>)QuickGL.GetGLFWProcAddress("glfwGetJoystickHats");
        _glfwGetJoystickName = (delegate* unmanaged<int, byte*>)QuickGL.GetGLFWProcAddress("glfwGetJoystickName");
        _glfwGetJoystickGUID = (delegate* unmanaged<int, byte*>)QuickGL.GetGLFWProcAddress("glfwGetJoystickGUID");
        _glfwSetJoystickUserPointer = (delegate* unmanaged<int, void*, void>)QuickGL.GetGLFWProcAddress("glfwSetJoystickUserPointer");
        _glfwGetJoystickUserPointer = (delegate* unmanaged<int, void*>)QuickGL.GetGLFWProcAddress("glfwGetJoystickUserPointer");
        _glfwJoystickIsGamepad = (delegate* unmanaged<int, int>)QuickGL.GetGLFWProcAddress("glfwJoystickIsGamepad");
        _glfwSetJoystickCallback = (delegate* unmanaged<GLFWjoystickfun, GLFWjoystickfun>)QuickGL.GetGLFWProcAddress("glfwSetJoystickCallback");
        _glfwUpdateGamepadMappings = (delegate* unmanaged<byte*, int>)QuickGL.GetGLFWProcAddress("glfwUpdateGamepadMappings");
        _glfwGetGamepadName = (delegate* unmanaged<int, byte*>)QuickGL.GetGLFWProcAddress("glfwGetGamepadName");
        _glfwGetGamepadState = (delegate* unmanaged<int, GLFWgamepadstate*, int>)QuickGL.GetGLFWProcAddress("glfwGetGamepadState");
        _glfwSetClipboardString = (delegate* unmanaged<GLFWwindow*, byte*, void>)QuickGL.GetGLFWProcAddress("glfwSetClipboardString");
        _glfwGetClipboardString = (delegate* unmanaged<GLFWwindow*, byte*>)QuickGL.GetGLFWProcAddress("glfwGetClipboardString");
        _glfwGetTime = (delegate* unmanaged<double>)QuickGL.GetGLFWProcAddress("glfwGetTime");
        _glfwSetTime = (delegate* unmanaged<double, void>)QuickGL.GetGLFWProcAddress("glfwSetTime");
        _glfwGetTimerValue = (delegate* unmanaged<ulong>)QuickGL.GetGLFWProcAddress("glfwGetTimerValue");
        _glfwGetTimerFrequency = (delegate* unmanaged<ulong>)QuickGL.GetGLFWProcAddress("glfwGetTimerFrequency");
        _glfwMakeContextCurrent = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwMakeContextCurrent");
        _glfwGetCurrentContext = (delegate* unmanaged<GLFWwindow*>)QuickGL.GetGLFWProcAddress("glfwGetCurrentContext");
        _glfwSwapBuffers = (delegate* unmanaged<GLFWwindow*, void>)QuickGL.GetGLFWProcAddress("glfwSwapBuffers");
        _glfwSwapInterval = (delegate* unmanaged<int, void>)QuickGL.GetGLFWProcAddress("glfwSwapInterval");
        _glfwExtensionSupported = (delegate* unmanaged<byte*, int>)QuickGL.GetGLFWProcAddress("glfwExtensionSupported");
        _glfwGetProcAddress = (delegate* unmanaged<byte*, GLFWglproc>)QuickGL.GetGLFWProcAddress("glfwGetProcAddress");
        _glfwVulkanSupported = (delegate* unmanaged<int>)QuickGL.GetGLFWProcAddress("glfwVulkanSupported");
        _glfwGetRequiredInstanceExtensions = (delegate* unmanaged<uint*, byte**>)QuickGL.GetGLFWProcAddress("glfwGetRequiredInstanceExtensions");
        _glfwGetInstanceProcAddress = (delegate* unmanaged<nint, byte*, GLFWvkproc>)QuickGL.GetGLFWProcAddress("glfwGetInstanceProcAddress");
        _glfwGetPhysicalDevicePresentationSupport = (delegate* unmanaged<nint, nint, uint, int>)QuickGL.GetGLFWProcAddress("glfwGetPhysicalDevicePresentationSupport");
        _glfwCreateWindowSurface = (delegate* unmanaged<nint, GLFWwindow*, nint, nint, nint>)QuickGL.GetGLFWProcAddress("glfwCreateWindowSurface");
    }

    internal static void Unload()
    {
        _glfwInit = null;
        _glfwTerminate = null;
        _glfwInitHint = null;
        _glfwInitAllocator = null;
        _glfwInitVulkanLoader = null;
        _glfwGetVersion = null;
        _glfwGetVersionString = null;
        _glfwGetError = null;
        _glfwSetErrorCallback = null;
        _glfwGetPlatform = null;
        _glfwPlatformSupported = null;
        _glfwGetMonitors = null;
        _glfwGetPrimaryMonitor = null;
        _glfwGetMonitorPos = null;
        _glfwGetMonitorWorkarea = null;
        _glfwGetMonitorPhysicalSize = null;
        _glfwGetMonitorContentScale = null;
        _glfwGetMonitorName = null;
        _glfwSetMonitorUserPointer = null;
        _glfwGetMonitorUserPointer = null;
        _glfwSetMonitorCallback = null;
        _glfwGetVideoModes = null;
        _glfwGetVideoMode = null;
        _glfwSetGamma = null;
        _glfwGetGammaRamp = null;
        _glfwSetGammaRamp = null;
        _glfwDefaultWindowHints = null;
        _glfwWindowHint = null;
        _glfwWindowHintString = null;
        _glfwCreateWindow = null;
        _glfwDestroyWindow = null;
        _glfwWindowShouldClose = null;
        _glfwSetWindowShouldClose = null;
        _glfwGetWindowTitle = null;
        _glfwSetWindowTitle = null;
        _glfwSetWindowIcon = null;
        _glfwGetWindowPos = null;
        _glfwSetWindowPos = null;
        _glfwGetWindowSize = null;
        _glfwSetWindowSizeLimits = null;
        _glfwSetWindowAspectRatio = null;
        _glfwSetWindowSize = null;
        _glfwGetFramebufferSize = null;
        _glfwGetWindowFrameSize = null;
        _glfwGetWindowContentScale = null;
        _glfwGetWindowOpacity = null;
        _glfwSetWindowOpacity = null;
        _glfwIconifyWindow = null;
        _glfwRestoreWindow = null;
        _glfwMaximizeWindow = null;
        _glfwShowWindow = null;
        _glfwHideWindow = null;
        _glfwFocusWindow = null;
        _glfwRequestWindowAttention = null;
        _glfwGetWindowMonitor = null;
        _glfwSetWindowMonitor = null;
        _glfwGetWindowAttrib = null;
        _glfwSetWindowAttrib = null;
        _glfwSetWindowUserPointer = null;
        _glfwGetWindowUserPointer = null;
        _glfwSetWindowPosCallback = null;
        _glfwSetWindowSizeCallback = null;
        _glfwSetWindowCloseCallback = null;
        _glfwSetWindowRefreshCallback = null;
        _glfwSetWindowFocusCallback = null;
        _glfwSetWindowIconifyCallback = null;
        _glfwSetWindowMaximizeCallback = null;
        _glfwSetFramebufferSizeCallback = null;
        _glfwSetWindowContentScaleCallback = null;
        _glfwPollEvents = null;
        _glfwWaitEvents = null;
        _glfwWaitEventsTimeout = null;
        _glfwPostEmptyEvent = null;
        _glfwGetInputMode = null;
        _glfwSetInputMode = null;
        _glfwRawMouseMotionSupported = null;
        _glfwGetKeyName = null;
        _glfwGetKeyScancode = null;
        _glfwGetKey = null;
        _glfwGetMouseButton = null;
        _glfwGetCursorPos = null;
        _glfwSetCursorPos = null;
        _glfwCreateCursor = null;
        _glfwCreateStandardCursor = null;
        _glfwDestroyCursor = null;
        _glfwSetCursor = null;
        _glfwSetKeyCallback = null;
        _glfwSetCharCallback = null;
        _glfwSetCharModsCallback = null;
        _glfwSetMouseButtonCallback = null;
        _glfwSetCursorPosCallback = null;
        _glfwSetCursorEnterCallback = null;
        _glfwSetScrollCallback = null;
        _glfwSetDropCallback = null;
        _glfwJoystickPresent = null;
        _glfwGetJoystickAxes = null;
        _glfwGetJoystickButtons = null;
        _glfwGetJoystickHats = null;
        _glfwGetJoystickName = null;
        _glfwGetJoystickGUID = null;
        _glfwSetJoystickUserPointer = null;
        _glfwGetJoystickUserPointer = null;
        _glfwJoystickIsGamepad = null;
        _glfwSetJoystickCallback = null;
        _glfwUpdateGamepadMappings = null;
        _glfwGetGamepadName = null;
        _glfwGetGamepadState = null;
        _glfwSetClipboardString = null;
        _glfwGetClipboardString = null;
        _glfwGetTime = null;
        _glfwSetTime = null;
        _glfwGetTimerValue = null;
        _glfwGetTimerFrequency = null;
        _glfwMakeContextCurrent = null;
        _glfwGetCurrentContext = null;
        _glfwSwapBuffers = null;
        _glfwSwapInterval = null;
        _glfwExtensionSupported = null;
        _glfwGetProcAddress = null;
        _glfwVulkanSupported = null;
        _glfwGetRequiredInstanceExtensions = null;
        _glfwGetInstanceProcAddress = null;
        _glfwGetPhysicalDevicePresentationSupport = null;
        _glfwCreateWindowSurface = null;
    }
    #endregion

    #region Function wrappers
    public static int glfwInit() { QGLFeature.VerifyFunc((nint)_glfwInit); return _glfwInit(); }
    public static void glfwTerminate() { QGLFeature.VerifyFunc((nint)_glfwTerminate); _glfwTerminate(); }
    public static void glfwInitHint(int hint, int value) { QGLFeature.VerifyFunc((nint)_glfwInitHint); _glfwInitHint(hint, value); }
    public static void glfwInitAllocator(GLFWallocator* allocator) { QGLFeature.VerifyFunc((nint)_glfwInitAllocator); _glfwInitAllocator(allocator); }
    public static void glfwInitVulkanLoader(nint loader) { QGLFeature.VerifyFunc((nint)_glfwInitVulkanLoader); _glfwInitVulkanLoader(loader); }
    public static void glfwGetVersion(int* major, int* minor, int* rev) { QGLFeature.VerifyFunc((nint)_glfwGetVersion); _glfwGetVersion(major, minor, rev); }
    public static byte* glfwGetVersionString() { QGLFeature.VerifyFunc((nint)_glfwGetVersionString); return _glfwGetVersionString(); }
    public static int glfwGetError(byte** description) { QGLFeature.VerifyFunc((nint)_glfwGetError); return _glfwGetError(description); }
    public static GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetErrorCallback); return _glfwSetErrorCallback(callback); }
    public static int glfwGetPlatform() { QGLFeature.VerifyFunc((nint)_glfwGetPlatform); return _glfwGetPlatform(); }
    public static int glfwPlatformSupported(int platform) { QGLFeature.VerifyFunc((nint)_glfwPlatformSupported); return _glfwPlatformSupported(platform); }
    public static GLFWmonitor** glfwGetMonitors(int* count) { QGLFeature.VerifyFunc((nint)_glfwGetMonitors); return _glfwGetMonitors(count); }
    public static GLFWmonitor* glfwGetPrimaryMonitor() { QGLFeature.VerifyFunc((nint)_glfwGetPrimaryMonitor); return _glfwGetPrimaryMonitor(); }
    public static void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos) { QGLFeature.VerifyFunc((nint)_glfwGetMonitorPos); _glfwGetMonitorPos(monitor, xpos, ypos); }
    public static void glfwGetMonitorWorkarea(GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height) { QGLFeature.VerifyFunc((nint)_glfwGetMonitorWorkarea); _glfwGetMonitorWorkarea(monitor, xpos, ypos, width, height); }
    public static void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM) { QGLFeature.VerifyFunc((nint)_glfwGetMonitorPhysicalSize); _glfwGetMonitorPhysicalSize(monitor, widthMM, heightMM); }
    public static void glfwGetMonitorContentScale(GLFWmonitor* monitor, float* xscale, float* yscale) { QGLFeature.VerifyFunc((nint)_glfwGetMonitorContentScale); _glfwGetMonitorContentScale(monitor, xscale, yscale); }
    public static byte* glfwGetMonitorName(GLFWmonitor* monitor) { QGLFeature.VerifyFunc((nint)_glfwGetMonitorName); return _glfwGetMonitorName(monitor); }
    public static void glfwSetMonitorUserPointer(GLFWmonitor* monitor, void* pointer) { QGLFeature.VerifyFunc((nint)_glfwSetMonitorUserPointer); _glfwSetMonitorUserPointer(monitor, pointer); }
    public static void* glfwGetMonitorUserPointer(GLFWmonitor* monitor) { QGLFeature.VerifyFunc((nint)_glfwGetMonitorUserPointer); return _glfwGetMonitorUserPointer(monitor); }
    public static GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetMonitorCallback); return _glfwSetMonitorCallback(callback); }
    public static GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count) { QGLFeature.VerifyFunc((nint)_glfwGetVideoModes); return _glfwGetVideoModes(monitor, count); }
    public static GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor) { QGLFeature.VerifyFunc((nint)_glfwGetVideoMode); return _glfwGetVideoMode(monitor); }
    public static void glfwSetGamma(GLFWmonitor* monitor, float gamma) { QGLFeature.VerifyFunc((nint)_glfwSetGamma); _glfwSetGamma(monitor, gamma); }
    public static GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor) { QGLFeature.VerifyFunc((nint)_glfwGetGammaRamp); return _glfwGetGammaRamp(monitor); }
    public static void glfwSetGammaRamp(GLFWmonitor* monitor, GLFWgammaramp* ramp) { QGLFeature.VerifyFunc((nint)_glfwSetGammaRamp); _glfwSetGammaRamp(monitor, ramp); }
    public static void glfwDefaultWindowHints() { QGLFeature.VerifyFunc((nint)_glfwDefaultWindowHints); _glfwDefaultWindowHints(); }
    public static void glfwWindowHint(int hint, int value) { QGLFeature.VerifyFunc((nint)_glfwWindowHint); _glfwWindowHint(hint, value); }
    public static void glfwWindowHintString(int hint, byte* value) { QGLFeature.VerifyFunc((nint)_glfwWindowHintString); _glfwWindowHintString(hint, value); }
    public static GLFWwindow* glfwCreateWindow(int width, int height, byte* title, GLFWmonitor* monitor, GLFWwindow* share) { QGLFeature.VerifyFunc((nint)_glfwCreateWindow); return _glfwCreateWindow(width, height, title, monitor, share); }
    public static void glfwDestroyWindow(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwDestroyWindow); _glfwDestroyWindow(window); }
    public static int glfwWindowShouldClose(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwWindowShouldClose); return _glfwWindowShouldClose(window); }
    public static void glfwSetWindowShouldClose(GLFWwindow* window, int value) { QGLFeature.VerifyFunc((nint)_glfwSetWindowShouldClose); _glfwSetWindowShouldClose(window, value); }
    public static byte* glfwGetWindowTitle(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwGetWindowTitle); return _glfwGetWindowTitle(window); }
    public static void glfwSetWindowTitle(GLFWwindow* window, byte* title) { QGLFeature.VerifyFunc((nint)_glfwSetWindowTitle); _glfwSetWindowTitle(window, title); }
    public static void glfwSetWindowIcon(GLFWwindow* window, int count, GLFWimage* images) { QGLFeature.VerifyFunc((nint)_glfwSetWindowIcon); _glfwSetWindowIcon(window, count, images); }
    public static void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos) { QGLFeature.VerifyFunc((nint)_glfwGetWindowPos); _glfwGetWindowPos(window, xpos, ypos); }
    public static void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos) { QGLFeature.VerifyFunc((nint)_glfwSetWindowPos); _glfwSetWindowPos(window, xpos, ypos); }
    public static void glfwGetWindowSize(GLFWwindow* window, int* width, int* height) { QGLFeature.VerifyFunc((nint)_glfwGetWindowSize); _glfwGetWindowSize(window, width, height); }
    public static void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight) { QGLFeature.VerifyFunc((nint)_glfwSetWindowSizeLimits); _glfwSetWindowSizeLimits(window, minwidth, minheight, maxwidth, maxheight); }
    public static void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom) { QGLFeature.VerifyFunc((nint)_glfwSetWindowAspectRatio); _glfwSetWindowAspectRatio(window, numer, denom); }
    public static void glfwSetWindowSize(GLFWwindow* window, int width, int height) { QGLFeature.VerifyFunc((nint)_glfwSetWindowSize); _glfwSetWindowSize(window, width, height); }
    public static void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height) { QGLFeature.VerifyFunc((nint)_glfwGetFramebufferSize); _glfwGetFramebufferSize(window, width, height); }
    public static void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom) { QGLFeature.VerifyFunc((nint)_glfwGetWindowFrameSize); _glfwGetWindowFrameSize(window, left, top, right, bottom); }
    public static void glfwGetWindowContentScale(GLFWwindow* window, float* xscale, float* yscale) { QGLFeature.VerifyFunc((nint)_glfwGetWindowContentScale); _glfwGetWindowContentScale(window, xscale, yscale); }
    public static float glfwGetWindowOpacity(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwGetWindowOpacity); return _glfwGetWindowOpacity(window); }
    public static void glfwSetWindowOpacity(GLFWwindow* window, float opacity) { QGLFeature.VerifyFunc((nint)_glfwSetWindowOpacity); _glfwSetWindowOpacity(window, opacity); }
    public static void glfwIconifyWindow(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwIconifyWindow); _glfwIconifyWindow(window); }
    public static void glfwRestoreWindow(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwRestoreWindow); _glfwRestoreWindow(window); }
    public static void glfwMaximizeWindow(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwMaximizeWindow); _glfwMaximizeWindow(window); }
    public static void glfwShowWindow(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwShowWindow); _glfwShowWindow(window); }
    public static void glfwHideWindow(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwHideWindow); _glfwHideWindow(window); }
    public static void glfwFocusWindow(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwFocusWindow); _glfwFocusWindow(window); }
    public static void glfwRequestWindowAttention(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwRequestWindowAttention); _glfwRequestWindowAttention(window); }
    public static GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwGetWindowMonitor); return _glfwGetWindowMonitor(window); }
    public static void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate) { QGLFeature.VerifyFunc((nint)_glfwSetWindowMonitor); _glfwSetWindowMonitor(window, monitor, xpos, ypos, width, height, refreshRate); }
    public static int glfwGetWindowAttrib(GLFWwindow* window, int attrib) { QGLFeature.VerifyFunc((nint)_glfwGetWindowAttrib); return _glfwGetWindowAttrib(window, attrib); }
    public static void glfwSetWindowAttrib(GLFWwindow* window, int attrib, int value) { QGLFeature.VerifyFunc((nint)_glfwSetWindowAttrib); _glfwSetWindowAttrib(window, attrib, value); }
    public static void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer) { QGLFeature.VerifyFunc((nint)_glfwSetWindowUserPointer); _glfwSetWindowUserPointer(window, pointer); }
    public static void* glfwGetWindowUserPointer(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwGetWindowUserPointer); return _glfwGetWindowUserPointer(window); }
    public static GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetWindowPosCallback); return _glfwSetWindowPosCallback(window, callback); }
    public static GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun callback) { QGLFeature.VerifyFunc((nint)_glfwSetWindowSizeCallback); return _glfwSetWindowSizeCallback(window, callback); }
    public static GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun callback) { QGLFeature.VerifyFunc((nint)_glfwSetWindowCloseCallback); return _glfwSetWindowCloseCallback(window, callback); }
    public static GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetWindowRefreshCallback); return _glfwSetWindowRefreshCallback(window, callback); }
    public static GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetWindowFocusCallback); return _glfwSetWindowFocusCallback(window, callback); }
    public static GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetWindowIconifyCallback); return _glfwSetWindowIconifyCallback(window, callback); }
    public static GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow* window, GLFWwindowmaximizefun callback) { QGLFeature.VerifyFunc((nint)_glfwSetWindowMaximizeCallback); return _glfwSetWindowMaximizeCallback(window, callback); }
    public static GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun callback) { QGLFeature.VerifyFunc((nint)_glfwSetFramebufferSizeCallback); return _glfwSetFramebufferSizeCallback(window, callback); }
    public static GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow* window, GLFWwindowcontentscalefun callback) { QGLFeature.VerifyFunc((nint)_glfwSetWindowContentScaleCallback); return _glfwSetWindowContentScaleCallback(window, callback); }
    public static void glfwPollEvents() { QGLFeature.VerifyFunc((nint)_glfwPollEvents); _glfwPollEvents(); }
    public static void glfwWaitEvents() { QGLFeature.VerifyFunc((nint)_glfwWaitEvents); _glfwWaitEvents(); }
    public static void glfwWaitEventsTimeout(double timeout) { QGLFeature.VerifyFunc((nint)_glfwWaitEventsTimeout); _glfwWaitEventsTimeout(timeout); }
    public static void glfwPostEmptyEvent() { QGLFeature.VerifyFunc((nint)_glfwPostEmptyEvent); _glfwPostEmptyEvent(); }
    public static int glfwGetInputMode(GLFWwindow* window, int mode) { QGLFeature.VerifyFunc((nint)_glfwGetInputMode); return _glfwGetInputMode(window, mode); }
    public static void glfwSetInputMode(GLFWwindow* window, int mode, int value) { QGLFeature.VerifyFunc((nint)_glfwSetInputMode); _glfwSetInputMode(window, mode, value); }
    public static int glfwRawMouseMotionSupported() { QGLFeature.VerifyFunc((nint)_glfwRawMouseMotionSupported); return _glfwRawMouseMotionSupported(); }
    public static byte* glfwGetKeyName(int key, int scancode) { QGLFeature.VerifyFunc((nint)_glfwGetKeyName); return _glfwGetKeyName(key, scancode); }
    public static int glfwGetKeyScancode(int key) { QGLFeature.VerifyFunc((nint)_glfwGetKeyScancode); return _glfwGetKeyScancode(key); }
    public static int glfwGetKey(GLFWwindow* window, int key) { QGLFeature.VerifyFunc((nint)_glfwGetKey); return _glfwGetKey(window, key); }
    public static int glfwGetMouseButton(GLFWwindow* window, int button) { QGLFeature.VerifyFunc((nint)_glfwGetMouseButton); return _glfwGetMouseButton(window, button); }
    public static void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos) { QGLFeature.VerifyFunc((nint)_glfwGetCursorPos); _glfwGetCursorPos(window, xpos, ypos); }
    public static void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos) { QGLFeature.VerifyFunc((nint)_glfwSetCursorPos); _glfwSetCursorPos(window, xpos, ypos); }
    public static GLFWcursor* glfwCreateCursor(GLFWimage* image, int xhot, int yhot) { QGLFeature.VerifyFunc((nint)_glfwCreateCursor); return _glfwCreateCursor(image, xhot, yhot); }
    public static GLFWcursor* glfwCreateStandardCursor(int shape) { QGLFeature.VerifyFunc((nint)_glfwCreateStandardCursor); return _glfwCreateStandardCursor(shape); }
    public static void glfwDestroyCursor(GLFWcursor* cursor) { QGLFeature.VerifyFunc((nint)_glfwDestroyCursor); _glfwDestroyCursor(cursor); }
    public static void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor) { QGLFeature.VerifyFunc((nint)_glfwSetCursor); _glfwSetCursor(window, cursor); }
    public static GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetKeyCallback); return _glfwSetKeyCallback(window, callback); }
    public static GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetCharCallback); return _glfwSetCharCallback(window, callback); }
    public static GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* window, GLFWcharmodsfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetCharModsCallback); return _glfwSetCharModsCallback(window, callback); }
    public static GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetMouseButtonCallback); return _glfwSetMouseButtonCallback(window, callback); }
    public static GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetCursorPosCallback); return _glfwSetCursorPosCallback(window, callback); }
    public static GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetCursorEnterCallback); return _glfwSetCursorEnterCallback(window, callback); }
    public static GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetScrollCallback); return _glfwSetScrollCallback(window, callback); }
    public static GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetDropCallback); return _glfwSetDropCallback(window, callback); }
    public static int glfwJoystickPresent(int jid) { QGLFeature.VerifyFunc((nint)_glfwJoystickPresent); return _glfwJoystickPresent(jid); }
    public static float* glfwGetJoystickAxes(int jid, int* count) { QGLFeature.VerifyFunc((nint)_glfwGetJoystickAxes); return _glfwGetJoystickAxes(jid, count); }
    public static byte* glfwGetJoystickButtons(int jid, int* count) { QGLFeature.VerifyFunc((nint)_glfwGetJoystickButtons); return _glfwGetJoystickButtons(jid, count); }
    public static byte* glfwGetJoystickHats(int jid, int* count) { QGLFeature.VerifyFunc((nint)_glfwGetJoystickHats); return _glfwGetJoystickHats(jid, count); }
    public static byte* glfwGetJoystickName(int jid) { QGLFeature.VerifyFunc((nint)_glfwGetJoystickName); return _glfwGetJoystickName(jid); }
    public static byte* glfwGetJoystickGUID(int jid) { QGLFeature.VerifyFunc((nint)_glfwGetJoystickGUID); return _glfwGetJoystickGUID(jid); }
    public static void glfwSetJoystickUserPointer(int jid, void* pointer) { QGLFeature.VerifyFunc((nint)_glfwSetJoystickUserPointer); _glfwSetJoystickUserPointer(jid, pointer); }
    public static void* glfwGetJoystickUserPointer(int jid) { QGLFeature.VerifyFunc((nint)_glfwGetJoystickUserPointer); return _glfwGetJoystickUserPointer(jid); }
    public static int glfwJoystickIsGamepad(int jid) { QGLFeature.VerifyFunc((nint)_glfwJoystickIsGamepad); return _glfwJoystickIsGamepad(jid); }
    public static GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback) { QGLFeature.VerifyFunc((nint)_glfwSetJoystickCallback); return _glfwSetJoystickCallback(callback); }
    public static int glfwUpdateGamepadMappings(byte* @string) { QGLFeature.VerifyFunc((nint)_glfwUpdateGamepadMappings); return _glfwUpdateGamepadMappings(@string); }
    public static byte* glfwGetGamepadName(int jid) { QGLFeature.VerifyFunc((nint)_glfwGetGamepadName); return _glfwGetGamepadName(jid); }
    public static int glfwGetGamepadState(int jid, GLFWgamepadstate* state) { QGLFeature.VerifyFunc((nint)_glfwGetGamepadState); return _glfwGetGamepadState(jid, state); }
    public static void glfwSetClipboardString(GLFWwindow* window, byte* @string) { QGLFeature.VerifyFunc((nint)_glfwSetClipboardString); _glfwSetClipboardString(window, @string); }
    public static byte* glfwGetClipboardString(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwGetClipboardString); return _glfwGetClipboardString(window); }
    public static double glfwGetTime() { QGLFeature.VerifyFunc((nint)_glfwGetTime); return _glfwGetTime(); }
    public static void glfwSetTime(double time) { QGLFeature.VerifyFunc((nint)_glfwSetTime); _glfwSetTime(time); }
    public static ulong glfwGetTimerValue() { QGLFeature.VerifyFunc((nint)_glfwGetTimerValue); return _glfwGetTimerValue(); }
    public static ulong glfwGetTimerFrequency() { QGLFeature.VerifyFunc((nint)_glfwGetTimerFrequency); return _glfwGetTimerFrequency(); }
    public static void glfwMakeContextCurrent(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwMakeContextCurrent); _glfwMakeContextCurrent(window); }
    public static GLFWwindow* glfwGetCurrentContext() { QGLFeature.VerifyFunc((nint)_glfwGetCurrentContext); return _glfwGetCurrentContext(); }
    public static void glfwSwapBuffers(GLFWwindow* window) { QGLFeature.VerifyFunc((nint)_glfwSwapBuffers); _glfwSwapBuffers(window); }
    public static void glfwSwapInterval(int interval) { QGLFeature.VerifyFunc((nint)_glfwSwapInterval); _glfwSwapInterval(interval); }
    public static int glfwExtensionSupported(byte* extension) { QGLFeature.VerifyFunc((nint)_glfwExtensionSupported); return _glfwExtensionSupported(extension); }
    public static GLFWglproc glfwGetProcAddress(byte* procname) { QGLFeature.VerifyFunc((nint)_glfwGetProcAddress); return _glfwGetProcAddress(procname); }
    public static int glfwVulkanSupported() { QGLFeature.VerifyFunc((nint)_glfwVulkanSupported); return _glfwVulkanSupported(); }
    public static byte** glfwGetRequiredInstanceExtensions(uint* count) { QGLFeature.VerifyFunc((nint)_glfwGetRequiredInstanceExtensions); return _glfwGetRequiredInstanceExtensions(count); }
    public static GLFWvkproc glfwGetInstanceProcAddress(nint instance, byte* procname) { QGLFeature.VerifyFunc((nint)_glfwGetInstanceProcAddress); return _glfwGetInstanceProcAddress(instance, procname); }
    public static int glfwGetPhysicalDevicePresentationSupport(nint instance, nint device, uint queuefamily) { QGLFeature.VerifyFunc((nint)_glfwGetPhysicalDevicePresentationSupport); return _glfwGetPhysicalDevicePresentationSupport(instance, device, queuefamily); }
    public static nint glfwCreateWindowSurface(nint instance, GLFWwindow* window, nint allocator, nint surface) { QGLFeature.VerifyFunc((nint)_glfwCreateWindowSurface); return _glfwCreateWindowSurface(instance, window, allocator, surface); }
    #endregion
}
