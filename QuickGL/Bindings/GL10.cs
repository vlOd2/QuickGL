// MIT License
// 
// Copyright (c) 2025 vlOd
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using QuickGLNS.Internal;

// Bindings generated at 2025-01-04 01:08:51.530554
namespace QuickGLNS.Bindings
{
    [GLFeature]
    public static unsafe class GL10
    {
        #region Enums
        public const int GL_DEPTH_BUFFER_BIT = 0x100;
        public const int GL_STENCIL_BUFFER_BIT = 0x400;
        public const int GL_COLOR_BUFFER_BIT = 0x4000;
        public const int GL_FALSE = 0x0;
        public const int GL_TRUE = 0x1;
        public const int GL_POINTS = 0x0;
        public const int GL_LINES = 0x1;
        public const int GL_LINE_LOOP = 0x2;
        public const int GL_LINE_STRIP = 0x3;
        public const int GL_TRIANGLES = 0x4;
        public const int GL_TRIANGLE_STRIP = 0x5;
        public const int GL_TRIANGLE_FAN = 0x6;
        public const int GL_QUADS = 0x7;
        public const int GL_NEVER = 0x200;
        public const int GL_LESS = 0x201;
        public const int GL_EQUAL = 0x202;
        public const int GL_LEQUAL = 0x203;
        public const int GL_GREATER = 0x204;
        public const int GL_NOTEQUAL = 0x205;
        public const int GL_GEQUAL = 0x206;
        public const int GL_ALWAYS = 0x207;
        public const int GL_ZERO = 0x0;
        public const int GL_ONE = 0x1;
        public const int GL_SRC_COLOR = 0x300;
        public const int GL_ONE_MINUS_SRC_COLOR = 0x301;
        public const int GL_SRC_ALPHA = 0x302;
        public const int GL_ONE_MINUS_SRC_ALPHA = 0x303;
        public const int GL_DST_ALPHA = 0x304;
        public const int GL_ONE_MINUS_DST_ALPHA = 0x305;
        public const int GL_DST_COLOR = 0x306;
        public const int GL_ONE_MINUS_DST_COLOR = 0x307;
        public const int GL_SRC_ALPHA_SATURATE = 0x308;
        public const int GL_NONE = 0x0;
        public const int GL_FRONT_LEFT = 0x400;
        public const int GL_FRONT_RIGHT = 0x401;
        public const int GL_BACK_LEFT = 0x402;
        public const int GL_BACK_RIGHT = 0x403;
        public const int GL_FRONT = 0x404;
        public const int GL_BACK = 0x405;
        public const int GL_LEFT = 0x406;
        public const int GL_RIGHT = 0x407;
        public const int GL_FRONT_AND_BACK = 0x408;
        public const int GL_NO_ERROR = 0x0;
        public const int GL_INVALID_ENUM = 0x500;
        public const int GL_INVALID_VALUE = 0x501;
        public const int GL_INVALID_OPERATION = 0x502;
        public const int GL_OUT_OF_MEMORY = 0x505;
        public const int GL_CW = 0x900;
        public const int GL_CCW = 0x901;
        public const int GL_POINT_SIZE = 0xB11;
        public const int GL_POINT_SIZE_RANGE = 0xB12;
        public const int GL_POINT_SIZE_GRANULARITY = 0xB13;
        public const int GL_LINE_SMOOTH = 0xB20;
        public const int GL_LINE_WIDTH = 0xB21;
        public const int GL_LINE_WIDTH_RANGE = 0xB22;
        public const int GL_LINE_WIDTH_GRANULARITY = 0xB23;
        public const int GL_POLYGON_MODE = 0xB40;
        public const int GL_POLYGON_SMOOTH = 0xB41;
        public const int GL_CULL_FACE = 0xB44;
        public const int GL_CULL_FACE_MODE = 0xB45;
        public const int GL_FRONT_FACE = 0xB46;
        public const int GL_DEPTH_RANGE = 0xB70;
        public const int GL_DEPTH_TEST = 0xB71;
        public const int GL_DEPTH_WRITEMASK = 0xB72;
        public const int GL_DEPTH_CLEAR_VALUE = 0xB73;
        public const int GL_DEPTH_FUNC = 0xB74;
        public const int GL_STENCIL_TEST = 0xB90;
        public const int GL_STENCIL_CLEAR_VALUE = 0xB91;
        public const int GL_STENCIL_FUNC = 0xB92;
        public const int GL_STENCIL_VALUE_MASK = 0xB93;
        public const int GL_STENCIL_FAIL = 0xB94;
        public const int GL_STENCIL_PASS_DEPTH_FAIL = 0xB95;
        public const int GL_STENCIL_PASS_DEPTH_PASS = 0xB96;
        public const int GL_STENCIL_REF = 0xB97;
        public const int GL_STENCIL_WRITEMASK = 0xB98;
        public const int GL_VIEWPORT = 0xBA2;
        public const int GL_DITHER = 0xBD0;
        public const int GL_BLEND_DST = 0xBE0;
        public const int GL_BLEND_SRC = 0xBE1;
        public const int GL_BLEND = 0xBE2;
        public const int GL_LOGIC_OP_MODE = 0xBF0;
        public const int GL_DRAW_BUFFER = 0xC01;
        public const int GL_READ_BUFFER = 0xC02;
        public const int GL_SCISSOR_BOX = 0xC10;
        public const int GL_SCISSOR_TEST = 0xC11;
        public const int GL_COLOR_CLEAR_VALUE = 0xC22;
        public const int GL_COLOR_WRITEMASK = 0xC23;
        public const int GL_DOUBLEBUFFER = 0xC32;
        public const int GL_STEREO = 0xC33;
        public const int GL_LINE_SMOOTH_HINT = 0xC52;
        public const int GL_POLYGON_SMOOTH_HINT = 0xC53;
        public const int GL_UNPACK_SWAP_BYTES = 0xCF0;
        public const int GL_UNPACK_LSB_FIRST = 0xCF1;
        public const int GL_UNPACK_ROW_LENGTH = 0xCF2;
        public const int GL_UNPACK_SKIP_ROWS = 0xCF3;
        public const int GL_UNPACK_SKIP_PIXELS = 0xCF4;
        public const int GL_UNPACK_ALIGNMENT = 0xCF5;
        public const int GL_PACK_SWAP_BYTES = 0xD00;
        public const int GL_PACK_LSB_FIRST = 0xD01;
        public const int GL_PACK_ROW_LENGTH = 0xD02;
        public const int GL_PACK_SKIP_ROWS = 0xD03;
        public const int GL_PACK_SKIP_PIXELS = 0xD04;
        public const int GL_PACK_ALIGNMENT = 0xD05;
        public const int GL_MAX_TEXTURE_SIZE = 0xD33;
        public const int GL_MAX_VIEWPORT_DIMS = 0xD3A;
        public const int GL_SUBPIXEL_BITS = 0xD50;
        public const int GL_TEXTURE_1D = 0xDE0;
        public const int GL_TEXTURE_2D = 0xDE1;
        public const int GL_TEXTURE_WIDTH = 0x1000;
        public const int GL_TEXTURE_HEIGHT = 0x1001;
        public const int GL_TEXTURE_BORDER_COLOR = 0x1004;
        public const int GL_DONT_CARE = 0x1100;
        public const int GL_FASTEST = 0x1101;
        public const int GL_NICEST = 0x1102;
        public const int GL_BYTE = 0x1400;
        public const int GL_UNSIGNED_BYTE = 0x1401;
        public const int GL_SHORT = 0x1402;
        public const int GL_UNSIGNED_SHORT = 0x1403;
        public const int GL_INT = 0x1404;
        public const int GL_UNSIGNED_INT = 0x1405;
        public const int GL_FLOAT = 0x1406;
        public const int GL_STACK_OVERFLOW = 0x503;
        public const int GL_STACK_UNDERFLOW = 0x504;
        public const int GL_CLEAR = 0x1500;
        public const int GL_AND = 0x1501;
        public const int GL_AND_REVERSE = 0x1502;
        public const int GL_COPY = 0x1503;
        public const int GL_AND_INVERTED = 0x1504;
        public const int GL_NOOP = 0x1505;
        public const int GL_XOR = 0x1506;
        public const int GL_OR = 0x1507;
        public const int GL_NOR = 0x1508;
        public const int GL_EQUIV = 0x1509;
        public const int GL_INVERT = 0x150A;
        public const int GL_OR_REVERSE = 0x150B;
        public const int GL_COPY_INVERTED = 0x150C;
        public const int GL_OR_INVERTED = 0x150D;
        public const int GL_NAND = 0x150E;
        public const int GL_SET = 0x150F;
        public const int GL_TEXTURE = 0x1702;
        public const int GL_COLOR = 0x1800;
        public const int GL_DEPTH = 0x1801;
        public const int GL_STENCIL = 0x1802;
        public const int GL_STENCIL_INDEX = 0x1901;
        public const int GL_DEPTH_COMPONENT = 0x1902;
        public const int GL_RED = 0x1903;
        public const int GL_GREEN = 0x1904;
        public const int GL_BLUE = 0x1905;
        public const int GL_ALPHA = 0x1906;
        public const int GL_RGB = 0x1907;
        public const int GL_RGBA = 0x1908;
        public const int GL_POINT = 0x1B00;
        public const int GL_LINE = 0x1B01;
        public const int GL_FILL = 0x1B02;
        public const int GL_KEEP = 0x1E00;
        public const int GL_REPLACE = 0x1E01;
        public const int GL_INCR = 0x1E02;
        public const int GL_DECR = 0x1E03;
        public const int GL_VENDOR = 0x1F00;
        public const int GL_RENDERER = 0x1F01;
        public const int GL_VERSION = 0x1F02;
        public const int GL_EXTENSIONS = 0x1F03;
        public const int GL_NEAREST = 0x2600;
        public const int GL_LINEAR = 0x2601;
        public const int GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public const int GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public const int GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public const int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public const int GL_TEXTURE_MAG_FILTER = 0x2800;
        public const int GL_TEXTURE_MIN_FILTER = 0x2801;
        public const int GL_TEXTURE_WRAP_S = 0x2802;
        public const int GL_TEXTURE_WRAP_T = 0x2803;
        public const int GL_REPEAT = 0x2901;
        public const int GL_CURRENT_BIT = 0x1;
        public const int GL_POINT_BIT = 0x2;
        public const int GL_LINE_BIT = 0x4;
        public const int GL_POLYGON_BIT = 0x8;
        public const int GL_POLYGON_STIPPLE_BIT = 0x10;
        public const int GL_PIXEL_MODE_BIT = 0x20;
        public const int GL_LIGHTING_BIT = 0x40;
        public const int GL_FOG_BIT = 0x80;
        public const int GL_ACCUM_BUFFER_BIT = 0x200;
        public const int GL_VIEWPORT_BIT = 0x800;
        public const int GL_TRANSFORM_BIT = 0x1000;
        public const int GL_ENABLE_BIT = 0x2000;
        public const int GL_HINT_BIT = 0x8000;
        public const int GL_EVAL_BIT = 0x10000;
        public const int GL_LIST_BIT = 0x20000;
        public const int GL_TEXTURE_BIT = 0x40000;
        public const int GL_SCISSOR_BIT = 0x80000;
        public const uint GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
        public const int GL_QUAD_STRIP = 0x8;
        public const int GL_POLYGON = 0x9;
        public const int GL_ACCUM = 0x100;
        public const int GL_LOAD = 0x101;
        public const int GL_RETURN = 0x102;
        public const int GL_MULT = 0x103;
        public const int GL_ADD = 0x104;
        public const int GL_AUX0 = 0x409;
        public const int GL_AUX1 = 0x40A;
        public const int GL_AUX2 = 0x40B;
        public const int GL_AUX3 = 0x40C;
        public const int GL_2D = 0x600;
        public const int GL_3D = 0x601;
        public const int GL_3D_COLOR = 0x602;
        public const int GL_3D_COLOR_TEXTURE = 0x603;
        public const int GL_4D_COLOR_TEXTURE = 0x604;
        public const int GL_PASS_THROUGH_TOKEN = 0x700;
        public const int GL_POINT_TOKEN = 0x701;
        public const int GL_LINE_TOKEN = 0x702;
        public const int GL_POLYGON_TOKEN = 0x703;
        public const int GL_BITMAP_TOKEN = 0x704;
        public const int GL_DRAW_PIXEL_TOKEN = 0x705;
        public const int GL_COPY_PIXEL_TOKEN = 0x706;
        public const int GL_LINE_RESET_TOKEN = 0x707;
        public const int GL_EXP = 0x800;
        public const int GL_EXP2 = 0x801;
        public const int GL_COEFF = 0xA00;
        public const int GL_ORDER = 0xA01;
        public const int GL_DOMAIN = 0xA02;
        public const int GL_PIXEL_MAP_I_TO_I = 0xC70;
        public const int GL_PIXEL_MAP_S_TO_S = 0xC71;
        public const int GL_PIXEL_MAP_I_TO_R = 0xC72;
        public const int GL_PIXEL_MAP_I_TO_G = 0xC73;
        public const int GL_PIXEL_MAP_I_TO_B = 0xC74;
        public const int GL_PIXEL_MAP_I_TO_A = 0xC75;
        public const int GL_PIXEL_MAP_R_TO_R = 0xC76;
        public const int GL_PIXEL_MAP_G_TO_G = 0xC77;
        public const int GL_PIXEL_MAP_B_TO_B = 0xC78;
        public const int GL_PIXEL_MAP_A_TO_A = 0xC79;
        public const int GL_CURRENT_COLOR = 0xB00;
        public const int GL_CURRENT_INDEX = 0xB01;
        public const int GL_CURRENT_NORMAL = 0xB02;
        public const int GL_CURRENT_TEXTURE_COORDS = 0xB03;
        public const int GL_CURRENT_RASTER_COLOR = 0xB04;
        public const int GL_CURRENT_RASTER_INDEX = 0xB05;
        public const int GL_CURRENT_RASTER_TEXTURE_COORDS = 0xB06;
        public const int GL_CURRENT_RASTER_POSITION = 0xB07;
        public const int GL_CURRENT_RASTER_POSITION_VALID = 0xB08;
        public const int GL_CURRENT_RASTER_DISTANCE = 0xB09;
        public const int GL_POINT_SMOOTH = 0xB10;
        public const int GL_LINE_STIPPLE = 0xB24;
        public const int GL_LINE_STIPPLE_PATTERN = 0xB25;
        public const int GL_LINE_STIPPLE_REPEAT = 0xB26;
        public const int GL_LIST_MODE = 0xB30;
        public const int GL_MAX_LIST_NESTING = 0xB31;
        public const int GL_LIST_BASE = 0xB32;
        public const int GL_LIST_INDEX = 0xB33;
        public const int GL_POLYGON_STIPPLE = 0xB42;
        public const int GL_EDGE_FLAG = 0xB43;
        public const int GL_LIGHTING = 0xB50;
        public const int GL_LIGHT_MODEL_LOCAL_VIEWER = 0xB51;
        public const int GL_LIGHT_MODEL_TWO_SIDE = 0xB52;
        public const int GL_LIGHT_MODEL_AMBIENT = 0xB53;
        public const int GL_SHADE_MODEL = 0xB54;
        public const int GL_COLOR_MATERIAL_FACE = 0xB55;
        public const int GL_COLOR_MATERIAL_PARAMETER = 0xB56;
        public const int GL_COLOR_MATERIAL = 0xB57;
        public const int GL_FOG = 0xB60;
        public const int GL_FOG_INDEX = 0xB61;
        public const int GL_FOG_DENSITY = 0xB62;
        public const int GL_FOG_START = 0xB63;
        public const int GL_FOG_END = 0xB64;
        public const int GL_FOG_MODE = 0xB65;
        public const int GL_FOG_COLOR = 0xB66;
        public const int GL_ACCUM_CLEAR_VALUE = 0xB80;
        public const int GL_MATRIX_MODE = 0xBA0;
        public const int GL_NORMALIZE = 0xBA1;
        public const int GL_MODELVIEW_STACK_DEPTH = 0xBA3;
        public const int GL_PROJECTION_STACK_DEPTH = 0xBA4;
        public const int GL_TEXTURE_STACK_DEPTH = 0xBA5;
        public const int GL_MODELVIEW_MATRIX = 0xBA6;
        public const int GL_PROJECTION_MATRIX = 0xBA7;
        public const int GL_TEXTURE_MATRIX = 0xBA8;
        public const int GL_ATTRIB_STACK_DEPTH = 0xBB0;
        public const int GL_ALPHA_TEST = 0xBC0;
        public const int GL_ALPHA_TEST_FUNC = 0xBC1;
        public const int GL_ALPHA_TEST_REF = 0xBC2;
        public const int GL_LOGIC_OP = 0xBF1;
        public const int GL_AUX_BUFFERS = 0xC00;
        public const int GL_INDEX_CLEAR_VALUE = 0xC20;
        public const int GL_INDEX_WRITEMASK = 0xC21;
        public const int GL_INDEX_MODE = 0xC30;
        public const int GL_RGBA_MODE = 0xC31;
        public const int GL_RENDER_MODE = 0xC40;
        public const int GL_PERSPECTIVE_CORRECTION_HINT = 0xC50;
        public const int GL_POINT_SMOOTH_HINT = 0xC51;
        public const int GL_FOG_HINT = 0xC54;
        public const int GL_TEXTURE_GEN_S = 0xC60;
        public const int GL_TEXTURE_GEN_T = 0xC61;
        public const int GL_TEXTURE_GEN_R = 0xC62;
        public const int GL_TEXTURE_GEN_Q = 0xC63;
        public const int GL_PIXEL_MAP_I_TO_I_SIZE = 0xCB0;
        public const int GL_PIXEL_MAP_S_TO_S_SIZE = 0xCB1;
        public const int GL_PIXEL_MAP_I_TO_R_SIZE = 0xCB2;
        public const int GL_PIXEL_MAP_I_TO_G_SIZE = 0xCB3;
        public const int GL_PIXEL_MAP_I_TO_B_SIZE = 0xCB4;
        public const int GL_PIXEL_MAP_I_TO_A_SIZE = 0xCB5;
        public const int GL_PIXEL_MAP_R_TO_R_SIZE = 0xCB6;
        public const int GL_PIXEL_MAP_G_TO_G_SIZE = 0xCB7;
        public const int GL_PIXEL_MAP_B_TO_B_SIZE = 0xCB8;
        public const int GL_PIXEL_MAP_A_TO_A_SIZE = 0xCB9;
        public const int GL_MAP_COLOR = 0xD10;
        public const int GL_MAP_STENCIL = 0xD11;
        public const int GL_INDEX_SHIFT = 0xD12;
        public const int GL_INDEX_OFFSET = 0xD13;
        public const int GL_RED_SCALE = 0xD14;
        public const int GL_RED_BIAS = 0xD15;
        public const int GL_ZOOM_X = 0xD16;
        public const int GL_ZOOM_Y = 0xD17;
        public const int GL_GREEN_SCALE = 0xD18;
        public const int GL_GREEN_BIAS = 0xD19;
        public const int GL_BLUE_SCALE = 0xD1A;
        public const int GL_BLUE_BIAS = 0xD1B;
        public const int GL_ALPHA_SCALE = 0xD1C;
        public const int GL_ALPHA_BIAS = 0xD1D;
        public const int GL_DEPTH_SCALE = 0xD1E;
        public const int GL_DEPTH_BIAS = 0xD1F;
        public const int GL_MAX_EVAL_ORDER = 0xD30;
        public const int GL_MAX_LIGHTS = 0xD31;
        public const int GL_MAX_CLIP_PLANES = 0xD32;
        public const int GL_MAX_PIXEL_MAP_TABLE = 0xD34;
        public const int GL_MAX_ATTRIB_STACK_DEPTH = 0xD35;
        public const int GL_MAX_MODELVIEW_STACK_DEPTH = 0xD36;
        public const int GL_MAX_NAME_STACK_DEPTH = 0xD37;
        public const int GL_MAX_PROJECTION_STACK_DEPTH = 0xD38;
        public const int GL_MAX_TEXTURE_STACK_DEPTH = 0xD39;
        public const int GL_INDEX_BITS = 0xD51;
        public const int GL_RED_BITS = 0xD52;
        public const int GL_GREEN_BITS = 0xD53;
        public const int GL_BLUE_BITS = 0xD54;
        public const int GL_ALPHA_BITS = 0xD55;
        public const int GL_DEPTH_BITS = 0xD56;
        public const int GL_STENCIL_BITS = 0xD57;
        public const int GL_ACCUM_RED_BITS = 0xD58;
        public const int GL_ACCUM_GREEN_BITS = 0xD59;
        public const int GL_ACCUM_BLUE_BITS = 0xD5A;
        public const int GL_ACCUM_ALPHA_BITS = 0xD5B;
        public const int GL_NAME_STACK_DEPTH = 0xD70;
        public const int GL_AUTO_NORMAL = 0xD80;
        public const int GL_MAP1_COLOR_4 = 0xD90;
        public const int GL_MAP1_INDEX = 0xD91;
        public const int GL_MAP1_NORMAL = 0xD92;
        public const int GL_MAP1_TEXTURE_COORD_1 = 0xD93;
        public const int GL_MAP1_TEXTURE_COORD_2 = 0xD94;
        public const int GL_MAP1_TEXTURE_COORD_3 = 0xD95;
        public const int GL_MAP1_TEXTURE_COORD_4 = 0xD96;
        public const int GL_MAP1_VERTEX_3 = 0xD97;
        public const int GL_MAP1_VERTEX_4 = 0xD98;
        public const int GL_MAP2_COLOR_4 = 0xDB0;
        public const int GL_MAP2_INDEX = 0xDB1;
        public const int GL_MAP2_NORMAL = 0xDB2;
        public const int GL_MAP2_TEXTURE_COORD_1 = 0xDB3;
        public const int GL_MAP2_TEXTURE_COORD_2 = 0xDB4;
        public const int GL_MAP2_TEXTURE_COORD_3 = 0xDB5;
        public const int GL_MAP2_TEXTURE_COORD_4 = 0xDB6;
        public const int GL_MAP2_VERTEX_3 = 0xDB7;
        public const int GL_MAP2_VERTEX_4 = 0xDB8;
        public const int GL_MAP1_GRID_DOMAIN = 0xDD0;
        public const int GL_MAP1_GRID_SEGMENTS = 0xDD1;
        public const int GL_MAP2_GRID_DOMAIN = 0xDD2;
        public const int GL_MAP2_GRID_SEGMENTS = 0xDD3;
        public const int GL_TEXTURE_COMPONENTS = 0x1003;
        public const int GL_TEXTURE_BORDER = 0x1005;
        public const int GL_AMBIENT = 0x1200;
        public const int GL_DIFFUSE = 0x1201;
        public const int GL_SPECULAR = 0x1202;
        public const int GL_POSITION = 0x1203;
        public const int GL_SPOT_DIRECTION = 0x1204;
        public const int GL_SPOT_EXPONENT = 0x1205;
        public const int GL_SPOT_CUTOFF = 0x1206;
        public const int GL_CONSTANT_ATTENUATION = 0x1207;
        public const int GL_LINEAR_ATTENUATION = 0x1208;
        public const int GL_QUADRATIC_ATTENUATION = 0x1209;
        public const int GL_COMPILE = 0x1300;
        public const int GL_COMPILE_AND_EXECUTE = 0x1301;
        public const int GL_2_BYTES = 0x1407;
        public const int GL_3_BYTES = 0x1408;
        public const int GL_4_BYTES = 0x1409;
        public const int GL_EMISSION = 0x1600;
        public const int GL_SHININESS = 0x1601;
        public const int GL_AMBIENT_AND_DIFFUSE = 0x1602;
        public const int GL_COLOR_INDEXES = 0x1603;
        public const int GL_MODELVIEW = 0x1700;
        public const int GL_PROJECTION = 0x1701;
        public const int GL_COLOR_INDEX = 0x1900;
        public const int GL_LUMINANCE = 0x1909;
        public const int GL_LUMINANCE_ALPHA = 0x190A;
        public const int GL_BITMAP = 0x1A00;
        public const int GL_RENDER = 0x1C00;
        public const int GL_FEEDBACK = 0x1C01;
        public const int GL_SELECT = 0x1C02;
        public const int GL_FLAT = 0x1D00;
        public const int GL_SMOOTH = 0x1D01;
        public const int GL_S = 0x2000;
        public const int GL_T = 0x2001;
        public const int GL_R = 0x2002;
        public const int GL_Q = 0x2003;
        public const int GL_MODULATE = 0x2100;
        public const int GL_DECAL = 0x2101;
        public const int GL_TEXTURE_ENV_MODE = 0x2200;
        public const int GL_TEXTURE_ENV_COLOR = 0x2201;
        public const int GL_TEXTURE_ENV = 0x2300;
        public const int GL_EYE_LINEAR = 0x2400;
        public const int GL_OBJECT_LINEAR = 0x2401;
        public const int GL_SPHERE_MAP = 0x2402;
        public const int GL_TEXTURE_GEN_MODE = 0x2500;
        public const int GL_OBJECT_PLANE = 0x2501;
        public const int GL_EYE_PLANE = 0x2502;
        public const int GL_CLAMP = 0x2900;
        public const int GL_CLIP_PLANE0 = 0x3000;
        public const int GL_CLIP_PLANE1 = 0x3001;
        public const int GL_CLIP_PLANE2 = 0x3002;
        public const int GL_CLIP_PLANE3 = 0x3003;
        public const int GL_CLIP_PLANE4 = 0x3004;
        public const int GL_CLIP_PLANE5 = 0x3005;
        public const int GL_LIGHT0 = 0x4000;
        public const int GL_LIGHT1 = 0x4001;
        public const int GL_LIGHT2 = 0x4002;
        public const int GL_LIGHT3 = 0x4003;
        public const int GL_LIGHT4 = 0x4004;
        public const int GL_LIGHT5 = 0x4005;
        public const int GL_LIGHT6 = 0x4006;
        public const int GL_LIGHT7 = 0x4007;
        #endregion
        
        #region Commands
        [QGLNativeAPI("glCullFace")] public static delegate* unmanaged<uint, void> glCullFace;
        [QGLNativeAPI("glFrontFace")] public static delegate* unmanaged<uint, void> glFrontFace;
        [QGLNativeAPI("glHint")] public static delegate* unmanaged<uint, uint, void> glHint;
        [QGLNativeAPI("glLineWidth")] public static delegate* unmanaged<float, void> glLineWidth;
        [QGLNativeAPI("glPointSize")] public static delegate* unmanaged<float, void> glPointSize;
        [QGLNativeAPI("glPolygonMode")] public static delegate* unmanaged<uint, uint, void> glPolygonMode;
        [QGLNativeAPI("glScissor")] public static delegate* unmanaged<int, int, int, int, void> glScissor;
        [QGLNativeAPI("glTexParameterf")] public static delegate* unmanaged<uint, uint, float, void> glTexParameterf;
        [QGLNativeAPI("glTexParameterfv")] public static delegate* unmanaged<uint, uint, float*, void> glTexParameterfv;
        [QGLNativeAPI("glTexParameteri")] public static delegate* unmanaged<uint, uint, int, void> glTexParameteri;
        [QGLNativeAPI("glTexParameteriv")] public static delegate* unmanaged<uint, uint, int*, void> glTexParameteriv;
        [QGLNativeAPI("glTexImage1D")] public static delegate* unmanaged<uint, int, int, int, int, uint, uint, void*, void> glTexImage1D;
        [QGLNativeAPI("glTexImage2D")] public static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> glTexImage2D;
        [QGLNativeAPI("glDrawBuffer")] public static delegate* unmanaged<uint, void> glDrawBuffer;
        [QGLNativeAPI("glClear")] public static delegate* unmanaged<uint, void> glClear;
        [QGLNativeAPI("glClearColor")] public static delegate* unmanaged<float, float, float, float, void> glClearColor;
        [QGLNativeAPI("glClearStencil")] public static delegate* unmanaged<int, void> glClearStencil;
        [QGLNativeAPI("glClearDepth")] public static delegate* unmanaged<double, void> glClearDepth;
        [QGLNativeAPI("glStencilMask")] public static delegate* unmanaged<uint, void> glStencilMask;
        [QGLNativeAPI("glColorMask")] public static delegate* unmanaged<bool, bool, bool, bool, void> glColorMask;
        [QGLNativeAPI("glDepthMask")] public static delegate* unmanaged<bool, void> glDepthMask;
        [QGLNativeAPI("glDisable")] public static delegate* unmanaged<uint, void> glDisable;
        [QGLNativeAPI("glEnable")] public static delegate* unmanaged<uint, void> glEnable;
        [QGLNativeAPI("glFinish")] public static delegate* unmanaged<void> glFinish;
        [QGLNativeAPI("glFlush")] public static delegate* unmanaged<void> glFlush;
        [QGLNativeAPI("glBlendFunc")] public static delegate* unmanaged<uint, uint, void> glBlendFunc;
        [QGLNativeAPI("glLogicOp")] public static delegate* unmanaged<uint, void> glLogicOp;
        [QGLNativeAPI("glStencilFunc")] public static delegate* unmanaged<uint, int, uint, void> glStencilFunc;
        [QGLNativeAPI("glStencilOp")] public static delegate* unmanaged<uint, uint, uint, void> glStencilOp;
        [QGLNativeAPI("glDepthFunc")] public static delegate* unmanaged<uint, void> glDepthFunc;
        [QGLNativeAPI("glPixelStoref")] public static delegate* unmanaged<uint, float, void> glPixelStoref;
        [QGLNativeAPI("glPixelStorei")] public static delegate* unmanaged<uint, int, void> glPixelStorei;
        [QGLNativeAPI("glReadBuffer")] public static delegate* unmanaged<uint, void> glReadBuffer;
        [QGLNativeAPI("glReadPixels")] public static delegate* unmanaged<int, int, int, int, uint, uint, void*, void> glReadPixels;
        [QGLNativeAPI("glGetBooleanv")] public static delegate* unmanaged<uint, bool*, void> glGetBooleanv;
        [QGLNativeAPI("glGetDoublev")] public static delegate* unmanaged<uint, double*, void> glGetDoublev;
        [QGLNativeAPI("glGetError")] public static delegate* unmanaged<uint> glGetError;
        [QGLNativeAPI("glGetFloatv")] public static delegate* unmanaged<uint, float*, void> glGetFloatv;
        [QGLNativeAPI("glGetIntegerv")] public static delegate* unmanaged<uint, int*, void> glGetIntegerv;
        [QGLNativeAPI("glGetString")] public static delegate* unmanaged<uint, byte*> glGetString;
        [QGLNativeAPI("glGetTexImage")] public static delegate* unmanaged<uint, int, uint, uint, void*, void> glGetTexImage;
        [QGLNativeAPI("glGetTexParameterfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetTexParameterfv;
        [QGLNativeAPI("glGetTexParameteriv")] public static delegate* unmanaged<uint, uint, int*, void> glGetTexParameteriv;
        [QGLNativeAPI("glGetTexLevelParameterfv")] public static delegate* unmanaged<uint, int, uint, float*, void> glGetTexLevelParameterfv;
        [QGLNativeAPI("glGetTexLevelParameteriv")] public static delegate* unmanaged<uint, int, uint, int*, void> glGetTexLevelParameteriv;
        [QGLNativeAPI("glIsEnabled")] public static delegate* unmanaged<uint, bool> glIsEnabled;
        [QGLNativeAPI("glDepthRange")] public static delegate* unmanaged<double, double, void> glDepthRange;
        [QGLNativeAPI("glViewport")] public static delegate* unmanaged<int, int, int, int, void> glViewport;
        [QGLNativeAPI("glNewList")] public static delegate* unmanaged<uint, uint, void> glNewList;
        [QGLNativeAPI("glEndList")] public static delegate* unmanaged<void> glEndList;
        [QGLNativeAPI("glCallList")] public static delegate* unmanaged<uint, void> glCallList;
        [QGLNativeAPI("glCallLists")] public static delegate* unmanaged<int, uint, void*, void> glCallLists;
        [QGLNativeAPI("glDeleteLists")] public static delegate* unmanaged<uint, int, void> glDeleteLists;
        [QGLNativeAPI("glGenLists")] public static delegate* unmanaged<int, uint> glGenLists;
        [QGLNativeAPI("glListBase")] public static delegate* unmanaged<uint, void> glListBase;
        [QGLNativeAPI("glBegin")] public static delegate* unmanaged<uint, void> glBegin;
        [QGLNativeAPI("glBitmap")] public static delegate* unmanaged<int, int, float, float, float, float, byte*, void> glBitmap;
        [QGLNativeAPI("glColor3b")] public static delegate* unmanaged<sbyte, sbyte, sbyte, void> glColor3b;
        [QGLNativeAPI("glColor3bv")] public static delegate* unmanaged<sbyte*, void> glColor3bv;
        [QGLNativeAPI("glColor3d")] public static delegate* unmanaged<double, double, double, void> glColor3d;
        [QGLNativeAPI("glColor3dv")] public static delegate* unmanaged<double*, void> glColor3dv;
        [QGLNativeAPI("glColor3f")] public static delegate* unmanaged<float, float, float, void> glColor3f;
        [QGLNativeAPI("glColor3fv")] public static delegate* unmanaged<float*, void> glColor3fv;
        [QGLNativeAPI("glColor3i")] public static delegate* unmanaged<int, int, int, void> glColor3i;
        [QGLNativeAPI("glColor3iv")] public static delegate* unmanaged<int*, void> glColor3iv;
        [QGLNativeAPI("glColor3s")] public static delegate* unmanaged<short, short, short, void> glColor3s;
        [QGLNativeAPI("glColor3sv")] public static delegate* unmanaged<short*, void> glColor3sv;
        [QGLNativeAPI("glColor3ub")] public static delegate* unmanaged<byte, byte, byte, void> glColor3ub;
        [QGLNativeAPI("glColor3ubv")] public static delegate* unmanaged<byte*, void> glColor3ubv;
        [QGLNativeAPI("glColor3ui")] public static delegate* unmanaged<uint, uint, uint, void> glColor3ui;
        [QGLNativeAPI("glColor3uiv")] public static delegate* unmanaged<uint*, void> glColor3uiv;
        [QGLNativeAPI("glColor3us")] public static delegate* unmanaged<ushort, ushort, ushort, void> glColor3us;
        [QGLNativeAPI("glColor3usv")] public static delegate* unmanaged<ushort*, void> glColor3usv;
        [QGLNativeAPI("glColor4b")] public static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> glColor4b;
        [QGLNativeAPI("glColor4bv")] public static delegate* unmanaged<sbyte*, void> glColor4bv;
        [QGLNativeAPI("glColor4d")] public static delegate* unmanaged<double, double, double, double, void> glColor4d;
        [QGLNativeAPI("glColor4dv")] public static delegate* unmanaged<double*, void> glColor4dv;
        [QGLNativeAPI("glColor4f")] public static delegate* unmanaged<float, float, float, float, void> glColor4f;
        [QGLNativeAPI("glColor4fv")] public static delegate* unmanaged<float*, void> glColor4fv;
        [QGLNativeAPI("glColor4i")] public static delegate* unmanaged<int, int, int, int, void> glColor4i;
        [QGLNativeAPI("glColor4iv")] public static delegate* unmanaged<int*, void> glColor4iv;
        [QGLNativeAPI("glColor4s")] public static delegate* unmanaged<short, short, short, short, void> glColor4s;
        [QGLNativeAPI("glColor4sv")] public static delegate* unmanaged<short*, void> glColor4sv;
        [QGLNativeAPI("glColor4ub")] public static delegate* unmanaged<byte, byte, byte, byte, void> glColor4ub;
        [QGLNativeAPI("glColor4ubv")] public static delegate* unmanaged<byte*, void> glColor4ubv;
        [QGLNativeAPI("glColor4ui")] public static delegate* unmanaged<uint, uint, uint, uint, void> glColor4ui;
        [QGLNativeAPI("glColor4uiv")] public static delegate* unmanaged<uint*, void> glColor4uiv;
        [QGLNativeAPI("glColor4us")] public static delegate* unmanaged<ushort, ushort, ushort, ushort, void> glColor4us;
        [QGLNativeAPI("glColor4usv")] public static delegate* unmanaged<ushort*, void> glColor4usv;
        [QGLNativeAPI("glEdgeFlag")] public static delegate* unmanaged<bool, void> glEdgeFlag;
        [QGLNativeAPI("glEdgeFlagv")] public static delegate* unmanaged<bool*, void> glEdgeFlagv;
        [QGLNativeAPI("glEnd")] public static delegate* unmanaged<void> glEnd;
        [QGLNativeAPI("glIndexd")] public static delegate* unmanaged<double, void> glIndexd;
        [QGLNativeAPI("glIndexdv")] public static delegate* unmanaged<double*, void> glIndexdv;
        [QGLNativeAPI("glIndexf")] public static delegate* unmanaged<float, void> glIndexf;
        [QGLNativeAPI("glIndexfv")] public static delegate* unmanaged<float*, void> glIndexfv;
        [QGLNativeAPI("glIndexi")] public static delegate* unmanaged<int, void> glIndexi;
        [QGLNativeAPI("glIndexiv")] public static delegate* unmanaged<int*, void> glIndexiv;
        [QGLNativeAPI("glIndexs")] public static delegate* unmanaged<short, void> glIndexs;
        [QGLNativeAPI("glIndexsv")] public static delegate* unmanaged<short*, void> glIndexsv;
        [QGLNativeAPI("glNormal3b")] public static delegate* unmanaged<sbyte, sbyte, sbyte, void> glNormal3b;
        [QGLNativeAPI("glNormal3bv")] public static delegate* unmanaged<sbyte*, void> glNormal3bv;
        [QGLNativeAPI("glNormal3d")] public static delegate* unmanaged<double, double, double, void> glNormal3d;
        [QGLNativeAPI("glNormal3dv")] public static delegate* unmanaged<double*, void> glNormal3dv;
        [QGLNativeAPI("glNormal3f")] public static delegate* unmanaged<float, float, float, void> glNormal3f;
        [QGLNativeAPI("glNormal3fv")] public static delegate* unmanaged<float*, void> glNormal3fv;
        [QGLNativeAPI("glNormal3i")] public static delegate* unmanaged<int, int, int, void> glNormal3i;
        [QGLNativeAPI("glNormal3iv")] public static delegate* unmanaged<int*, void> glNormal3iv;
        [QGLNativeAPI("glNormal3s")] public static delegate* unmanaged<short, short, short, void> glNormal3s;
        [QGLNativeAPI("glNormal3sv")] public static delegate* unmanaged<short*, void> glNormal3sv;
        [QGLNativeAPI("glRasterPos2d")] public static delegate* unmanaged<double, double, void> glRasterPos2d;
        [QGLNativeAPI("glRasterPos2dv")] public static delegate* unmanaged<double*, void> glRasterPos2dv;
        [QGLNativeAPI("glRasterPos2f")] public static delegate* unmanaged<float, float, void> glRasterPos2f;
        [QGLNativeAPI("glRasterPos2fv")] public static delegate* unmanaged<float*, void> glRasterPos2fv;
        [QGLNativeAPI("glRasterPos2i")] public static delegate* unmanaged<int, int, void> glRasterPos2i;
        [QGLNativeAPI("glRasterPos2iv")] public static delegate* unmanaged<int*, void> glRasterPos2iv;
        [QGLNativeAPI("glRasterPos2s")] public static delegate* unmanaged<short, short, void> glRasterPos2s;
        [QGLNativeAPI("glRasterPos2sv")] public static delegate* unmanaged<short*, void> glRasterPos2sv;
        [QGLNativeAPI("glRasterPos3d")] public static delegate* unmanaged<double, double, double, void> glRasterPos3d;
        [QGLNativeAPI("glRasterPos3dv")] public static delegate* unmanaged<double*, void> glRasterPos3dv;
        [QGLNativeAPI("glRasterPos3f")] public static delegate* unmanaged<float, float, float, void> glRasterPos3f;
        [QGLNativeAPI("glRasterPos3fv")] public static delegate* unmanaged<float*, void> glRasterPos3fv;
        [QGLNativeAPI("glRasterPos3i")] public static delegate* unmanaged<int, int, int, void> glRasterPos3i;
        [QGLNativeAPI("glRasterPos3iv")] public static delegate* unmanaged<int*, void> glRasterPos3iv;
        [QGLNativeAPI("glRasterPos3s")] public static delegate* unmanaged<short, short, short, void> glRasterPos3s;
        [QGLNativeAPI("glRasterPos3sv")] public static delegate* unmanaged<short*, void> glRasterPos3sv;
        [QGLNativeAPI("glRasterPos4d")] public static delegate* unmanaged<double, double, double, double, void> glRasterPos4d;
        [QGLNativeAPI("glRasterPos4dv")] public static delegate* unmanaged<double*, void> glRasterPos4dv;
        [QGLNativeAPI("glRasterPos4f")] public static delegate* unmanaged<float, float, float, float, void> glRasterPos4f;
        [QGLNativeAPI("glRasterPos4fv")] public static delegate* unmanaged<float*, void> glRasterPos4fv;
        [QGLNativeAPI("glRasterPos4i")] public static delegate* unmanaged<int, int, int, int, void> glRasterPos4i;
        [QGLNativeAPI("glRasterPos4iv")] public static delegate* unmanaged<int*, void> glRasterPos4iv;
        [QGLNativeAPI("glRasterPos4s")] public static delegate* unmanaged<short, short, short, short, void> glRasterPos4s;
        [QGLNativeAPI("glRasterPos4sv")] public static delegate* unmanaged<short*, void> glRasterPos4sv;
        [QGLNativeAPI("glRectd")] public static delegate* unmanaged<double, double, double, double, void> glRectd;
        [QGLNativeAPI("glRectdv")] public static delegate* unmanaged<double*, double*, void> glRectdv;
        [QGLNativeAPI("glRectf")] public static delegate* unmanaged<float, float, float, float, void> glRectf;
        [QGLNativeAPI("glRectfv")] public static delegate* unmanaged<float*, float*, void> glRectfv;
        [QGLNativeAPI("glRecti")] public static delegate* unmanaged<int, int, int, int, void> glRecti;
        [QGLNativeAPI("glRectiv")] public static delegate* unmanaged<int*, int*, void> glRectiv;
        [QGLNativeAPI("glRects")] public static delegate* unmanaged<short, short, short, short, void> glRects;
        [QGLNativeAPI("glRectsv")] public static delegate* unmanaged<short*, short*, void> glRectsv;
        [QGLNativeAPI("glTexCoord1d")] public static delegate* unmanaged<double, void> glTexCoord1d;
        [QGLNativeAPI("glTexCoord1dv")] public static delegate* unmanaged<double*, void> glTexCoord1dv;
        [QGLNativeAPI("glTexCoord1f")] public static delegate* unmanaged<float, void> glTexCoord1f;
        [QGLNativeAPI("glTexCoord1fv")] public static delegate* unmanaged<float*, void> glTexCoord1fv;
        [QGLNativeAPI("glTexCoord1i")] public static delegate* unmanaged<int, void> glTexCoord1i;
        [QGLNativeAPI("glTexCoord1iv")] public static delegate* unmanaged<int*, void> glTexCoord1iv;
        [QGLNativeAPI("glTexCoord1s")] public static delegate* unmanaged<short, void> glTexCoord1s;
        [QGLNativeAPI("glTexCoord1sv")] public static delegate* unmanaged<short*, void> glTexCoord1sv;
        [QGLNativeAPI("glTexCoord2d")] public static delegate* unmanaged<double, double, void> glTexCoord2d;
        [QGLNativeAPI("glTexCoord2dv")] public static delegate* unmanaged<double*, void> glTexCoord2dv;
        [QGLNativeAPI("glTexCoord2f")] public static delegate* unmanaged<float, float, void> glTexCoord2f;
        [QGLNativeAPI("glTexCoord2fv")] public static delegate* unmanaged<float*, void> glTexCoord2fv;
        [QGLNativeAPI("glTexCoord2i")] public static delegate* unmanaged<int, int, void> glTexCoord2i;
        [QGLNativeAPI("glTexCoord2iv")] public static delegate* unmanaged<int*, void> glTexCoord2iv;
        [QGLNativeAPI("glTexCoord2s")] public static delegate* unmanaged<short, short, void> glTexCoord2s;
        [QGLNativeAPI("glTexCoord2sv")] public static delegate* unmanaged<short*, void> glTexCoord2sv;
        [QGLNativeAPI("glTexCoord3d")] public static delegate* unmanaged<double, double, double, void> glTexCoord3d;
        [QGLNativeAPI("glTexCoord3dv")] public static delegate* unmanaged<double*, void> glTexCoord3dv;
        [QGLNativeAPI("glTexCoord3f")] public static delegate* unmanaged<float, float, float, void> glTexCoord3f;
        [QGLNativeAPI("glTexCoord3fv")] public static delegate* unmanaged<float*, void> glTexCoord3fv;
        [QGLNativeAPI("glTexCoord3i")] public static delegate* unmanaged<int, int, int, void> glTexCoord3i;
        [QGLNativeAPI("glTexCoord3iv")] public static delegate* unmanaged<int*, void> glTexCoord3iv;
        [QGLNativeAPI("glTexCoord3s")] public static delegate* unmanaged<short, short, short, void> glTexCoord3s;
        [QGLNativeAPI("glTexCoord3sv")] public static delegate* unmanaged<short*, void> glTexCoord3sv;
        [QGLNativeAPI("glTexCoord4d")] public static delegate* unmanaged<double, double, double, double, void> glTexCoord4d;
        [QGLNativeAPI("glTexCoord4dv")] public static delegate* unmanaged<double*, void> glTexCoord4dv;
        [QGLNativeAPI("glTexCoord4f")] public static delegate* unmanaged<float, float, float, float, void> glTexCoord4f;
        [QGLNativeAPI("glTexCoord4fv")] public static delegate* unmanaged<float*, void> glTexCoord4fv;
        [QGLNativeAPI("glTexCoord4i")] public static delegate* unmanaged<int, int, int, int, void> glTexCoord4i;
        [QGLNativeAPI("glTexCoord4iv")] public static delegate* unmanaged<int*, void> glTexCoord4iv;
        [QGLNativeAPI("glTexCoord4s")] public static delegate* unmanaged<short, short, short, short, void> glTexCoord4s;
        [QGLNativeAPI("glTexCoord4sv")] public static delegate* unmanaged<short*, void> glTexCoord4sv;
        [QGLNativeAPI("glVertex2d")] public static delegate* unmanaged<double, double, void> glVertex2d;
        [QGLNativeAPI("glVertex2dv")] public static delegate* unmanaged<double*, void> glVertex2dv;
        [QGLNativeAPI("glVertex2f")] public static delegate* unmanaged<float, float, void> glVertex2f;
        [QGLNativeAPI("glVertex2fv")] public static delegate* unmanaged<float*, void> glVertex2fv;
        [QGLNativeAPI("glVertex2i")] public static delegate* unmanaged<int, int, void> glVertex2i;
        [QGLNativeAPI("glVertex2iv")] public static delegate* unmanaged<int*, void> glVertex2iv;
        [QGLNativeAPI("glVertex2s")] public static delegate* unmanaged<short, short, void> glVertex2s;
        [QGLNativeAPI("glVertex2sv")] public static delegate* unmanaged<short*, void> glVertex2sv;
        [QGLNativeAPI("glVertex3d")] public static delegate* unmanaged<double, double, double, void> glVertex3d;
        [QGLNativeAPI("glVertex3dv")] public static delegate* unmanaged<double*, void> glVertex3dv;
        [QGLNativeAPI("glVertex3f")] public static delegate* unmanaged<float, float, float, void> glVertex3f;
        [QGLNativeAPI("glVertex3fv")] public static delegate* unmanaged<float*, void> glVertex3fv;
        [QGLNativeAPI("glVertex3i")] public static delegate* unmanaged<int, int, int, void> glVertex3i;
        [QGLNativeAPI("glVertex3iv")] public static delegate* unmanaged<int*, void> glVertex3iv;
        [QGLNativeAPI("glVertex3s")] public static delegate* unmanaged<short, short, short, void> glVertex3s;
        [QGLNativeAPI("glVertex3sv")] public static delegate* unmanaged<short*, void> glVertex3sv;
        [QGLNativeAPI("glVertex4d")] public static delegate* unmanaged<double, double, double, double, void> glVertex4d;
        [QGLNativeAPI("glVertex4dv")] public static delegate* unmanaged<double*, void> glVertex4dv;
        [QGLNativeAPI("glVertex4f")] public static delegate* unmanaged<float, float, float, float, void> glVertex4f;
        [QGLNativeAPI("glVertex4fv")] public static delegate* unmanaged<float*, void> glVertex4fv;
        [QGLNativeAPI("glVertex4i")] public static delegate* unmanaged<int, int, int, int, void> glVertex4i;
        [QGLNativeAPI("glVertex4iv")] public static delegate* unmanaged<int*, void> glVertex4iv;
        [QGLNativeAPI("glVertex4s")] public static delegate* unmanaged<short, short, short, short, void> glVertex4s;
        [QGLNativeAPI("glVertex4sv")] public static delegate* unmanaged<short*, void> glVertex4sv;
        [QGLNativeAPI("glClipPlane")] public static delegate* unmanaged<uint, double*, void> glClipPlane;
        [QGLNativeAPI("glColorMaterial")] public static delegate* unmanaged<uint, uint, void> glColorMaterial;
        [QGLNativeAPI("glFogf")] public static delegate* unmanaged<uint, float, void> glFogf;
        [QGLNativeAPI("glFogfv")] public static delegate* unmanaged<uint, float*, void> glFogfv;
        [QGLNativeAPI("glFogi")] public static delegate* unmanaged<uint, int, void> glFogi;
        [QGLNativeAPI("glFogiv")] public static delegate* unmanaged<uint, int*, void> glFogiv;
        [QGLNativeAPI("glLightf")] public static delegate* unmanaged<uint, uint, float, void> glLightf;
        [QGLNativeAPI("glLightfv")] public static delegate* unmanaged<uint, uint, float*, void> glLightfv;
        [QGLNativeAPI("glLighti")] public static delegate* unmanaged<uint, uint, int, void> glLighti;
        [QGLNativeAPI("glLightiv")] public static delegate* unmanaged<uint, uint, int*, void> glLightiv;
        [QGLNativeAPI("glLightModelf")] public static delegate* unmanaged<uint, float, void> glLightModelf;
        [QGLNativeAPI("glLightModelfv")] public static delegate* unmanaged<uint, float*, void> glLightModelfv;
        [QGLNativeAPI("glLightModeli")] public static delegate* unmanaged<uint, int, void> glLightModeli;
        [QGLNativeAPI("glLightModeliv")] public static delegate* unmanaged<uint, int*, void> glLightModeliv;
        [QGLNativeAPI("glLineStipple")] public static delegate* unmanaged<int, ushort, void> glLineStipple;
        [QGLNativeAPI("glMaterialf")] public static delegate* unmanaged<uint, uint, float, void> glMaterialf;
        [QGLNativeAPI("glMaterialfv")] public static delegate* unmanaged<uint, uint, float*, void> glMaterialfv;
        [QGLNativeAPI("glMateriali")] public static delegate* unmanaged<uint, uint, int, void> glMateriali;
        [QGLNativeAPI("glMaterialiv")] public static delegate* unmanaged<uint, uint, int*, void> glMaterialiv;
        [QGLNativeAPI("glPolygonStipple")] public static delegate* unmanaged<byte*, void> glPolygonStipple;
        [QGLNativeAPI("glShadeModel")] public static delegate* unmanaged<uint, void> glShadeModel;
        [QGLNativeAPI("glTexEnvf")] public static delegate* unmanaged<uint, uint, float, void> glTexEnvf;
        [QGLNativeAPI("glTexEnvfv")] public static delegate* unmanaged<uint, uint, float*, void> glTexEnvfv;
        [QGLNativeAPI("glTexEnvi")] public static delegate* unmanaged<uint, uint, int, void> glTexEnvi;
        [QGLNativeAPI("glTexEnviv")] public static delegate* unmanaged<uint, uint, int*, void> glTexEnviv;
        [QGLNativeAPI("glTexGend")] public static delegate* unmanaged<uint, uint, double, void> glTexGend;
        [QGLNativeAPI("glTexGendv")] public static delegate* unmanaged<uint, uint, double*, void> glTexGendv;
        [QGLNativeAPI("glTexGenf")] public static delegate* unmanaged<uint, uint, float, void> glTexGenf;
        [QGLNativeAPI("glTexGenfv")] public static delegate* unmanaged<uint, uint, float*, void> glTexGenfv;
        [QGLNativeAPI("glTexGeni")] public static delegate* unmanaged<uint, uint, int, void> glTexGeni;
        [QGLNativeAPI("glTexGeniv")] public static delegate* unmanaged<uint, uint, int*, void> glTexGeniv;
        [QGLNativeAPI("glFeedbackBuffer")] public static delegate* unmanaged<int, uint, float*, void> glFeedbackBuffer;
        [QGLNativeAPI("glSelectBuffer")] public static delegate* unmanaged<int, uint*, void> glSelectBuffer;
        [QGLNativeAPI("glRenderMode")] public static delegate* unmanaged<uint, int> glRenderMode;
        [QGLNativeAPI("glInitNames")] public static delegate* unmanaged<void> glInitNames;
        [QGLNativeAPI("glLoadName")] public static delegate* unmanaged<uint, void> glLoadName;
        [QGLNativeAPI("glPassThrough")] public static delegate* unmanaged<float, void> glPassThrough;
        [QGLNativeAPI("glPopName")] public static delegate* unmanaged<void> glPopName;
        [QGLNativeAPI("glPushName")] public static delegate* unmanaged<uint, void> glPushName;
        [QGLNativeAPI("glClearAccum")] public static delegate* unmanaged<float, float, float, float, void> glClearAccum;
        [QGLNativeAPI("glClearIndex")] public static delegate* unmanaged<float, void> glClearIndex;
        [QGLNativeAPI("glIndexMask")] public static delegate* unmanaged<uint, void> glIndexMask;
        [QGLNativeAPI("glAccum")] public static delegate* unmanaged<uint, float, void> glAccum;
        [QGLNativeAPI("glPopAttrib")] public static delegate* unmanaged<void> glPopAttrib;
        [QGLNativeAPI("glPushAttrib")] public static delegate* unmanaged<uint, void> glPushAttrib;
        [QGLNativeAPI("glMap1d")] public static delegate* unmanaged<uint, double, double, int, int, double*, void> glMap1d;
        [QGLNativeAPI("glMap1f")] public static delegate* unmanaged<uint, float, float, int, int, float*, void> glMap1f;
        [QGLNativeAPI("glMap2d")] public static delegate* unmanaged<uint, double, double, int, int, double, double, int, int, double*, void> glMap2d;
        [QGLNativeAPI("glMap2f")] public static delegate* unmanaged<uint, float, float, int, int, float, float, int, int, float*, void> glMap2f;
        [QGLNativeAPI("glMapGrid1d")] public static delegate* unmanaged<int, double, double, void> glMapGrid1d;
        [QGLNativeAPI("glMapGrid1f")] public static delegate* unmanaged<int, float, float, void> glMapGrid1f;
        [QGLNativeAPI("glMapGrid2d")] public static delegate* unmanaged<int, double, double, int, double, double, void> glMapGrid2d;
        [QGLNativeAPI("glMapGrid2f")] public static delegate* unmanaged<int, float, float, int, float, float, void> glMapGrid2f;
        [QGLNativeAPI("glEvalCoord1d")] public static delegate* unmanaged<double, void> glEvalCoord1d;
        [QGLNativeAPI("glEvalCoord1dv")] public static delegate* unmanaged<double*, void> glEvalCoord1dv;
        [QGLNativeAPI("glEvalCoord1f")] public static delegate* unmanaged<float, void> glEvalCoord1f;
        [QGLNativeAPI("glEvalCoord1fv")] public static delegate* unmanaged<float*, void> glEvalCoord1fv;
        [QGLNativeAPI("glEvalCoord2d")] public static delegate* unmanaged<double, double, void> glEvalCoord2d;
        [QGLNativeAPI("glEvalCoord2dv")] public static delegate* unmanaged<double*, void> glEvalCoord2dv;
        [QGLNativeAPI("glEvalCoord2f")] public static delegate* unmanaged<float, float, void> glEvalCoord2f;
        [QGLNativeAPI("glEvalCoord2fv")] public static delegate* unmanaged<float*, void> glEvalCoord2fv;
        [QGLNativeAPI("glEvalMesh1")] public static delegate* unmanaged<uint, int, int, void> glEvalMesh1;
        [QGLNativeAPI("glEvalPoint1")] public static delegate* unmanaged<int, void> glEvalPoint1;
        [QGLNativeAPI("glEvalMesh2")] public static delegate* unmanaged<uint, int, int, int, int, void> glEvalMesh2;
        [QGLNativeAPI("glEvalPoint2")] public static delegate* unmanaged<int, int, void> glEvalPoint2;
        [QGLNativeAPI("glAlphaFunc")] public static delegate* unmanaged<uint, float, void> glAlphaFunc;
        [QGLNativeAPI("glPixelZoom")] public static delegate* unmanaged<float, float, void> glPixelZoom;
        [QGLNativeAPI("glPixelTransferf")] public static delegate* unmanaged<uint, float, void> glPixelTransferf;
        [QGLNativeAPI("glPixelTransferi")] public static delegate* unmanaged<uint, int, void> glPixelTransferi;
        [QGLNativeAPI("glPixelMapfv")] public static delegate* unmanaged<uint, int, float*, void> glPixelMapfv;
        [QGLNativeAPI("glPixelMapuiv")] public static delegate* unmanaged<uint, int, uint*, void> glPixelMapuiv;
        [QGLNativeAPI("glPixelMapusv")] public static delegate* unmanaged<uint, int, ushort*, void> glPixelMapusv;
        [QGLNativeAPI("glCopyPixels")] public static delegate* unmanaged<int, int, int, int, uint, void> glCopyPixels;
        [QGLNativeAPI("glDrawPixels")] public static delegate* unmanaged<int, int, uint, uint, void*, void> glDrawPixels;
        [QGLNativeAPI("glGetClipPlane")] public static delegate* unmanaged<uint, double*, void> glGetClipPlane;
        [QGLNativeAPI("glGetLightfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetLightfv;
        [QGLNativeAPI("glGetLightiv")] public static delegate* unmanaged<uint, uint, int*, void> glGetLightiv;
        [QGLNativeAPI("glGetMapdv")] public static delegate* unmanaged<uint, uint, double*, void> glGetMapdv;
        [QGLNativeAPI("glGetMapfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetMapfv;
        [QGLNativeAPI("glGetMapiv")] public static delegate* unmanaged<uint, uint, int*, void> glGetMapiv;
        [QGLNativeAPI("glGetMaterialfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetMaterialfv;
        [QGLNativeAPI("glGetMaterialiv")] public static delegate* unmanaged<uint, uint, int*, void> glGetMaterialiv;
        [QGLNativeAPI("glGetPixelMapfv")] public static delegate* unmanaged<uint, float*, void> glGetPixelMapfv;
        [QGLNativeAPI("glGetPixelMapuiv")] public static delegate* unmanaged<uint, uint*, void> glGetPixelMapuiv;
        [QGLNativeAPI("glGetPixelMapusv")] public static delegate* unmanaged<uint, ushort*, void> glGetPixelMapusv;
        [QGLNativeAPI("glGetPolygonStipple")] public static delegate* unmanaged<byte*, void> glGetPolygonStipple;
        [QGLNativeAPI("glGetTexEnvfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetTexEnvfv;
        [QGLNativeAPI("glGetTexEnviv")] public static delegate* unmanaged<uint, uint, int*, void> glGetTexEnviv;
        [QGLNativeAPI("glGetTexGendv")] public static delegate* unmanaged<uint, uint, double*, void> glGetTexGendv;
        [QGLNativeAPI("glGetTexGenfv")] public static delegate* unmanaged<uint, uint, float*, void> glGetTexGenfv;
        [QGLNativeAPI("glGetTexGeniv")] public static delegate* unmanaged<uint, uint, int*, void> glGetTexGeniv;
        [QGLNativeAPI("glIsList")] public static delegate* unmanaged<uint, bool> glIsList;
        [QGLNativeAPI("glFrustum")] public static delegate* unmanaged<double, double, double, double, double, double, void> glFrustum;
        [QGLNativeAPI("glLoadIdentity")] public static delegate* unmanaged<void> glLoadIdentity;
        [QGLNativeAPI("glLoadMatrixf")] public static delegate* unmanaged<float*, void> glLoadMatrixf;
        [QGLNativeAPI("glLoadMatrixd")] public static delegate* unmanaged<double*, void> glLoadMatrixd;
        [QGLNativeAPI("glMatrixMode")] public static delegate* unmanaged<uint, void> glMatrixMode;
        [QGLNativeAPI("glMultMatrixf")] public static delegate* unmanaged<float*, void> glMultMatrixf;
        [QGLNativeAPI("glMultMatrixd")] public static delegate* unmanaged<double*, void> glMultMatrixd;
        [QGLNativeAPI("glOrtho")] public static delegate* unmanaged<double, double, double, double, double, double, void> glOrtho;
        [QGLNativeAPI("glPopMatrix")] public static delegate* unmanaged<void> glPopMatrix;
        [QGLNativeAPI("glPushMatrix")] public static delegate* unmanaged<void> glPushMatrix;
        [QGLNativeAPI("glRotated")] public static delegate* unmanaged<double, double, double, double, void> glRotated;
        [QGLNativeAPI("glRotatef")] public static delegate* unmanaged<float, float, float, float, void> glRotatef;
        [QGLNativeAPI("glScaled")] public static delegate* unmanaged<double, double, double, void> glScaled;
        [QGLNativeAPI("glScalef")] public static delegate* unmanaged<float, float, float, void> glScalef;
        [QGLNativeAPI("glTranslated")] public static delegate* unmanaged<double, double, double, void> glTranslated;
        [QGLNativeAPI("glTranslatef")] public static delegate* unmanaged<float, float, float, void> glTranslatef;
        #endregion
    }
}
