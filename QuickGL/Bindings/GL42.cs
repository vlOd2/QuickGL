// This file has been automatically generated
// Generated by: QGLBindingsGen (https://github.com/vlOd2/QGLBindingsGen)
// Generated at: 2025-09-27T19:43:43.7284201Z
using System.Runtime.InteropServices;
using QuickGLNS.Internal;

namespace QuickGLNS.Bindings;

public static unsafe class GL42
{
    #region Constants
    public const int GL_COPY_READ_BUFFER_BINDING = 0x00008F36;
    public const int GL_COPY_WRITE_BUFFER_BINDING = 0x00008F37;
    public const int GL_TRANSFORM_FEEDBACK_ACTIVE = 0x00008E24;
    public const int GL_TRANSFORM_FEEDBACK_PAUSED = 0x00008E23;
    public const int GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x00009127;
    public const int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x00009128;
    public const int GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x00009129;
    public const int GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x0000912A;
    public const int GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x0000912B;
    public const int GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x0000912C;
    public const int GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x0000912D;
    public const int GL_PACK_COMPRESSED_BLOCK_SIZE = 0x0000912E;
    public const int GL_NUM_SAMPLE_COUNTS = 0x00009380;
    public const int GL_MIN_MAP_BUFFER_ALIGNMENT = 0x000090BC;
    public const int GL_ATOMIC_COUNTER_BUFFER = 0x000092C0;
    public const int GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x000092C1;
    public const int GL_ATOMIC_COUNTER_BUFFER_START = 0x000092C2;
    public const int GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x000092C3;
    public const int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x000092C4;
    public const int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x000092C5;
    public const int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x000092C6;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x000092C7;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x000092C8;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x000092C9;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x000092CA;
    public const int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x000092CB;
    public const int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x000092CC;
    public const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x000092CD;
    public const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x000092CE;
    public const int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x000092CF;
    public const int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x000092D0;
    public const int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x000092D1;
    public const int GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x000092D2;
    public const int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x000092D3;
    public const int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x000092D4;
    public const int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x000092D5;
    public const int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x000092D6;
    public const int GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x000092D7;
    public const int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x000092D8;
    public const int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x000092DC;
    public const int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x000092D9;
    public const int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x000092DA;
    public const int GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x000092DB;
    public const int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
    public const int GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
    public const int GL_UNIFORM_BARRIER_BIT = 0x00000004;
    public const int GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
    public const int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
    public const int GL_COMMAND_BARRIER_BIT = 0x00000040;
    public const int GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
    public const int GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
    public const int GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
    public const int GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
    public const int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
    public const int GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
    public const uint GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
    public const int GL_MAX_IMAGE_UNITS = 0x00008F38;
    public const int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x00008F39;
    public const int GL_IMAGE_BINDING_NAME = 0x00008F3A;
    public const int GL_IMAGE_BINDING_LEVEL = 0x00008F3B;
    public const int GL_IMAGE_BINDING_LAYERED = 0x00008F3C;
    public const int GL_IMAGE_BINDING_LAYER = 0x00008F3D;
    public const int GL_IMAGE_BINDING_ACCESS = 0x00008F3E;
    public const int GL_IMAGE_1D = 0x0000904C;
    public const int GL_IMAGE_2D = 0x0000904D;
    public const int GL_IMAGE_3D = 0x0000904E;
    public const int GL_IMAGE_2D_RECT = 0x0000904F;
    public const int GL_IMAGE_CUBE = 0x00009050;
    public const int GL_IMAGE_BUFFER = 0x00009051;
    public const int GL_IMAGE_1D_ARRAY = 0x00009052;
    public const int GL_IMAGE_2D_ARRAY = 0x00009053;
    public const int GL_IMAGE_CUBE_MAP_ARRAY = 0x00009054;
    public const int GL_IMAGE_2D_MULTISAMPLE = 0x00009055;
    public const int GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x00009056;
    public const int GL_INT_IMAGE_1D = 0x00009057;
    public const int GL_INT_IMAGE_2D = 0x00009058;
    public const int GL_INT_IMAGE_3D = 0x00009059;
    public const int GL_INT_IMAGE_2D_RECT = 0x0000905A;
    public const int GL_INT_IMAGE_CUBE = 0x0000905B;
    public const int GL_INT_IMAGE_BUFFER = 0x0000905C;
    public const int GL_INT_IMAGE_1D_ARRAY = 0x0000905D;
    public const int GL_INT_IMAGE_2D_ARRAY = 0x0000905E;
    public const int GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x0000905F;
    public const int GL_INT_IMAGE_2D_MULTISAMPLE = 0x00009060;
    public const int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x00009061;
    public const int GL_UNSIGNED_INT_IMAGE_1D = 0x00009062;
    public const int GL_UNSIGNED_INT_IMAGE_2D = 0x00009063;
    public const int GL_UNSIGNED_INT_IMAGE_3D = 0x00009064;
    public const int GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x00009065;
    public const int GL_UNSIGNED_INT_IMAGE_CUBE = 0x00009066;
    public const int GL_UNSIGNED_INT_IMAGE_BUFFER = 0x00009067;
    public const int GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x00009068;
    public const int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x00009069;
    public const int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x0000906A;
    public const int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x0000906B;
    public const int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x0000906C;
    public const int GL_MAX_IMAGE_SAMPLES = 0x0000906D;
    public const int GL_IMAGE_BINDING_FORMAT = 0x0000906E;
    public const int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x000090C7;
    public const int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x000090C8;
    public const int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x000090C9;
    public const int GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x000090CA;
    public const int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x000090CB;
    public const int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x000090CC;
    public const int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x000090CD;
    public const int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x000090CE;
    public const int GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x000090CF;
    public const int GL_COMPRESSED_RGBA_BPTC_UNORM = 0x00008E8C;
    public const int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x00008E8D;
    public const int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x00008E8E;
    public const int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x00008E8F;
    public const int GL_TEXTURE_IMMUTABLE_FORMAT = 0x0000912F;
    #endregion

    #region Function pointers
    internal static delegate* unmanaged<uint, int, int, int, uint, void> _glDrawArraysInstancedBaseInstance = null;
    internal static delegate* unmanaged<uint, int, uint, void*, int, uint, void> _glDrawElementsInstancedBaseInstance = null;
    internal static delegate* unmanaged<uint, int, uint, void*, int, int, uint, void> _glDrawElementsInstancedBaseVertexBaseInstance = null;
    internal static delegate* unmanaged<uint, uint, uint, int, int*, void> _glGetInternalformativ = null;
    internal static delegate* unmanaged<uint, uint, uint, int*, void> _glGetActiveAtomicCounterBufferiv = null;
    internal static delegate* unmanaged<uint, uint, int, bool, int, uint, uint, void> _glBindImageTexture = null;
    internal static delegate* unmanaged<uint, void> _glMemoryBarrier = null;
    internal static delegate* unmanaged<uint, int, uint, int, void> _glTexStorage1D = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, void> _glTexStorage2D = null;
    internal static delegate* unmanaged<uint, int, uint, int, int, int, void> _glTexStorage3D = null;
    internal static delegate* unmanaged<uint, uint, int, void> _glDrawTransformFeedbackInstanced = null;
    internal static delegate* unmanaged<uint, uint, uint, int, void> _glDrawTransformFeedbackStreamInstanced = null;

    internal static void Load()
    {
        _glDrawArraysInstancedBaseInstance = (delegate* unmanaged<uint, int, int, int, uint, void>)QuickGL.GetGLProcAddress("glDrawArraysInstancedBaseInstance");
        _glDrawElementsInstancedBaseInstance = (delegate* unmanaged<uint, int, uint, void*, int, uint, void>)QuickGL.GetGLProcAddress("glDrawElementsInstancedBaseInstance");
        _glDrawElementsInstancedBaseVertexBaseInstance = (delegate* unmanaged<uint, int, uint, void*, int, int, uint, void>)QuickGL.GetGLProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
        _glGetInternalformativ = (delegate* unmanaged<uint, uint, uint, int, int*, void>)QuickGL.GetGLProcAddress("glGetInternalformativ");
        _glGetActiveAtomicCounterBufferiv = (delegate* unmanaged<uint, uint, uint, int*, void>)QuickGL.GetGLProcAddress("glGetActiveAtomicCounterBufferiv");
        _glBindImageTexture = (delegate* unmanaged<uint, uint, int, bool, int, uint, uint, void>)QuickGL.GetGLProcAddress("glBindImageTexture");
        _glMemoryBarrier = (delegate* unmanaged<uint, void>)QuickGL.GetGLProcAddress("glMemoryBarrier");
        _glTexStorage1D = (delegate* unmanaged<uint, int, uint, int, void>)QuickGL.GetGLProcAddress("glTexStorage1D");
        _glTexStorage2D = (delegate* unmanaged<uint, int, uint, int, int, void>)QuickGL.GetGLProcAddress("glTexStorage2D");
        _glTexStorage3D = (delegate* unmanaged<uint, int, uint, int, int, int, void>)QuickGL.GetGLProcAddress("glTexStorage3D");
        _glDrawTransformFeedbackInstanced = (delegate* unmanaged<uint, uint, int, void>)QuickGL.GetGLProcAddress("glDrawTransformFeedbackInstanced");
        _glDrawTransformFeedbackStreamInstanced = (delegate* unmanaged<uint, uint, uint, int, void>)QuickGL.GetGLProcAddress("glDrawTransformFeedbackStreamInstanced");
    }

    internal static void Unload()
    {
        _glDrawArraysInstancedBaseInstance = null;
        _glDrawElementsInstancedBaseInstance = null;
        _glDrawElementsInstancedBaseVertexBaseInstance = null;
        _glGetInternalformativ = null;
        _glGetActiveAtomicCounterBufferiv = null;
        _glBindImageTexture = null;
        _glMemoryBarrier = null;
        _glTexStorage1D = null;
        _glTexStorage2D = null;
        _glTexStorage3D = null;
        _glDrawTransformFeedbackInstanced = null;
        _glDrawTransformFeedbackStreamInstanced = null;
    }
    #endregion

    #region Function wrappers
    public static void glDrawArraysInstancedBaseInstance(uint mode, int first, int count, int instancecount, uint baseinstance) { QGLFeature.VerifyFunc((nint)_glDrawArraysInstancedBaseInstance); _glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance); }
    public static void glDrawElementsInstancedBaseInstance(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance) { QGLFeature.VerifyFunc((nint)_glDrawElementsInstancedBaseInstance); _glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance); }
    public static void glDrawElementsInstancedBaseVertexBaseInstance(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance) { QGLFeature.VerifyFunc((nint)_glDrawElementsInstancedBaseVertexBaseInstance); _glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance); }
    public static void glGetInternalformativ(uint target, uint internalformat, uint pname, int count, int* @params) { QGLFeature.VerifyFunc((nint)_glGetInternalformativ); _glGetInternalformativ(target, internalformat, pname, count, @params); }
    public static void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, int* @params) { QGLFeature.VerifyFunc((nint)_glGetActiveAtomicCounterBufferiv); _glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, @params); }
    public static void glBindImageTexture(uint unit, uint texture, int level, bool layered, int layer, uint access, uint format) { QGLFeature.VerifyFunc((nint)_glBindImageTexture); _glBindImageTexture(unit, texture, level, layered, layer, access, format); }
    public static void glMemoryBarrier(uint barriers) { QGLFeature.VerifyFunc((nint)_glMemoryBarrier); _glMemoryBarrier(barriers); }
    public static void glTexStorage1D(uint target, int levels, uint internalformat, int width) { QGLFeature.VerifyFunc((nint)_glTexStorage1D); _glTexStorage1D(target, levels, internalformat, width); }
    public static void glTexStorage2D(uint target, int levels, uint internalformat, int width, int height) { QGLFeature.VerifyFunc((nint)_glTexStorage2D); _glTexStorage2D(target, levels, internalformat, width, height); }
    public static void glTexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth) { QGLFeature.VerifyFunc((nint)_glTexStorage3D); _glTexStorage3D(target, levels, internalformat, width, height, depth); }
    public static void glDrawTransformFeedbackInstanced(uint mode, uint id, int instancecount) { QGLFeature.VerifyFunc((nint)_glDrawTransformFeedbackInstanced); _glDrawTransformFeedbackInstanced(mode, id, instancecount); }
    public static void glDrawTransformFeedbackStreamInstanced(uint mode, uint id, uint stream, int instancecount) { QGLFeature.VerifyFunc((nint)_glDrawTransformFeedbackStreamInstanced); _glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount); }
    #endregion

    internal static QGLFeature FeatureInfo => new("GL_VERSION_4_2", false, false);
}
